{
  "swagger": "2.0",
  "info": {
    "title": "Bluesky Social",
    "description": "Specification for the Bluesky Social endpoints. Includes endpoints for social interaction, admin, chat, ATProto, and ozone.",
    "contact": {
      "name": "Dan Romano",
      "email": "dan.romano@swolcat.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    },
    "version": "1.0"
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://docs.bsky.app/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://example.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Social Media"
    }
  ],
  "host": "bsky.social",
  "basePath": "/xrpc",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter 'Bearer' followed by a space and your token."
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/xrpc/app.bsky.actor.getProfile": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get Profile",
        "x-ms-summary": "Fetch a detailed profile of an actor.",
        "description": "Retrieve a detailed profile view of an actor using their handle or DID.",
        "operationId": "getProfile",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "Handle or DID of the account to fetch the profile of.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed profile fetched successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "profile": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getProfile",
                    "value-path": "profile",
                    "parameters": {
                      "actor": "{actor}"
                    }
                  },
                  "description": "Detailed profile information of the actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.getProfiles": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Get Profiles",
        "description": "Get detailed profile views of multiple actors.",
        "operationId": "getProfiles",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actors",
            "in": "query",
            "required": true,
            "description": "Actor Identifier",
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 25,
            "x-ms-summary": "List of actor identifiers"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiles retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "profiles"
              ],
              "properties": {
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileViewDetailed"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.getSuggestions": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Get Suggestions for Actors",
        "description": "Retrieve account suggestions for the user.",
        "operationId": "GetSuggestions",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of suggestions to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved suggested profiles.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "actors": {
                  "type": "array",
                  "description": "An array of suggested actor profiles.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "Decentralized Identifier (DID) of the actor."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Unique handle of the actor."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the actor."
                      },
                      "description": {
                        "type": "string",
                        "description": "Profile description of the actor."
                      },
                      "avatar": {
                        "type": "string",
                        "format": "uri",
                        "description": "URI of the actor's avatar image."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Associated metadata for the actor.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "description": "Number of lists the actor is part of."
                          },
                          "feedgens": {
                            "type": "integer",
                            "description": "Number of feed generators associated with the actor."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "description": "Number of starter packs associated with the actor."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Indicates if the actor is a labeler."
                          },
                          "chat": {
                            "type": "object",
                            "description": "Chat preferences for the actor.",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Specifies if incoming chats are allowed."
                              }
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata for the actor.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the actor is muted by the viewer."
                          },
                          "mutedByList": {
                            "$ref": "#/definitions/MutedByList"
                          },
                          "blockedBy": {
                            "type": "boolean",
                            "description": "Indicates if the actor is blocked by the viewer."
                          },
                          "blocking": {
                            "type": "string",
                            "description": "Details of the block, if applicable."
                          },
                          "blockingByList": {
                            "$ref": "#/definitions/BlockingByList"
                          },
                          "following": {
                            "type": "string",
                            "description": "Indicates if the viewer is following the actor."
                          },
                          "followedBy": {
                            "type": "string",
                            "description": "Indicates if the actor is following the viewer."
                          },
                          "knownFollowers": {
                            "type": "object",
                            "description": "Known followers of the actor.",
                            "properties": {
                              "count": {
                                "type": "integer",
                                "description": "Total number of known followers."
                              },
                              "followers": {
                                "type": "array",
                                "description": "List of known followers.",
                                "items": {
                                  "$ref": "#/definitions/ProfileView"
                                }
                              }
                            }
                          }
                        }
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the actor.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.putPreferences": {
      "post": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Update Preferences for current account",
        "description": "Update the user's preferences.\n",
        "operationId": "PutPreferences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "An object containing the preferences to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Preferences"
            },
            "x-ms-summary": "Preferences Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated preferences for the current account.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the preferences update was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.searchActors": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Search for Actors",
        "description": "Search for actors by a query term.",
        "operationId": "SearchActors",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search term used to find actors.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Term"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of results to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of actors matching the search term.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for navigating results."
                },
                "actors": {
                  "type": "array",
                  "description": "An array of actors matching the search criteria.",
                  "items": {
                    "$ref": "#/definitions/profileViewDetailed"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.searchActorsTypeahead": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Search Actors for Typeahead",
        "description": "Retrieve account suggestions for typeahead search.",
        "operationId": "SearchActorsTypeahead",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search term used for typeahead results.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Term"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved typeahead suggestions for actors.",
            "schema": {
              "type": "object",
              "properties": {
                "actors": {
                  "type": "array",
                  "description": "An array of minimal actor details matching the typeahead search.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "Decentralized Identifier (DID) of the actor."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Unique handle of the actor."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the actor."
                      },
                      "avatar": {
                        "type": "string",
                        "format": "uri",
                        "description": "URI of the actor's avatar image."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Associated metadata for the actor.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "description": "Number of lists the actor is part of."
                          },
                          "feedgens": {
                            "type": "integer",
                            "description": "Number of feed generators associated with the actor."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "description": "Number of starter packs associated with the actor."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Indicates if the actor is a labeler."
                          },
                          "chat": {
                            "type": "object",
                            "description": "Chat preferences for the actor.",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Specifies if incoming chats are allowed."
                              }
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata for the actor.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the actor is muted by the viewer."
                          },
                          "mutedByList": {
                            "$ref": "#/definitions/MutedByList"
                          },
                          "blockedBy": {
                            "type": "boolean",
                            "description": "Indicates if the actor is blocked by the viewer."
                          },
                          "blocking": {
                            "type": "string",
                            "description": "Details of the block, if applicable."
                          },
                          "blockingByList": {
                            "$ref": "#/definitions/BlockingByList"
                          },
                          "following": {
                            "type": "string",
                            "description": "Indicates if the viewer is following the actor."
                          },
                          "followedBy": {
                            "type": "string",
                            "description": "Indicates if the actor is following the viewer."
                          },
                          "knownFollowers": {
                            "type": "object",
                            "description": "Known followers of the actor.",
                            "properties": {
                              "count": {
                                "type": "integer",
                                "description": "Total number of known followers."
                              },
                              "followers": {
                                "type": "array",
                                "description": "List of known followers.",
                                "items": {
                                  "$ref": "#/definitions/ProfileView"
                                }
                              }
                            }
                          }
                        }
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the actor.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp of the actor's profile creation."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.describeFeedGenerator": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get information about a feed",
        "x-ms-summary": "Get information about a feed generator",
        "description": "Get information about a feed generator.",
        "operationId": "DescribeFeedGenerator",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "feeds"
              ],
              "properties": {
                "did": {
                  "type": "string"
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/describeFeedGeneratorFeed"
                  }
                },
                "links": {
                  "$ref": "#/definitions/describeFeedGeneratorLinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getActorFeeds": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Actor Feeds",
        "x-ms-summary": "Fetch feeds created by an actor.",
        "description": "Get a list of feeds created by the actor.",
        "operationId": "getActorFeeds",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose feeds are to be retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of feeds to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Feeds retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getActorFeeds",
                      "value-path": "feeds",
                      "parameters": {
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "List of feeds created by the actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getActorLikes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Liked Posts by an Actor",
        "description": "Retrieve posts liked by a specific actor.",
        "operationId": "GetActorLikes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "Handle or DID of the actor whose liked posts are being retrieved.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Actor Identifier"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of liked posts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the liked posts by the actor.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for fetching the next page of results."
                },
                "feed": {
                  "type": "array",
                  "description": "An array of posts liked by the actor.",
                  "items": {
                    "type": "object",
                    "description": "Details of a liked post.",
                    "properties": {
                      "post": {
                        "type": "object",
                        "description": "Details of the liked post.",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "URI of the liked post."
                          },
                          "cid": {
                            "type": "string",
                            "description": "Content ID (CID) of the post."
                          },
                          "author": {
                            "$ref": "#/definitions/profileViewDetailed"
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the post.",
                            "items": {
                              "$ref": "#/definitions/Label"
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the post was created."
                          },
                          "record": {
                            "type": "object",
                            "description": "Additional record details for the post."
                          },
                          "embed": {
                            "type": "object",
                            "description": "Embedded content within the post."
                          },
                          "replyCount": {
                            "type": "integer",
                            "description": "Number of replies to the post."
                          },
                          "repostCount": {
                            "type": "integer",
                            "description": "Number of reposts of the post."
                          },
                          "likeCount": {
                            "type": "integer",
                            "description": "Number of likes on the post."
                          },
                          "quoteCount": {
                            "type": "integer",
                            "description": "Number of quotes for the post."
                          },
                          "indexedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the post was indexed."
                          },
                          "viewer": {
                            "$ref": "#/definitions/ViewerMetadata"
                          },
                          "threadgate": {
                            "type": "object",
                            "description": "Thread-related metadata.",
                            "properties": {
                              "uri": {
                                "type": "string",
                                "description": "URI of the thread."
                              },
                              "cid": {
                                "type": "string",
                                "description": "CID of the thread."
                              },
                              "record": {
                                "type": "object",
                                "description": "Additional record details for the thread."
                              },
                              "lists": {
                                "type": "array",
                                "description": "Lists associated with the thread.",
                                "items": {
                                  "$ref": "#/definitions/ListMetadata"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getAuthorFeed": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Posts by an Author",
        "description": "Retrieve posts from a specific author.",
        "operationId": "GetAuthorFeed",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Handle or DID of the post author.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Author Identifier"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of posts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the posts by the author.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "feed": {
                  "type": "array",
                  "description": "An array of feed items.",
                  "items": {
                    "type": "object",
                    "description": "Details of a feed item.",
                    "properties": {
                      "post": {
                        "type": "object",
                        "description": "Details of the post.",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "URI of the post."
                          },
                          "cid": {
                            "type": "string",
                            "description": "CID of the post."
                          },
                          "author": {
                            "$ref": "#/definitions/profileViewDetailed"
                          },
                          "record": {
                            "type": "object",
                            "description": "Record metadata for the post."
                          },
                          "embed": {
                            "type": "object",
                            "description": "Embed metadata for the post."
                          },
                          "replyCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of replies to the post."
                          },
                          "repostCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of reposts of the post."
                          },
                          "likeCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of likes on the post."
                          },
                          "quoteCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of quotes of the post."
                          },
                          "indexedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the post was indexed."
                          },
                          "viewer": {
                            "type": "object",
                            "description": "Viewer-specific metadata.",
                            "properties": {
                              "repost": {
                                "type": "string",
                                "description": "URI of the viewer's repost of the post."
                              },
                              "like": {
                                "type": "string",
                                "description": "URI of the viewer's like on the post."
                              },
                              "threadMuted": {
                                "type": "boolean",
                                "description": "Indicates if the viewer muted the thread."
                              },
                              "replyDisabled": {
                                "type": "boolean",
                                "description": "Indicates if replies are disabled for the post."
                              },
                              "embeddingDisabled": {
                                "type": "boolean",
                                "description": "Indicates if embedding is disabled for the post."
                              },
                              "pinned": {
                                "type": "boolean",
                                "description": "Indicates if the post is pinned."
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the post.",
                            "items": {
                              "$ref": "#/definitions/Label"
                            }
                          },
                          "threadgate": {
                            "type": "object",
                            "description": "Thread gate metadata.",
                            "properties": {
                              "uri": {
                                "type": "string",
                                "description": "URI of the thread gate."
                              },
                              "cid": {
                                "type": "string",
                                "description": "CID of the thread gate."
                              },
                              "record": {
                                "type": "object",
                                "description": "Record metadata for the thread gate."
                              },
                              "lists": {
                                "type": "array",
                                "description": "Lists associated with the thread gate.",
                                "items": {
                                  "$ref": "#/definitions/ListDetails"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeed": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Feed",
        "x-ms-summary": "Retrieve a hydrated feed.",
        "description": "Get a hydrated feed from an actor's selected feed generator.",
        "operationId": "getFeed",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "description": "The URI of the feed generator.",
            "x-ms-summary": "Feed Generator URI",
            "required": true,
            "type": "string"
          },
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor requesting the feed.",
            "x-ms-summary": "Actor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of posts to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Feed retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getFeed",
                      "value-path": "feed",
                      "parameters": {
                        "feed": "{feed}",
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "Array of posts in the feed."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedGenerator": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Metadata for a Feed Generator",
        "description": "Retrieve metadata about a specific feed generator.",
        "operationId": "GetFeedGenerator",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "description": "URI of the feed generator to retrieve metadata for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Feed Generator URI"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata for the feed generator.",
            "schema": {
              "type": "object",
              "properties": {
                "view": {
                  "type": "object",
                  "description": "Detailed metadata about the feed generator.",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "description": "URI of the feed generator."
                    },
                    "cid": {
                      "type": "string",
                      "description": "Content identifier for the feed generator."
                    },
                    "did": {
                      "type": "string",
                      "description": "DID of the feed generator creator."
                    },
                    "creator": {
                      "type": "object",
                      "description": "Information about the creator of the feed generator.",
                      "properties": {
                        "did": {
                          "type": "string",
                          "description": "DID of the creator."
                        },
                        "handle": {
                          "type": "string",
                          "description": "Handle of the creator."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Display name of the creator."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the creator."
                        },
                        "avatar": {
                          "type": "string",
                          "description": "URL of the creator's avatar image."
                        },
                        "associated": {
                          "type": "object",
                          "description": "Associated metadata for the creator.",
                          "properties": {
                            "lists": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of lists associated."
                            },
                            "feedgens": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of feed generators associated."
                            },
                            "starterPacks": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of starter packs associated."
                            },
                            "labeler": {
                              "type": "boolean",
                              "description": "Whether the creator is a labeler."
                            },
                            "chat": {
                              "type": "object",
                              "description": "Chat settings for the creator.",
                              "properties": {
                                "allowIncoming": {
                                  "type": "string",
                                  "description": "Type of incoming messages allowed."
                                }
                              }
                            }
                          }
                        },
                        "indexedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the creator was indexed."
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the creator was created."
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name of the feed generator."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the feed generator."
                    },
                    "descriptionFacets": {
                      "type": "array",
                      "description": "Facets within the description of the feed generator.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "object",
                            "description": "Index information for facets.",
                            "properties": {
                              "byteStart": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Start byte of the facet."
                              },
                              "byteEnd": {
                                "type": "integer",
                                "format": "int32",
                                "description": "End byte of the facet."
                              }
                            }
                          },
                          "features": {
                            "type": "array",
                            "description": "Features associated with the facet.",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "avatar": {
                      "type": "string",
                      "description": "URL of the feed generator's avatar image."
                    },
                    "likeCount": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of likes on the feed generator."
                    },
                    "acceptsInteractions": {
                      "type": "boolean",
                      "description": "Whether the feed generator accepts interactions."
                    },
                    "labels": {
                      "type": "array",
                      "description": "Labels associated with the feed generator.",
                      "items": {
                        "$ref": "#/definitions/Label"
                      }
                    },
                    "viewer": {
                      "type": "object",
                      "description": "Viewer-specific metadata.",
                      "properties": {
                        "like": {
                          "type": "string",
                          "description": "URI of the viewer's like."
                        }
                      }
                    },
                    "indexedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the feed generator was indexed."
                    }
                  }
                },
                "isOnline": {
                  "type": "boolean",
                  "description": "Whether the feed generator is online."
                },
                "isValid": {
                  "type": "boolean",
                  "description": "Whether the feed generator is valid."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedGenerators": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Metadata for Multiple Feed Generators",
        "description": "Retrieve metadata about multiple feed generators.",
        "operationId": "GetFeedGenerators",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "generators",
            "in": "query",
            "description": "Comma-separated list of feed generator URIs to retrieve metadata for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Feed Generator URIs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata for multiple feed generators.",
            "schema": {
              "type": "object",
              "properties": {
                "feeds": {
                  "type": "array",
                  "description": "An array of feed generator metadata.",
                  "items": {
                    "type": "object",
                    "description": "Metadata for a single feed generator.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the feed generator."
                      },
                      "cid": {
                        "type": "string",
                        "description": "Content identifier for the feed generator."
                      },
                      "did": {
                        "type": "string",
                        "description": "DID of the feed generator creator."
                      },
                      "creator": {
                        "type": "object",
                        "description": "Information about the creator of the feed generator.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "DID of the creator."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the creator."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the creator."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the creator."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "URL of the creator's avatar image."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Associated metadata for the creator.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of lists associated."
                              },
                              "feedgens": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of feed generators associated."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of starter packs associated."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Whether the creator is a labeler."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat settings for the creator.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Type of incoming messages allowed."
                                  }
                                }
                              }
                            }
                          },
                          "indexedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the creator was indexed."
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the creator was created."
                          }
                        }
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the feed generator."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the feed generator."
                      },
                      "descriptionFacets": {
                        "type": "array",
                        "description": "Facets within the description of the feed generator.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "index": {
                              "type": "object",
                              "description": "Index information for facets.",
                              "properties": {
                                "byteStart": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Start byte of the facet."
                                },
                                "byteEnd": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "End byte of the facet."
                                }
                              }
                            },
                            "features": {
                              "type": "array",
                              "description": "Features associated with the facet.",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "avatar": {
                        "type": "string",
                        "description": "URL of the feed generator's avatar image."
                      },
                      "likeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of likes on the feed generator."
                      },
                      "acceptsInteractions": {
                        "type": "boolean",
                        "description": "Whether the feed generator accepts interactions."
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the feed generator.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata.",
                        "properties": {
                          "like": {
                            "type": "string",
                            "description": "URI of the viewer's like."
                          }
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the feed generator was indexed."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedSkeleton": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Skeleton Feed",
        "description": "Retrieve a minimal skeletal version of a feed.",
        "operationId": "GetFeedSkeleton",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "description": "URI of the feed to retrieve the skeleton for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Feed URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items in the skeleton.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating the skeleton.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the skeleton feed.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "feed": {
                  "type": "array",
                  "description": "An array of skeleton feed items.",
                  "items": {
                    "type": "object",
                    "description": "Details of a skeleton feed item.",
                    "properties": {
                      "post": {
                        "type": "string",
                        "description": "URI of the feed item post."
                      },
                      "reason": {
                        "type": "object",
                        "description": "Reason for including the feed item."
                      },
                      "feedContext": {
                        "type": "string",
                        "description": "Context of the feed item in the skeleton."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getLikes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Likes for a Post",
        "description": "Retrieve users who liked a specific post.",
        "operationId": "GetLikes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "description": "URI of the post to retrieve likes for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Post URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of likes to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved likes for the specified post.",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "URI of the post."
                },
                "cid": {
                  "type": "string",
                  "description": "Content identifier for the post."
                },
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "likes": {
                  "type": "array",
                  "description": "An array of actors who liked the post.",
                  "items": {
                    "type": "object",
                    "description": "Details of a user who liked the post.",
                    "properties": {
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the like was indexed."
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the like was created."
                      },
                      "actor": {
                        "type": "object",
                        "description": "Details of the actor who liked the post.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "DID of the actor."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the actor."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the actor."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the actor."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "URL of the actor's avatar image."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Associated metadata for the actor.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of lists associated."
                              },
                              "feedgens": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of feed generators associated."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of starter packs associated."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Whether the actor is a labeler."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat settings for the actor.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Type of incoming messages allowed."
                                  }
                                }
                              }
                            }
                          },
                          "indexedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the actor was indexed."
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the actor was created."
                          },
                          "viewer": {
                            "type": "object",
                            "description": "Viewer-specific metadata for the actor.",
                            "properties": {
                              "muted": {
                                "type": "boolean",
                                "description": "Whether the viewer has muted the actor."
                              },
                              "blockedBy": {
                                "type": "boolean",
                                "description": "Whether the viewer is blocked by the actor."
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the actor.",
                            "items": {
                              "$ref": "#/definitions/Label"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getListFeed": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Feed for a List",
        "description": "Retrieve posts from a specific list.",
        "operationId": "GetListFeed",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "URI of the list to retrieve the feed for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "List URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of posts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through the feed.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list feed.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next page."
                },
                "feed": {
                  "type": "array",
                  "description": "Array of feed items.",
                  "items": {
                    "type": "object",
                    "description": "Details of a feed item.",
                    "properties": {
                      "post": {
                        "type": "object",
                        "description": "Details of the post.",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "URI of the post."
                          },
                          "cid": {
                            "type": "string",
                            "description": "Content identifier of the post."
                          },
                          "author": {
                            "type": "object",
                            "description": "Information about the post author.",
                            "properties": {
                              "did": {
                                "type": "string",
                                "description": "DID of the author."
                              },
                              "handle": {
                                "type": "string",
                                "description": "Handle of the author."
                              },
                              "displayName": {
                                "type": "string",
                                "description": "Display name of the author."
                              },
                              "avatar": {
                                "type": "string",
                                "description": "URL of the author's avatar image."
                              },
                              "associated": {
                                "type": "object",
                                "description": "Associated metadata for the author.",
                                "properties": {
                                  "lists": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Number of lists associated."
                                  },
                                  "feedgens": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Number of feed generators associated."
                                  },
                                  "starterPacks": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Number of starter packs associated."
                                  },
                                  "labeler": {
                                    "type": "boolean",
                                    "description": "Whether the author is a labeler."
                                  },
                                  "chat": {
                                    "type": "object",
                                    "description": "Chat settings for the author.",
                                    "properties": {
                                      "allowIncoming": {
                                        "type": "string",
                                        "description": "Type of incoming messages allowed."
                                      }
                                    }
                                  }
                                }
                              },
                              "viewer": {
                                "type": "object",
                                "description": "Viewer-specific metadata.",
                                "properties": {
                                  "muted": {
                                    "type": "boolean",
                                    "description": "Whether the viewer has muted the author."
                                  },
                                  "blockedBy": {
                                    "type": "boolean",
                                    "description": "Whether the viewer is blocked by the author."
                                  }
                                }
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the post.",
                            "items": {
                              "$ref": "#/definitions/Label"
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the post was created."
                          }
                        }
                      },
                      "reply": {
                        "type": "object",
                        "description": "Reply-specific metadata for the feed item."
                      },
                      "reason": {
                        "type": "object",
                        "description": "Reason for including the feed item."
                      },
                      "feedContext": {
                        "type": "string",
                        "description": "Context of the feed item in the feed."
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the feed item was indexed."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getPosts": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Posts",
        "x-ms-summary": "Retrieve post views for specified posts.",
        "description": "Gets post views for a specified list of posts.",
        "operationId": "GetPosts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uris",
            "in": "query",
            "description": "List of post AT-URIs to return hydrated views for.",
            "x-ms-summary": "Post AT-URIs",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 25
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "posts"
              ],
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getPostThread": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Thread for a Post",
        "description": "Retrieve the thread of posts related to a specific post.",
        "operationId": "GetPostThread",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "description": "URI of the post to retrieve the thread for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Post URI"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the thread for the specified post.",
            "schema": {
              "type": "object",
              "properties": {
                "thread": {
                  "type": "object",
                  "description": "The root post of the thread with its replies.",
                  "properties": {
                    "root": {
                      "type": "object",
                      "description": "The root post of the thread.",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "description": "URI of the root post."
                        },
                        "cid": {
                          "type": "string",
                          "description": "Content identifier of the root post."
                        },
                        "author": {
                          "type": "object",
                          "description": "Information about the author of the root post.",
                          "properties": {
                            "did": {
                              "type": "string",
                              "description": "DID of the author."
                            },
                            "handle": {
                              "type": "string",
                              "description": "Handle of the author."
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Display name of the author."
                            },
                            "avatar": {
                              "type": "string",
                              "description": "URL of the author's avatar image."
                            }
                          }
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the root post was created."
                        }
                      }
                    },
                    "replies": {
                      "type": "array",
                      "description": "An array of replies to the root post.",
                      "items": {
                        "type": "object",
                        "description": "Details of a reply to the root post.",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "URI of the reply post."
                          },
                          "cid": {
                            "type": "string",
                            "description": "Content identifier of the reply post."
                          },
                          "author": {
                            "type": "object",
                            "description": "Information about the author of the reply post.",
                            "properties": {
                              "did": {
                                "type": "string",
                                "description": "DID of the author."
                              },
                              "handle": {
                                "type": "string",
                                "description": "Handle of the author."
                              },
                              "displayName": {
                                "type": "string",
                                "description": "Display name of the author."
                              },
                              "avatar": {
                                "type": "string",
                                "description": "URL of the author's avatar image."
                              }
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the reply post was created."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getQuotes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Posts Quoting a Specific Post",
        "description": "Retrieve posts that quote a specific post.",
        "operationId": "GetQuotes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "description": "URI of the post to retrieve quotes for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Post URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of quotes to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved posts quoting the specified post.",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "URI of the original post."
                },
                "cid": {
                  "type": "string",
                  "description": "Content identifier of the original post."
                },
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "posts": {
                  "type": "array",
                  "description": "An array of posts that quote the specified post.",
                  "items": {
                    "type": "object",
                    "description": "Details of a quoted post.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the quoted post."
                      },
                      "cid": {
                        "type": "string",
                        "description": "Content identifier of the quoted post."
                      },
                      "author": {
                        "type": "object",
                        "description": "Information about the author of the quoted post.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "DID of the author."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the author."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the author."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "URL of the author's avatar image."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Associated metadata for the author.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of lists associated."
                              },
                              "feedgens": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of feed generators associated."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of starter packs associated."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Whether the author is a labeler."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat settings for the author.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Type of incoming messages allowed."
                                  }
                                }
                              }
                            }
                          },
                          "viewer": {
                            "type": "object",
                            "description": "Viewer-specific metadata.",
                            "properties": {
                              "muted": {
                                "type": "boolean",
                                "description": "Whether the viewer has muted the author."
                              },
                              "blockedBy": {
                                "type": "boolean",
                                "description": "Whether the viewer is blocked by the author."
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the author.",
                            "items": {
                              "$ref": "#/definitions/Label"
                            }
                          }
                        }
                      },
                      "record": {
                        "type": "object",
                        "description": "Metadata for the quoted post."
                      },
                      "embed": {
                        "type": "object",
                        "description": "Embed metadata for the quoted post."
                      },
                      "replyCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of replies to the quoted post."
                      },
                      "repostCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of reposts of the quoted post."
                      },
                      "likeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of likes on the quoted post."
                      },
                      "quoteCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of quotes of the quoted post."
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the quoted post was indexed."
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the quoted post.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      },
                      "threadgate": {
                        "type": "object",
                        "description": "Thread gate metadata.",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "description": "URI of the thread gate."
                          },
                          "cid": {
                            "type": "string",
                            "description": "Content identifier of the thread gate."
                          },
                          "record": {
                            "type": "object",
                            "description": "Metadata for the thread gate."
                          },
                          "lists": {
                            "type": "array",
                            "description": "Lists associated with the thread gate.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "uri": {
                                  "type": "string",
                                  "description": "URI of the list."
                                },
                                "cid": {
                                  "type": "string",
                                  "description": "Content identifier of the list."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the list."
                                },
                                "purpose": {
                                  "type": "string",
                                  "description": "Purpose of the list."
                                },
                                "avatar": {
                                  "type": "string",
                                  "description": "URL of the list's avatar image."
                                },
                                "listItemCount": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Number of items in the list."
                                },
                                "labels": {
                                  "type": "array",
                                  "description": "Labels associated with the list.",
                                  "items": {
                                    "$ref": "#/definitions/Label"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getRepostedBy": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Actors Who Reposted a Specific Post",
        "description": "Retrieve users who reposted a specific post.",
        "operationId": "GetRepostedBy",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "description": "URI of the post to retrieve reposts for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "Post URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of reposts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved actors who reposted the post.",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "URI of the original post."
                },
                "cid": {
                  "type": "string",
                  "description": "Content identifier of the original post."
                },
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "repostedBy": {
                  "type": "array",
                  "description": "An array of actors who reposted the specified post.",
                  "items": {
                    "type": "object",
                    "description": "Details of an actor who reposted the post.",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "DID of the actor."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Handle of the actor."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the actor."
                      },
                      "description": {
                        "type": "string",
                        "description": "Bio or description of the actor."
                      },
                      "avatar": {
                        "type": "string",
                        "description": "URL of the actor's avatar image."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Associated metadata for the actor.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of lists associated."
                          },
                          "feedgens": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of feed generators associated."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of starter packs associated."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Whether the actor is a labeler."
                          },
                          "chat": {
                            "type": "object",
                            "description": "Chat settings for the actor.",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Type of incoming messages allowed."
                              }
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata for the actor.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Whether the viewer has muted the actor."
                          },
                          "blockedBy": {
                            "type": "boolean",
                            "description": "Whether the viewer is blocked by the actor."
                          },
                          "blocking": {
                            "type": "string",
                            "description": "Whether the viewer is blocking the actor."
                          }
                        }
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the actor.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the actor was indexed."
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the actor was created."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getSuggestedFeeds": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Suggested Feeds",
        "x-ms-summary": "Fetch suggested feeds for the account.",
        "description": "Retrieve a list of suggested feeds for the requesting account.",
        "operationId": "getSuggestedFeeds",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of suggested feeds to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggested feeds retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getSuggestedFeeds",
                      "value-path": "feeds"
                    }
                  },
                  "description": "List of suggested feeds for the account."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getTimeline": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Timeline",
        "x-ms-summary": "Retrieve home timeline.",
        "description": "Get a view of the requesting account's home timeline.",
        "operationId": "getTimeline",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "algorithm",
            "in": "query",
            "description": "Variant 'algorithm' for the timeline.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Algorithm variant"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of posts to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Timeline retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getTimeline",
                      "value-path": "feed"
                    }
                  },
                  "description": "Array of posts in the timeline."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.searchPosts": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Search Posts",
        "description": "Search for posts matching a query.",
        "operationId": "SearchPosts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The search term used to find posts.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Term"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of posts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved posts matching the search term.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next page of results."
                },
                "hitsTotal": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of posts matching the search term."
                },
                "posts": {
                  "type": "array",
                  "description": "An array of posts matching the search criteria.",
                  "items": {
                    "$ref": "#/definitions/Post"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.sendInteractions": {
      "post": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Send Interactions",
        "description": "Send interactions (like, repost) for a post.",
        "operationId": "SendInteractions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "An object containing the interactions to be sent.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "interactions": {
                  "type": "array",
                  "description": "An array of interactions to send.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of interaction (e.g., 'like', 'repost').",
                        "example": "like"
                      },
                      "uri": {
                        "type": "string",
                        "description": "URI of the post the interaction is for.",
                        "example": "at://did:plc:abcd1234/app.bsky.feed/post123"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp when the interaction was created.",
                        "example": "2023-11-19T12:34:56Z"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully sent interactions.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the interactions were successfully sent.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected error response."
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getActorStarterPacks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Starter Packs for Actors",
        "description": "Retrieve starter packs of accounts for new users.",
        "operationId": "GetActorStarterPacks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max num of starter packs to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved actor starter packs.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next page."
                },
                "starterPacks": {
                  "type": "array",
                  "description": "An array of actor starter packs.",
                  "items": {
                    "type": "object",
                    "description": "Details of a starter pack.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "The URI of the starter pack."
                      },
                      "cid": {
                        "type": "string",
                        "description": "Content ID of the starter pack."
                      },
                      "record": {
                        "type": "object",
                        "description": "Additional metadata for the starter pack."
                      },
                      "creator": {
                        "$ref": "#/definitions/ProfileView"
                      },
                      "listItemCount": {
                        "type": "integer",
                        "description": "Count of items in the list."
                      },
                      "joinedWeekCount": {
                        "type": "integer",
                        "description": "Number of users who joined this week."
                      },
                      "joinedAllTimeCount": {
                        "type": "integer",
                        "description": "Number of users who joined all time."
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the starter pack.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ver": {
                              "type": "integer",
                              "description": "Version of the label."
                            },
                            "src": {
                              "type": "string",
                              "description": "Source of the label."
                            },
                            "uri": {
                              "type": "string",
                              "description": "URI for the label."
                            },
                            "cid": {
                              "type": "string",
                              "description": "Content ID for the label."
                            },
                            "val": {
                              "type": "string",
                              "description": "Value of the label."
                            },
                            "neg": {
                              "type": "boolean",
                              "description": "Indicates if the label is negative."
                            },
                            "cts": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Creation timestamp of the label."
                            },
                            "exp": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Expiration timestamp of the label."
                            },
                            "sig": {
                              "type": "string",
                              "description": "Signature of the label."
                            }
                          }
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the starter pack was indexed."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getBlocks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Blocked Accounts",
        "description": "Retrieve users blocked by the authenticated user.",
        "operationId": "GraphGetBlocks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max num of blocked accounts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blocked accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next page."
                },
                "blocks": {
                  "type": "array",
                  "description": "An array of profiles representing blocked accounts.",
                  "items": {
                    "type": "object",
                    "description": "Details of a blocked account.",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "Decentralized identifier of the blocked account."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Handle of the blocked account."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the blocked account."
                      },
                      "description": {
                        "type": "string",
                        "description": "Profile description of the blocked account."
                      },
                      "avatar": {
                        "type": "string",
                        "description": "URL of the avatar for the blocked account."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Associated metadata for the blocked account.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "description": "Number of lists the account belongs to."
                          },
                          "feedgens": {
                            "type": "integer",
                            "description": "Number of feed generators."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "description": "Number of starter packs."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Indicates if the account is labeled."
                          },
                          "chat": {
                            "type": "object",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Incoming chat permissions."
                              }
                            }
                          }
                        }
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the blocked account.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ver": {
                              "type": "integer",
                              "description": "Version of the label."
                            },
                            "src": {
                              "type": "string",
                              "description": "Source of the label."
                            },
                            "uri": {
                              "type": "string",
                              "description": "URI for the label."
                            },
                            "cid": {
                              "type": "string",
                              "description": "Content ID for the label."
                            },
                            "val": {
                              "type": "string",
                              "description": "Value of the label."
                            },
                            "neg": {
                              "type": "boolean",
                              "description": "Indicates if the label is negative."
                            },
                            "cts": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Creation timestamp of the label."
                            },
                            "exp": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Expiration timestamp of the label."
                            },
                            "sig": {
                              "type": "string",
                              "description": "Signature of the label."
                            }
                          }
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the block was indexed."
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the block was created."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getFollowers": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Followers",
        "x-ms-summary": "Retrieve accounts following a specified actor.",
        "description": "Enumerate accounts that follow a specified actor.",
        "operationId": "getFollowers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose followers are being retrieved.",
            "required": true,
            "x-ms-summary": "Actor Identifier",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of followers to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Followers retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "object",
                  "description": "Profile details of the actor whose followers are retrieved.",
                  "x-ms-dynamic-schema": {
                    "operationId": "getFollowers",
                    "value-path": "subject",
                    "parameters": {
                      "actor": "{actor}"
                    }
                  }
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "followers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getFollowers",
                      "value-path": "followers",
                      "parameters": {
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "List of accounts following the specified actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getFollows": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Follows",
        "x-ms-summary": "Retrieve accounts followed by a specified actor.",
        "description": "Enumerates accounts that a specified actor follows.",
        "operationId": "getFollows",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose follows are being retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to return (default: 50, max: 100).",
            "x-ms-summary": "Maximum Accounts to Retrieve",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "x-ms-summary": "Pagination Cursor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Follows retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getFollows",
                    "parameters": {
                      "actor": "{actor}"
                    },
                    "value-path": "subject"
                  },
                  "description": "Profile details of the actor whose follows are retrieved."
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "follows": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getFollows",
                      "parameters": {
                        "actor": "{actor}"
                      },
                      "value-path": "follows"
                    },
                    "description": "List of accounts followed by the specified actor."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getKnownFollowers": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Known Followers",
        "x-ms-summary": "Retrieve known followers of an account.",
        "description": "Retrieve followers for a specific account that are also followed by the viewer.",
        "operationId": "getKnownFollowers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose followers are being retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of followers to return (default: 50, max: 100).",
            "x-ms-summary": "Followers Limit",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "x-ms-summary": "Pagination Cursor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Known followers retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "object",
                  "x-ms-dynamic-schema": {
                    "operationId": "getKnownFollowers",
                    "parameters": {
                      "actor": "{actor}"
                    },
                    "value-path": "subject"
                  },
                  "description": "Profile details of the subject actor."
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "followers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProfileViewBasic"
                  },
                  "description": "List of followers who are also followed by the viewer."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getList": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get List Details",
        "description": "Retrieve details and items of a specific user list.",
        "operationId": "GetList",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "URI of the list to retrieve.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "List URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of list items to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list details.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "list": {
                  "type": "object",
                  "description": "Details of the retrieved list.",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "description": "URI of the list."
                    },
                    "cid": {
                      "type": "string",
                      "description": "Content ID of the list."
                    },
                    "creator": {
                      "type": "object",
                      "description": "Details of the list creator.",
                      "properties": {
                        "did": {
                          "type": "string",
                          "description": "Decentralized identifier of the creator."
                        },
                        "handle": {
                          "type": "string",
                          "description": "Handle of the creator."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Display name of the creator."
                        },
                        "description": {
                          "type": "string",
                          "description": "Profile description of the creator."
                        },
                        "avatar": {
                          "type": "string",
                          "description": "Avatar URL of the creator."
                        },
                        "associated": {
                          "type": "object",
                          "description": "Metadata about the creator.",
                          "properties": {
                            "lists": {
                              "type": "integer",
                              "description": "Number of lists created."
                            },
                            "feedgens": {
                              "type": "integer",
                              "description": "Number of feed generators."
                            },
                            "starterPacks": {
                              "type": "integer",
                              "description": "Number of starter packs."
                            },
                            "labeler": {
                              "type": "boolean",
                              "description": "Indicates if labeled."
                            },
                            "chat": {
                              "type": "object",
                              "description": "Chat permissions.",
                              "properties": {
                                "allowIncoming": {
                                  "type": "string",
                                  "description": "Incoming chat permissions."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the list."
                    },
                    "purpose": {
                      "type": "string",
                      "description": "Purpose of the list."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the list."
                    },
                    "avatar": {
                      "type": "string",
                      "description": "Avatar image URL of the list."
                    },
                    "listItemCount": {
                      "type": "integer",
                      "description": "Number of items in the list."
                    },
                    "labels": {
                      "type": "array",
                      "description": "Labels associated with the list.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ver": {
                            "type": "integer",
                            "description": "Version of the label."
                          },
                          "src": {
                            "type": "string",
                            "description": "Source of the label."
                          },
                          "uri": {
                            "type": "string",
                            "description": "URI of the label."
                          },
                          "cid": {
                            "type": "string",
                            "description": "Content ID of the label."
                          },
                          "val": {
                            "type": "string",
                            "description": "Value of the label."
                          },
                          "neg": {
                            "type": "boolean",
                            "description": "Indicates if the label is negative."
                          },
                          "cts": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the label was created."
                          },
                          "exp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Expiration timestamp of the label."
                          }
                        }
                      }
                    }
                  }
                },
                "items": {
                  "type": "array",
                  "description": "Items in the list.",
                  "items": {
                    "type": "object",
                    "description": "Details of a list item.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the list item."
                      },
                      "subject": {
                        "type": "object",
                        "description": "Profile details of the list item.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "Decentralized identifier of the subject."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the subject."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the subject."
                          },
                          "description": {
                            "type": "string",
                            "description": "Profile description of the subject."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "Avatar URL of the subject."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Metadata about the subject.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "description": "Number of lists associated."
                              },
                              "feedgens": {
                                "type": "integer",
                                "description": "Number of feed generators."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "description": "Number of starter packs."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Indicates if labeled."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat permissions.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Incoming chat permissions."
                                  }
                                }
                              }
                            }
                          },
                          "labels": {
                            "type": "array",
                            "description": "Labels associated with the subject.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ver": {
                                  "type": "integer",
                                  "description": "Version of the label."
                                },
                                "src": {
                                  "type": "string",
                                  "description": "Source of the label."
                                },
                                "uri": {
                                  "type": "string",
                                  "description": "URI of the label."
                                },
                                "cid": {
                                  "type": "string",
                                  "description": "Content ID of the label."
                                },
                                "val": {
                                  "type": "string",
                                  "description": "Value of the label."
                                },
                                "neg": {
                                  "type": "boolean",
                                  "description": "Indicates if the label is negative."
                                },
                                "cts": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp of label creation."
                                },
                                "exp": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Expiration timestamp of the label."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getListBlocks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get List Blocks",
        "description": "Retrieve users blocked within a specific list.",
        "operationId": "GetListBlocks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "URI of the list to retrieve blocked accounts for.",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-summary": "List URI"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of blocked accounts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blocked accounts within the list.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "lists": {
                  "type": "array",
                  "description": "An array of blocked accounts within the specified list.",
                  "items": {
                    "type": "object",
                    "description": "Details of the blocked list.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the blocked list."
                      },
                      "cid": {
                        "type": "string",
                        "description": "Content ID of the list."
                      },
                      "creator": {
                        "type": "object",
                        "description": "Details about the creator of the blocked list.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "Decentralized identifier of the creator."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the creator."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the creator."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "URL of the creator's avatar."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Metadata about the creator.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "description": "Number of lists associated with the creator."
                              },
                              "feedgens": {
                                "type": "integer",
                                "description": "Number of feed generators associated."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "description": "Number of starter packs associated."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Indicates if the creator is labeled."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat permissions for the creator.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Incoming chat permissions."
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the list."
                      },
                      "purpose": {
                        "type": "string",
                        "description": "Purpose of the list."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the list."
                      },
                      "listItemCount": {
                        "type": "integer",
                        "description": "Number of items in the list."
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the list.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ver": {
                              "type": "integer",
                              "description": "Label version."
                            },
                            "src": {
                              "type": "string",
                              "description": "Label source."
                            },
                            "uri": {
                              "type": "string",
                              "description": "Label URI."
                            },
                            "cid": {
                              "type": "string",
                              "description": "Content ID of the label."
                            },
                            "val": {
                              "type": "string",
                              "description": "Value of the label."
                            },
                            "neg": {
                              "type": "boolean",
                              "description": "Indicates if the label is negative."
                            },
                            "cts": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the label was created."
                            },
                            "exp": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the label expires."
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Information about the viewer of the list.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the viewer has muted the list."
                          },
                          "blocked": {
                            "type": "string",
                            "description": "Indicates if the list is blocked."
                          }
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the list was indexed."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getListMutes": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get List Mutes",
        "description": "Retrieve muted lists for the authenticated user.",
        "operationId": "GetListMutes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of muted lists to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved muted lists.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "lists": {
                  "type": "array",
                  "description": "An array of muted lists.",
                  "items": {
                    "type": "object",
                    "description": "Details of a muted list.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the muted list.",
                        "example": "at://did:plc:abcd1234/app.bsky.graph/list123"
                      },
                      "cid": {
                        "type": "string",
                        "description": "Content ID of the muted list."
                      },
                      "creator": {
                        "type": "object",
                        "description": "Details of the muted list's creator.",
                        "properties": {
                          "did": {
                            "type": "string",
                            "description": "Decentralized identifier of the creator."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle of the creator."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Display name of the creator."
                          },
                          "description": {
                            "type": "string",
                            "description": "Profile description of the creator."
                          },
                          "avatar": {
                            "type": "string",
                            "description": "URL of the creator's avatar."
                          },
                          "associated": {
                            "type": "object",
                            "description": "Metadata about the creator.",
                            "properties": {
                              "lists": {
                                "type": "integer",
                                "description": "Number of lists associated with the creator."
                              },
                              "feedgens": {
                                "type": "integer",
                                "description": "Number of feed generators associated."
                              },
                              "starterPacks": {
                                "type": "integer",
                                "description": "Number of starter packs associated."
                              },
                              "labeler": {
                                "type": "boolean",
                                "description": "Indicates if the creator is labeled."
                              },
                              "chat": {
                                "type": "object",
                                "description": "Chat permissions for the creator.",
                                "properties": {
                                  "allowIncoming": {
                                    "type": "string",
                                    "description": "Incoming chat permissions."
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the muted list."
                      },
                      "purpose": {
                        "type": "string",
                        "description": "Purpose of the muted list."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the muted list."
                      },
                      "avatar": {
                        "type": "string",
                        "description": "Avatar image URL of the muted list."
                      },
                      "listItemCount": {
                        "type": "integer",
                        "description": "Number of items in the muted list."
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the muted list.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ver": {
                              "type": "integer",
                              "description": "Version of the label."
                            },
                            "src": {
                              "type": "string",
                              "description": "Source of the label."
                            },
                            "uri": {
                              "type": "string",
                              "description": "URI of the label."
                            },
                            "cid": {
                              "type": "string",
                              "description": "Content ID of the label."
                            },
                            "val": {
                              "type": "string",
                              "description": "Value of the label."
                            },
                            "neg": {
                              "type": "boolean",
                              "description": "Indicates if the label is negative."
                            },
                            "cts": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp of label creation."
                            },
                            "exp": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the label expires."
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Details about the viewer of the muted list.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the viewer has muted the list."
                          },
                          "blocked": {
                            "type": "string",
                            "description": "Indicates if the viewer has blocked the list."
                          }
                        }
                      },
                      "indexedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the list was indexed."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getLists": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Lists for an Actor",
        "description": "Retrieve all lists for the authenticated user.\n",
        "operationId": "GetLists",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "Handle or DID of the actor to retrieve lists for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Actor Identifier"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max num of lists to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved lists for the actor.",
            "schema": {
              "type": "object",
              "properties": {
                "lists": {
                  "type": "array",
                  "description": "An array of lists associated with the actor.",
                  "items": {
                    "type": "object",
                    "description": "Details of a list.",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "URI of the list.",
                        "example": "at://did:plc:abcd1234/app.bsky.graph/list123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the list.",
                        "example": "My Favorites"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getMutes": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Muted Accounts",
        "description": "Retrieve muted users for the authenticated user.",
        "operationId": "GetMutes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of muted accounts to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved muted accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "mutedAccounts": {
                  "type": "array",
                  "description": "An array of profiles representing muted accounts.",
                  "items": {
                    "type": "object",
                    "description": "Details of a muted account.",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "Decentralized identifier of the muted account."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Handle of the muted account."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the muted account."
                      },
                      "description": {
                        "type": "string",
                        "description": "Profile description of the muted account."
                      },
                      "avatar": {
                        "type": "string",
                        "description": "Avatar URL of the muted account."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Metadata about the muted account.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "description": "Number of lists associated with the account."
                          },
                          "feedgens": {
                            "type": "integer",
                            "description": "Number of feed generators."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "description": "Number of starter packs."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Indicates if labeled."
                          },
                          "chat": {
                            "type": "object",
                            "description": "Chat permissions.",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Incoming chat permissions."
                              }
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the viewer has muted the account."
                          },
                          "mutedByList": {
                            "type": "object",
                            "description": "Details of the list that muted this account.",
                            "properties": {
                              "uri": {
                                "type": "string",
                                "description": "URI of the list."
                              },
                              "cid": {
                                "type": "string",
                                "description": "Content ID of the list."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the list."
                              },
                              "purpose": {
                                "type": "string",
                                "description": "Purpose of the list."
                              },
                              "avatar": {
                                "type": "string",
                                "description": "Avatar URL of the list."
                              },
                              "listItemCount": {
                                "type": "integer",
                                "description": "Number of items in the list."
                              },
                              "labels": {
                                "type": "array",
                                "description": "Labels associated with the list.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "ver": {
                                      "type": "integer",
                                      "description": "Version of the label."
                                    },
                                    "src": {
                                      "type": "string",
                                      "description": "Source of the label."
                                    },
                                    "uri": {
                                      "type": "string",
                                      "description": "URI of the label."
                                    },
                                    "cid": {
                                      "type": "string",
                                      "description": "Content ID of the label."
                                    },
                                    "val": {
                                      "type": "string",
                                      "description": "Value of the label."
                                    },
                                    "neg": {
                                      "type": "boolean",
                                      "description": "Indicates if the label is negative."
                                    },
                                    "cts": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Timestamp of label creation."
                                    },
                                    "exp": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Expiration timestamp of the label."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "blockedBy": {
                            "type": "boolean",
                            "description": "Indicates if the account is blocked by the viewer."
                          },
                          "blocking": {
                            "type": "string",
                            "description": "Details of blocking status."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getRelationships": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Relationships Between Accounts",
        "description": "Retrieve relationships between the authenticated user and specified accounts.",
        "operationId": "GetRelationships",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actors",
            "in": "query",
            "description": "Comma-separated list of actor DIDs or handles to retrieve relationships for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Actor Identifiers"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved account relationships.",
            "schema": {
              "type": "object",
              "properties": {
                "relationships": {
                  "type": "array",
                  "description": "An array of relationship data between the authenticated user and specified actors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "actor": {
                        "$ref": "#/definitions/ProfileView"
                      },
                      "relationship": {
                        "type": "string",
                        "description": "The type of relationship (e.g., 'following', 'followed_by', 'muted').",
                        "example": "following"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getStarterPack": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Starter Pack",
        "x-ms-summary": "Retrieve a view of a starter pack.",
        "description": "Gets a view of a starter pack based on the provided reference (AT-URI).",
        "operationId": "getStarterPack",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "starterPack",
            "in": "query",
            "description": "Reference (AT-URI) of the starter pack record.",
            "x-ms-summary": "Starter Pack Identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Starter pack retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "starterPack": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getStarterPack",
                    "parameters": {
                      "starterPack": "{starterPack}"
                    },
                    "value-path": "starterPack"
                  },
                  "description": "View details of the starter pack."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getStarterPacks": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Starter Packs",
        "x-ms-summary": "Retrieve views for a list of starter packs.",
        "description": "Get detailed views for a list of starter packs based on the provided URIs.",
        "operationId": "getStarterPacks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uris",
            "in": "query",
            "description": "List of AT-URIs for the starter packs (maximum 25 items).",
            "x-ms-summary": "Starter Pack URIs",
            "required": true,
            "type": "string",
            "collectionFormat": "csv",
            "x-ms-parameter-location": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Starter packs retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "starterPacks": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getStarterPacks",
                      "parameters": {
                        "uris": "{uris}"
                      },
                      "value-path": "starterPacks"
                    },
                    "description": "Array of starter pack views."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getSuggestedFollowsByActor": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Suggested Follows Based on Actor",
        "description": "Retrieve suggested accounts to follow, filtered by an actor.",
        "operationId": "GetSuggestedFollowsByActor",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "Handle or DID of the actor to base suggestions on.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Actor Identifier"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max num of suggestions to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved suggested follows.",
            "schema": {
              "type": "object",
              "properties": {
                "suggestedFollows": {
                  "type": "array",
                  "description": "An array of suggested profiles to follow.",
                  "items": {
                    "$ref": "#/definitions/ProfileView"
                  }
                },
                "isFallback": {
                  "type": "boolean",
                  "description": "Indicates if the suggestions are fallback results."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteActor": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute an Actor",
        "description": "Mute a specific actor for the authenticated user.",
        "operationId": "MuteActor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the actor to mute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Handle or DID of the actor to mute.",
                  "example": "did:plc:abcd1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully muted the actor.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the actor was successfully muted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteActorList": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute an Actor List",
        "description": "Mute a specific list of actors for the authenticated user.",
        "operationId": "MuteActorList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the actor list to mute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "list": {
                  "type": "string",
                  "description": "URI of the actor list to mute.",
                  "example": "at://did:plc:abcd1234/app.bsky.graph/list123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully muted the actor list.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the actor list was successfully muted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteThread": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute a Thread",
        "description": "Mute an entire thread of posts for the authenticated user.",
        "operationId": "MuteThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the thread to mute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "threadUri": {
                  "type": "string",
                  "description": "URI of the thread to mute.",
                  "example": "at://did:plc:abcd1234/app.bsky.feed/thread123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully muted the thread.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the thread was successfully muted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteActor": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute an Actor",
        "description": "Unmute a specific actor for the authenticated user.",
        "operationId": "UnmuteActor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the actor to unmute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Handle or DID of the actor to unmute.",
                  "example": "did:plc:abcd1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unmuted the actor.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the actor was successfully unmuted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteActorList": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute an Actor List",
        "description": "Unmute a specific list of actors for the authenticated user.",
        "operationId": "UnmuteActorList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the actor list to unmute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "list": {
                  "type": "string",
                  "description": "URI of the actor list to unmute.",
                  "example": "at://did:plc:abcd1234/app.bsky.graph/list123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unmuted the actor list.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the actor list was successfully unmuted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteThread": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute a Thread",
        "description": "Unmute an entire thread of posts for the authenticated user.",
        "operationId": "UnmuteThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the thread to unmute.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "threadUri": {
                  "type": "string",
                  "description": "URI of the thread to unmute.",
                  "example": "at://did:plc:abcd1234/app.bsky.feed/thread123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unmuted the thread.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the thread was successfully unmuted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.labeler.getServices": {
      "get": {
        "tags": [
          "app.bsky.labeler"
        ],
        "summary": "Get Labeling Services",
        "description": "Retrieve the list of labeler services available to the user.",
        "operationId": "GetServices",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved labeling services.",
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "description": "An array of available labeling services.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the labeling service.",
                        "example": "ContentFilterPro"
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the labeling service.",
                        "example": "https://labeler.example.com/api"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve services.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.getUnreadCount": {
      "get": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Get Unread Notification Count",
        "description": "Retrieve the count of unread notifications for the authenticated user.",
        "operationId": "GetUnreadCount",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved unread notification count.",
            "schema": {
              "type": "object",
              "properties": {
                "unreadCount": {
                  "type": "integer",
                  "description": "The number of unread notifications.",
                  "example": 12
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve unread count.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.listNotifications": {
      "get": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "List Notifications",
        "description": "List notifications for the authenticated user.",
        "operationId": "ListNotifications",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max num of notifications to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating through results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved notifications.",
            "schema": {
              "type": "object",
              "properties": {
                "notifications": {
                  "type": "array",
                  "description": "An array of notifications.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the notification.",
                        "example": "notif123"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of notification (e.g., 'like', 'mention').",
                        "example": "like"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the notification was created.",
                        "example": "2023-11-19T12:34:56Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.putPreferences": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Update Notification Preferences",
        "description": "Update notification preferences for the authenticated user.",
        "operationId": "NotificationPutPreferences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Notification preferences to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "preferences": {
                  "type": "object",
                  "description": "The notification preferences object.",
                  "example": {
                    "likes": true,
                    "mentions": false,
                    "replies": true
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated notification preferences.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the preferences were successfully updated.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.registerPush": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Register Push Notifications",
        "description": "Register the user for push notifications.",
        "operationId": "RegisterPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the device to register for push notifications.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceToken": {
                  "type": "string",
                  "description": "The device token for push notifications.",
                  "example": "device_token_abc123"
                },
                "platform": {
                  "type": "string",
                  "description": "The platform of the device (e.g., 'iOS', 'Android').",
                  "example": "iOS"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully registered the device for push notifications.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the device was successfully registered.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.updateSeen": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Update Notifications as Seen",
        "description": "Mark notifications as seen for the authenticated user.",
        "operationId": "UpdateSeen",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the notifications to update as seen.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "seenAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp when notifications were marked as seen.",
                  "example": "2023-11-19T12:34:56Z"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated notifications as seen.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the notifications were successfully updated as seen.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.getJobStatus": {
      "get": {
        "tags": [
          "app.bsky.video"
        ],
        "summary": "Get Video Job Status",
        "description": "Retrieve the status of a video upload job.",
        "operationId": "GetJobStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "The ID of the video job to retrieve the status for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved video job status.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The current status of the video job (e.g., 'pending', 'processing', 'completed').",
                  "example": "processing"
                },
                "progress": {
                  "type": "integer",
                  "description": "The percentage of progress for the video job.",
                  "example": 50
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.getUploadLimits": {
      "get": {
        "tags": [
          "app.bsky.video"
        ],
        "summary": "Get Video Upload Limits",
        "description": "Retrieve the upload limits for videos, such as file size or resolution.",
        "operationId": "GetUploadLimits",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved video upload limits.",
            "schema": {
              "type": "object",
              "properties": {
                "maxFileSize": {
                  "type": "integer",
                  "description": "The maximum file size allowed for video uploads (in bytes).",
                  "example": 104857600
                },
                "maxDuration": {
                  "type": "integer",
                  "description": "The maximum duration allowed for video uploads (in seconds).",
                  "example": 300
                },
                "canUpload": {
                  "type": "boolean",
                  "description": "Indicates whether the user can currently upload videos.",
                  "example": true
                },
                "remainingDailyVideos": {
                  "type": "integer",
                  "description": "The remaining number of videos the user can upload today.",
                  "example": 3
                },
                "remainingDailyBytes": {
                  "type": "integer",
                  "description": "The remaining number of bytes the user can upload today.",
                  "example": 524288000
                },
                "message": {
                  "type": "string",
                  "description": "Additional information or warnings about upload limits.",
                  "example": "You have 3 uploads remaining today."
                },
                "error": {
                  "type": "string",
                  "description": "Error message if upload limits cannot be retrieved.",
                  "example": "User not authorized."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve upload limits.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.uploadVideo": {
      "post": {
        "tags": [
          "video"
        ],
        "summary": "Upload Video",
        "x-ms-summary": "Upload and process a video on the PDS.",
        "description": "Upload a video to be processed and stored on the PDS.",
        "operationId": "uploadVideo",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Binary video file to be uploaded and processed.",
            "required": true,
            "type": "file",
            "x-ms-summary": "Video file"
          }
        ],
        "responses": {
          "200": {
            "description": "Video uploaded and processing job created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "jobStatus": {
                  "x-ms-dynamic-schema": {
                    "operationId": "uploadVideo",
                    "parameters": {
                      "file": {
                        "type": "file",
                        "description": "The uploaded video file."
                      }
                    },
                    "value-path": "jobStatus"
                  },
                  "description": "The status of the video processing job."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.actor.deleteAccount": {
      "post": {
        "tags": [
          "chat.bsky.actor"
        ],
        "summary": "Delete Account",
        "description": "Delete an account.",
        "operationId": "actorDeleteAccount",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "_unknown_": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.actor.exportAccountData": {
      "get": {
        "tags": [
          "chat.bsky.actor"
        ],
        "summary": "Export Account Data",
        "description": "Export account data.",
        "operationId": "actorExportAccountData",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account data exported successfully.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.deleteMessageForSelf": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Delete Message for Self",
        "x-ms-summary": "Delete message for self.",
        "description": "Delete a message for the user who sent it.",
        "operationId": "deleteMessageForSelf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the message to be deleted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "messageId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation containing the message to be deleted."
                },
                "messageId": {
                  "type": "string",
                  "description": "The ID of the message to be deleted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully for the user.",
            "schema": {
              "$ref": "#/definitions/deletedMessageView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getConvo": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Conversation",
        "x-ms-summary": "Retrieve a specific conversation.",
        "description": "Get a conversation based on the provided conversation ID.",
        "operationId": "getConvo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "description": "The ID of the conversation to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getConvoForMembers": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Convo for Members",
        "x-ms-summary": "Retrieve a conversation for specific members.",
        "description": "Get a conversation for one or many members.",
        "operationId": "getConvoForMembers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "members",
            "in": "query",
            "description": "List of DID identifiers for the members of the conversation.",
            "x-ms-summary": "Members DID Identifiers",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getLog": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Log",
        "x-ms-summary": "Retrieve a conversation log.",
        "description": "Retrieve the log of actions and messages in a conversation.",
        "operationId": "getLog",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of logs.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Log retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "logs"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination.",
                  "x-ms-summary": "Pagination Cursor"
                },
                "logs": {
                  "type": "array",
                  "description": "Array of log events.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of log event."
                      },
                      "event": {
                        "type": "object",
                        "description": "Details about the event.",
                        "x-ms-dynamic-schema": {
                          "operationId": "getLog",
                          "value-path": "logs"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getMessages": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Messages",
        "x-ms-summary": "Retrieve messages in a conversation.",
        "description": "Get a list of messages from a specific conversation.",
        "operationId": "getMessages",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "description": "The ID of the conversation to retrieve messages from.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Conversation ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of messages to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of messages.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getMessages",
                      "value-path": "messages",
                      "parameters": {
                        "convoId": "{convoId}"
                      }
                    },
                    "description": "List of messages in the conversation."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.leaveConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Leave Conversation",
        "x-ms-summary": "Leave a conversation.",
        "description": "Leave a conversation by specifying its ID.",
        "operationId": "leaveConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the conversation to leave.",
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to leave."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully left the conversation.",
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "rev"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation that was left."
                },
                "rev": {
                  "type": "string",
                  "description": "The revision identifier of the conversation."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.listConvos": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "List Conversations",
        "x-ms-summary": "Retrieve a list of conversations.",
        "description": "List conversations.",
        "operationId": "listConvos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of conversations to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "convos": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the conversation."
                      },
                      "rev": {
                        "type": "string",
                        "description": "The revision identifier of the conversation."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/profileViewBasic"
                        },
                        "description": "List of members in the conversation."
                      },
                      "lastMessage": {
                        "$ref": "#/definitions/lastMessage"
                      },
                      "muted": {
                        "type": "boolean",
                        "description": "Indicates whether the conversation is muted."
                      },
                      "opened": {
                        "type": "boolean",
                        "description": "Indicates whether the conversation has been opened."
                      },
                      "unreadCount": {
                        "type": "integer",
                        "description": "The count of unread messages in the conversation."
                      }
                    }
                  }
                }
              }
            },
            "x-ms-summary": "Successful response containing a list of conversations."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            },
            "x-ms-summary": "Invalid request parameters."
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            },
            "x-ms-summary": "Unauthorized access - missing or invalid token."
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.muteConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Mute Conversation",
        "x-ms-summary": "Mute a conversation.",
        "description": "Mute a conversation.",
        "operationId": "muteConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the conversation to be muted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to be muted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation muted successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.sendMessage": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Send Message",
        "x-ms-summary": "Send a single message in a conversation.",
        "description": "Send a single message to a specific conversation.",
        "operationId": "sendMessage",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The conversation ID and the message to be sent.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "message"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation."
                },
                "message": {
                  "$ref": "#/definitions/messageInput"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message sent successfully.",
            "schema": {
              "$ref": "#/definitions/messageView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createSession": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Authentication Session",
        "x-ms-summary": "Start a user authentication session.",
        "description": "Create an authentication session for a user by providing their identifier and password.",
        "operationId": "createSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload containing user credentials.",
            "schema": {
              "type": "object",
              "required": [
                "identifier",
                "password"
              ],
              "properties": {
                "identifier": {
                  "type": "string",
                  "description": "Handle or other identifier supported by the server for the authenticating user.",
                  "x-ms-summary": "Username",
                  "x-ms-visibility": "important"
                },
                "password": {
                  "type": "string",
                  "description": "Password of the authenticating user.",
                  "x-ms-summary": "Password",
                  "x-ms-visibility": "important"
                },
                "authFactorToken": {
                  "type": "string",
                  "description": "Optional token for multi-factor authentication.",
                  "x-ms-summary": "Auth Factor Token"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "JWT access token."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "JWT refresh token."
                },
                "handle": {
                  "type": "string",
                  "description": "User's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the user."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "email": {
                  "type": "string",
                  "description": "Email address of the user."
                },
                "emailConfirmed": {
                  "type": "boolean",
                  "description": "Indicator if the email is confirmed."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Indicator if email is used for authentication."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the user account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.refreshSession": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Refresh Authentication Session",
        "x-ms-summary": "Refresh a session and renew tokens.",
        "description": "Refresh an authentication session to obtain a new access token and refresh token.",
        "operationId": "refreshSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The refresh token for renewing the session.",
            "schema": {
              "type": "object",
              "required": [
                "refreshJwt"
              ],
              "properties": {
                "refreshJwt": {
                  "type": "string",
                  "description": "The refresh token provided during session creation or previous refresh.",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "JWT access token."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "JWT refresh token."
                },
                "handle": {
                  "type": "string",
                  "description": "The user's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID)."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "Hosting status of the account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error type."
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error type."
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.sendMessageBatch": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Send Batch Messages",
        "x-ms-summary": "Send a batch of messages to a conversation.",
        "description": "Send a batch of messages to multiple conversations.",
        "operationId": "sendMessageBatch",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The batch of messages to be sent.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/batchItem"
                  },
                  "maxItems": 100,
                  "description": "Array of messages to be sent."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages sent successfully.",
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/messageView"
                  },
                  "description": "Array of messages that were sent."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.unmuteConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Unmute Conversation",
        "x-ms-summary": "Unmute a conversation.",
        "description": "Unmute a conversation.",
        "operationId": "unmuteConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the conversation to be unmuted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to be unmuted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation unmuted successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.updateRead": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Update Conversation Read Status",
        "x-ms-summary": "Mark a conversation item as read.",
        "description": "Update an item in a conversation to mark it as read.",
        "operationId": "updateRead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the conversation and item to update as read.",
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation."
                },
                "messageId": {
                  "type": "string",
                  "description": "The ID of the message to mark as read."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked the item as read.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.getActorMetadata": {
      "get": {
        "tags": [
          "moderation"
        ],
        "summary": "Get Actor Metadata",
        "x-ms-summary": "Retrieve metadata for a specific actor.",
        "description": "Fetch moderation-related metadata for an actor identified by their DID.",
        "operationId": "getActorMetadata",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The Decentralized Identifier (DID) of the actor.",
            "x-ms-summary": "DID"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "day",
                "month",
                "all"
              ],
              "properties": {
                "day": {
                  "$ref": "#/definitions/ActorMetadata"
                },
                "month": {
                  "$ref": "#/definitions/ActorMetadata"
                },
                "all": {
                  "$ref": "#/definitions/ActorMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.getMessageContext": {
      "get": {
        "tags": [
          "chat.bsky.moderation"
        ],
        "summary": "Get Message Context",
        "x-ms-summary": "Retrieve the context around a specific message.",
        "description": "Fetch surrounding messages from a conversation for moderation purposes.",
        "operationId": "getMessageContext",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Conversation that the message is from.",
            "x-ms-summary": "Conversation Id"
          },
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the message.",
            "x-ms-summary": "Message Id"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 5,
            "description": "Number of messages to include before the specified message.",
            "x-ms-summary": "Number of messages to include before the specified message."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 5,
            "description": "Number of messages to include after the specified message.",
            "x-ms-summary": "Number of messages to include after the specified message."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the message context.",
            "schema": {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/messageView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.updateActorAccess": {
      "post": {
        "tags": [
          "chat.bsky.moderation"
        ],
        "summary": "Update Actor Access",
        "x-ms-summary": "Modify access permissions for an actor.",
        "description": "Update an actor's access permissions.",
        "operationId": "updateActorAccess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Access Update Request",
            "schema": {
              "type": "object",
              "required": [
                "actor",
                "allowAccess"
              ],
              "properties": {
                "actor": {
                  "type": "string",
                  "x-ms-summary": "Actor Identifier"
                },
                "allowAccess": {
                  "type": "boolean",
                  "x-ms-summary": "Allow Access"
                },
                "ref": {
                  "type": "string",
                  "x-ms-summary": "Reference ID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actor access updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the access update was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deleteAccount": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Delete Account",
        "description": "Delete an actor's account with a token and password.",
        "operationId": "serverDeleteAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload to delete an actor's account.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "password",
                "token"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the account to be deleted."
                },
                "password": {
                  "type": "string",
                  "description": "Password of the account."
                },
                "token": {
                  "type": "string",
                  "description": "Token associated with the account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the account deletion was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional success message."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.deleteAccount": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Delete Account",
        "x-ms-summary": "Delete a user account as an administrator.",
        "description": "Delete a user account as an administrator.",
        "operationId": "adminDeleteAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Account Deletion Request",
            "schema": {
              "type": "object",
              "required": [
                "did"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "x-ms-summary": "Decentralized Identifier (DID)"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the account was deleted successfully."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.disableInviteCodes": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Disable Invite Codes",
        "description": "Disable specific invite codes to prevent further usage.\n",
        "operationId": "DisableInviteCodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the invite codes to disable.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "inviteCodes": {
                  "type": "array",
                  "description": "A list of invite codes to disable.",
                  "items": {
                    "type": "string",
                    "example": "ABC123"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully disabled the invite codes.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or already disabled invite codes.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.enableAccountInvites": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Enable Account Invites",
        "x-ms-summary": "Re-enable an account's ability to receive invite codes.",
        "description": "Re-enable an account's ability to receive invite codes.",
        "operationId": "adminEnableAccountInvites",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "x-ms-summary": "Enable Account Invites Request",
            "description": "Request payload to enable account invites.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "account"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "x-ms-summary": "Account Identifier",
                  "description": "The account identifier (DID) for which invites are being enabled."
                },
                "note": {
                  "type": "string",
                  "x-ms-summary": "Reason for Enable",
                  "description": "Optional reason for enabling invites."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account invites enabled successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the operation was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getAccountInfo": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Account Info",
        "x-ms-summary": "Retrieve details about an account.",
        "description": "Get details about an account.",
        "operationId": "adminGetAccountInfo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "x-ms-summary": "Account Identifier",
            "description": "Decentralized Identifier (DID) of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/accountView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getAccountInfos": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Account Infos",
        "x-ms-summary": "Retrieve account details.",
        "description": "Get details about some accounts.",
        "operationId": "adminGetAccountInfos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dids",
            "in": "query",
            "x-ms-summary": "Account Identifiers",
            "description": "Array of account identifiers (DIDs).",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "infos"
              ],
              "properties": {
                "infos": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/accountView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getInviteCodes": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Invite Codes",
        "x-ms-summary": "Admin view of invite codes.",
        "description": "Get an admin view of invite codes.",
        "operationId": "adminGetInviteCodes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "type": "string",
            "description": "Sorting method for invite codes.",
            "enum": [
              "recent",
              "usage"
            ],
            "default": "recent",
            "x-ms-summary": "Sort Method"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Maximum number of results to return.",
            "minimum": 1,
            "maximum": 500,
            "default": 100,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "type": "string",
            "description": "Cursor for pagination.",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "x-ms-summary": "Cursor for pagination."
                },
                "codes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inviteCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getSubjectStatus": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Subject Status",
        "x-ms-summary": "Retrieve the admin status of a subject.",
        "description": "Get the service-specific admin status of a subject.",
        "operationId": "adminGetSubjectStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "type": "string",
            "description": "Decentralized Identifier (DID) of the subject.",
            "x-ms-summary": "DID"
          },
          {
            "name": "uri",
            "in": "query",
            "type": "string",
            "description": "The AT-URI of the subject.",
            "x-ms-summary": "URI"
          },
          {
            "name": "blob",
            "in": "query",
            "type": "string",
            "description": "The CID of the subject.",
            "x-ms-summary": "Blob"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "subject"
              ],
              "properties": {
                "subject": {
                  "type": "object",
                  "x-ms-summary": "Subject Information"
                },
                "takedown": {
                  "$ref": "#/definitions/statusAttr"
                },
                "deactivated": {
                  "$ref": "#/definitions/statusAttr"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.searchAccounts": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Search Accounts",
        "description": "Get a list of accounts that matches your search query.",
        "operationId": "adminSearchAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The email address to search for.",
            "x-ms-summary": "Email address to search."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Pagination cursor for the next set of results.",
            "x-ms-summary": "Pagination cursor for next results."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "description": "The maximum number of results to retrieve. Defaults to 50.",
            "x-ms-summary": "Maximum number of results to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching accounts retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "accounts"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor to retrieve the next set of results."
                },
                "accounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/accountView"
                  },
                  "description": "List of matching accounts."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.sendEmail": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Send Email",
        "description": "Send an email to a specific account or group of accounts.\n",
        "operationId": "SendEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the email to send.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "string",
                  "description": "The email address or identifier of the recipient.",
                  "example": "user@example.com"
                },
                "subject": {
                  "type": "string",
                  "description": "The subject line of the email.",
                  "example": "Account Update Notification"
                },
                "body": {
                  "type": "string",
                  "description": "The content of the email.",
                  "example": "Your account has been updated successfully."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully sent the email.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid email details or parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountEmail": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Email",
        "description": "Update the email address associated with a specific account.\n",
        "operationId": "UpdateAccountEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the account and the new email address.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Unique identifier of the account.",
                  "example": "account123"
                },
                "newEmail": {
                  "type": "string",
                  "description": "The new email address for the account.",
                  "example": "newuser@example.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the account email.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or email.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountHandle": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Handle",
        "description": "Update the handle associated with a specific account.\n",
        "operationId": "UpdateAccountHandle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the account and the new handle.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Unique identifier of the account.",
                  "example": "account123"
                },
                "newHandle": {
                  "type": "string",
                  "description": "The new handle for the account.",
                  "example": "newhandle"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the account handle.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or handle.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountPassword": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Password",
        "description": "Update the password for a specific account.\n",
        "operationId": "UpdateAccountPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the account and the new password.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Unique identifier of the account.",
                  "example": "account123"
                },
                "newPassword": {
                  "type": "string",
                  "description": "The new password for the account.",
                  "example": "newSecurePassword123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the account password.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateSubjectStatus": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Subject Status",
        "description": "Update the status of a specific subject (e.g., actor).\n",
        "operationId": "UpdateSubjectStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the subject and the new status.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subjectId": {
                  "type": "string",
                  "description": "Unique identifier of the subject.",
                  "example": "did:plc:xyz123"
                },
                "newStatus": {
                  "type": "string",
                  "description": "The new status for the subject (e.g., active, restricted).",
                  "example": "restricted"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the subject status.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid subject identifier or status.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.getRecommendedDidCredentials": {
      "get": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Get Recommended DID Credentials",
        "description": "Get a list of recommended DID credentials for an identity.\n",
        "operationId": "GetRecommendedDidCredentials",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved recommended DID credentials.",
            "schema": {
              "type": "object",
              "properties": {
                "credentials": {
                  "type": "array",
                  "description": "A list of recommended DID credentials.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "The DID credential.",
                        "example": "did:plc:xyz123"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve credentials.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.requestPlcOperationSignature": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Request PLC Operation Signature",
        "description": "Request a signature for a PLC operation to validate or authenticate actions.\n",
        "operationId": "RequestPlcOperationSignature",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the PLC operation to sign.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "operationDetails": {
                  "type": "object",
                  "description": "Details of the operation to sign.",
                  "example": {
                    "type": "update",
                    "did": "did:plc:xyz123"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated a PLC operation signature.",
            "schema": {
              "type": "object",
              "properties": {
                "signature": {
                  "type": "string",
                  "description": "The generated signature for the PLC operation.",
                  "example": "abc123signaturexyz"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to generate signature.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.resolveHandle": {
      "get": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Resolve Handle",
        "description": "Resolve a handle to its DID for account identification.\n",
        "operationId": "ResolveHandle",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "query",
            "description": "The handle to resolve into a DID.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully resolved the handle.",
            "schema": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The DID corresponding to the handle.",
                  "example": "did:plc:xyz123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or unresolved handle.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.signPlcOperation": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Sign PLC Operation",
        "description": "Sign a PLC operation for authentication or validation.\n",
        "operationId": "SignPlcOperation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the PLC operation to be signed.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "operationDetails": {
                  "type": "object",
                  "description": "The details of the PLC operation.",
                  "example": {
                    "type": "create",
                    "did": "did:plc:xyz123",
                    "metadata": {}
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully signed the PLC operation.",
            "schema": {
              "type": "object",
              "properties": {
                "signature": {
                  "type": "string",
                  "description": "The signature of the PLC operation.",
                  "example": "abc123signaturexyz"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Failed to sign the PLC operation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.submitPlcOperation": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Submit PLC Operation",
        "description": "Submit a PLC operation to the network.\n",
        "operationId": "SubmitPlcOperation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the PLC operation to submit.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "operationDetails": {
                  "type": "object",
                  "description": "The details of the PLC operation.",
                  "example": {
                    "type": "update",
                    "did": "did:plc:xyz123",
                    "metadata": {}
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully submitted the PLC operation.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the PLC operation was successfully submitted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Failed to submit the PLC operation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.updateHandle": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "Update Handle",
        "description": "Update the handle associated with a specific DID.\n",
        "operationId": "UpdateHandle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the DID and the new handle.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The DID associated with the handle to update.",
                  "example": "did:plc:xyz123"
                },
                "newHandle": {
                  "type": "string",
                  "description": "The new handle to associate with the DID.",
                  "example": "newhandle"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the handle.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the handle was successfully updated.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid DID or handle.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.label.queryLabels": {
      "get": {
        "tags": [
          "com.atproto.label"
        ],
        "summary": "Query Labels",
        "description": "Query the labels associated with specific content or entities.\n",
        "operationId": "QueryLabels",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subjectId",
            "in": "query",
            "description": "The identifier of the subject (e.g., post or user) to query labels for.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Subject ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of labels to retrieve.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Result Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating the labels.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved labels.",
            "schema": {
              "type": "object",
              "properties": {
                "labels": {
                  "type": "array",
                  "description": "A list of labels associated with the subject.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "labelId": {
                        "type": "string",
                        "description": "Unique identifier of the label.",
                        "example": "label123"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of label (e.g., spam, offensive).",
                        "example": "spam"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or query.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.moderation.createReport": {
      "post": {
        "tags": [
          "com.atproto.moderation"
        ],
        "summary": "Create Report",
        "description": "Create a report flagging inappropriate content or behavior.\n",
        "operationId": "CreateReport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the report to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subjectId": {
                  "type": "string",
                  "description": "The identifier of the subject being reported.",
                  "example": "did:plc:xyz123"
                },
                "reason": {
                  "type": "string",
                  "description": "The reason for the report.",
                  "example": "Spam content"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the report.",
            "schema": {
              "type": "object",
              "properties": {
                "reportId": {
                  "type": "string",
                  "description": "Unique identifier of the created report.",
                  "example": "report123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid report details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.applyWrites": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Apply Writes",
        "description": "Apply a set of write operations to the repo.\n",
        "operationId": "ApplyWrites",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The list of writes to apply to the repository.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "writes": {
                  "type": "array",
                  "description": "A list of write operations to apply.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "The type of operation (e.g., create, update, delete).",
                        "example": "create"
                      },
                      "record": {
                        "type": "object",
                        "description": "The record to apply the operation to."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Writes successfully applied to the repository.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the writes were applied successfully.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid write operations.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.createRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Create Record",
        "description": "Create a new record in the repository.\n",
        "operationId": "CreateRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The details of the record to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection to create the record in.",
                  "example": "posts"
                },
                "record": {
                  "type": "object",
                  "description": "The content of the record.",
                  "example": {
                    "content": "Hello World"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the created record.",
                  "example": "record123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.deleteRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Delete Record",
        "description": "Delete a record from the repository.\n",
        "operationId": "DeleteRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The identifier of the record to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection containing the record.",
                  "example": "posts"
                },
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the record to delete.",
                  "example": "record123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the record was successfully deleted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.describeRepo": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Describe Repository",
        "description": "Retrieve metadata about the repository.\n",
        "operationId": "DescribeRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved repository metadata.",
            "schema": {
              "type": "object",
              "properties": {
                "collections": {
                  "type": "array",
                  "description": "List of collections in the repository.",
                  "items": {
                    "type": "string",
                    "example": "posts"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repository details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.importRepo": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Import Repository",
        "description": "Import an existing repository into the current system.\n",
        "operationId": "ImportRepo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the repository to import.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoUrl": {
                  "type": "string",
                  "description": "The URL of the repository to import.",
                  "example": "https://repo.example.com"
                },
                "credentials": {
                  "type": "object",
                  "description": "Credentials for accessing the repository.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username for repository access."
                    },
                    "password": {
                      "type": "string",
                      "description": "Password for repository access."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository successfully imported.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful import operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.listMissingBlobs": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "List Missing Blobs",
        "description": "Get a list of blobs missing from the repository.\n",
        "operationId": "ListMissingBlobs",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository to check.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of missing blobs.",
            "schema": {
              "type": "object",
              "properties": {
                "missingBlobs": {
                  "type": "array",
                  "description": "A list of missing blob identifiers.",
                  "items": {
                    "type": "string",
                    "example": "blob123"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.listRecords": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "List Records",
        "description": "Retrieve list records from a collection in a repository.\n",
        "operationId": "ListRecords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "query",
            "description": "The name of the collection to list records from.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Collection Name"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to retrieve.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Result Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating the records.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of records.",
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "description": "A list of records from the collection.",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid collection name or parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.putRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Update or Replace Record",
        "description": "Update or replace an existing record in the repository.\n",
        "operationId": "PutRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the record to update or replace.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection containing the record.",
                  "example": "posts"
                },
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the record.",
                  "example": "record123"
                },
                "record": {
                  "type": "object",
                  "description": "The new content of the record.",
                  "example": {
                    "content": "Updated Content"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully updated or replaced.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.uploadBlob": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Upload Blob",
        "description": "Uploads a binary blob to a repo using multipart/form-data.",
        "operationId": "UploadBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file",
            "description": "The binary blob to upload.",
            "x-ms-summary": "Blob File"
          },
          {
            "name": "repoId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique repository ID where the blob will be stored.",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded the blob.",
            "schema": {
              "type": "object",
              "properties": {
                "blobId": {
                  "type": "string",
                  "description": "Unique identifier of the uploaded blob."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected failure during blob upload.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.activateAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Activate Account",
        "x-ms-summary": "Reactivates a deactivated account.",
        "description": "Activates a currently deactivated account.",
        "operationId": "activateAccount",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully activated. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.checkAccountStatus": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Check Account Status",
        "x-ms-summary": "Retrieve the status of an account.",
        "description": "Returns the status of an account, especially as pertaining to import or recovery.",
        "operationId": "checkAccountStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account status retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "activated",
                "validDid",
                "repoCommit",
                "repoRev",
                "repoBlocks",
                "indexedRecords",
                "privateStateValues",
                "expectedBlobs",
                "importedBlobs"
              ],
              "properties": {
                "activated": {
                  "type": "boolean",
                  "description": "Indicates whether the account is activated."
                },
                "validDid": {
                  "type": "boolean",
                  "description": "Indicates whether the DID is valid."
                },
                "repoCommit": {
                  "type": "string",
                  "description": "Commit identifier for the account's repository."
                },
                "repoRev": {
                  "type": "string",
                  "description": "Repository revision information."
                },
                "repoBlocks": {
                  "type": "integer",
                  "description": "Number of repository blocks."
                },
                "indexedRecords": {
                  "type": "integer",
                  "description": "Number of indexed records in the account."
                },
                "privateStateValues": {
                  "type": "integer",
                  "description": "Number of private state values."
                },
                "expectedBlobs": {
                  "type": "integer",
                  "description": "Expected number of blobs."
                },
                "importedBlobs": {
                  "type": "integer",
                  "description": "Number of imported blobs."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.confirmEmail": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Confirm Email",
        "x-ms-summary": "Confirm a user's email address.",
        "description": "Confirm an email using a token generated by the requestEmailConfirmation process.",
        "operationId": "confirmEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Email address and confirmation token.",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "token"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address to confirm."
                },
                "token": {
                  "type": "string",
                  "description": "The confirmation token sent to the user's email."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmed successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Account",
        "x-ms-summary": "Create a new account.",
        "description": "Create an account with the provided details.",
        "operationId": "createAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for creating the account.",
            "schema": {
              "type": "object",
              "required": [
                "handle"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email address for the account."
                },
                "handle": {
                  "type": "string",
                  "description": "Requested handle for the account."
                },
                "did": {
                  "type": "string",
                  "description": "Pre-existing atproto DID, being imported to a new account."
                },
                "inviteCode": {
                  "type": "string",
                  "description": "Invite code for account creation."
                },
                "verificationCode": {
                  "type": "string",
                  "description": "Code for verifying the email or phone."
                },
                "verificationPhone": {
                  "type": "string",
                  "description": "Phone number for account verification."
                },
                "password": {
                  "type": "string",
                  "description": "Initial account password. May need to meet instance-specific password strength requirements."
                },
                "recoveryKey": {
                  "type": "string",
                  "description": "DID PLC rotation key (recovery key) to be included in the PLC creation operation."
                },
                "plcOp": {
                  "type": "object",
                  "description": "Optional PLC operation data."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account created successfully. Login session returned.",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "Access JWT token for authentication."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "Refresh JWT token for session renewal."
                },
                "handle": {
                  "type": "string",
                  "description": "Handle of the new account."
                },
                "did": {
                  "type": "string",
                  "description": "DID of the new account."
                },
                "didDoc": {
                  "type": "object",
                  "description": "DID document associated with the new account."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createAppPassword": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Create App Password",
        "description": "Create an App Password.",
        "operationId": "serverCreateAppPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload to create an App Password.",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A short name for the App Password, to help distinguish them."
                },
                "privileged": {
                  "type": "boolean",
                  "description": "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App password created successfully.",
            "schema": {
              "$ref": "#/definitions/appPassword"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createInviteCode": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Invite Code",
        "x-ms-summary": "Generate a new invite code.",
        "description": "Create an invite code for specified use cases.",
        "operationId": "createInviteCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for creating the invite code.",
            "schema": {
              "type": "object",
              "required": [
                "useCount"
              ],
              "properties": {
                "useCount": {
                  "type": "integer",
                  "description": "The number of times the invite code can be used."
                },
                "forAccount": {
                  "type": "string",
                  "description": "The DID of the account for which the invite code is being generated."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite code created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The generated invite code."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createInviteCodes": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Invite Codes",
        "x-ms-summary": "Generate multiple invite codes.",
        "description": "Create multiple invite codes with specified usage limits.",
        "operationId": "createInviteCodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for generating multiple invite codes.",
            "schema": {
              "type": "object",
              "required": [
                "codeCount",
                "useCount"
              ],
              "properties": {
                "codeCount": {
                  "type": "integer",
                  "description": "The number of invite codes to generate.",
                  "default": 1
                },
                "useCount": {
                  "type": "integer",
                  "description": "The number of times each invite code can be used."
                },
                "forAccounts": {
                  "type": "array",
                  "description": "An array of DIDs for accounts the invite codes are for.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite codes created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "codes": {
                  "type": "array",
                  "description": "The generated invite codes.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "account": {
                        "type": "string",
                        "description": "The DID of the account associated with the invite code."
                      },
                      "code": {
                        "type": "string",
                        "description": "The generated invite code."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deactivateAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Deactivate Account",
        "x-ms-summary": "Deactivate an account post-migration.",
        "description": "Deactivates a currently active account after migration is finalized.",
        "operationId": "deactivateAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for deactivating the account.",
            "schema": {
              "type": "object",
              "properties": {
                "deleteAfter": {
                  "type": "string",
                  "description": "Time window for retaining the deactivated account.",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully deactivated. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deleteSession": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Delete Session",
        "description": "Delete the current session.",
        "operationId": "serverDeleteSession",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.describeServer": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Describe Server",
        "description": "Describes the server's account creation requirements and capabilities.",
        "operationId": "serverDescribeServer",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Server description retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "availableUserDomains"
              ],
              "properties": {
                "inviteCodeRequired": {
                  "type": "boolean",
                  "description": "If true, an invite code must be supplied to create an account on this instance."
                },
                "phoneVerificationRequired": {
                  "type": "boolean",
                  "description": "If true, a phone verification token must be supplied to create an account on this instance."
                },
                "availableUserDomains": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "links": {
                  "$ref": "#/definitions/describeServerLinks"
                },
                "contact": {
                  "$ref": "#/definitions/describeServerContact"
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the server."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getAccountInviteCodes": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Get Account Invite Codes",
        "description": "Get all invite codes for the current account.",
        "operationId": "serverGetAccountInviteCodes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeUsed",
            "in": "query",
            "type": "boolean",
            "default": true,
            "description": "Include used invite codes in the response.",
            "x-ms-summary": "Include Used"
          },
          {
            "name": "createAvailable",
            "in": "query",
            "type": "boolean",
            "default": true,
            "description": "Controls whether any new 'earned' but not 'created' invites should be created.",
            "x-ms-summary": "Create Available"
          }
        ],
        "responses": {
          "200": {
            "description": "Invite codes retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "codes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inviteCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "DuplicateCreate"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getServiceAuth": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Get Service Authentication Token",
        "x-ms-summary": "Fetch a signed authentication token.",
        "description": "Get a signed token on behalf of the requesting DID for the requested service.",
        "operationId": "getServiceAuth",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "aud",
            "in": "query",
            "description": "The DID of the service that the token will be used to authenticate with.",
            "required": true,
            "type": "string",
            "x-ms-summary": "DID"
          },
          {
            "name": "exp",
            "in": "query",
            "description": "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Expiration"
          },
          {
            "name": "lxm",
            "in": "query",
            "description": "Lexicon (XRPC) method to bind the requested token to.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Lexicon method"
          }
        ],
        "responses": {
          "200": {
            "description": "Service authentication token retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The signed authentication token."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getSession": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Get Current Session Info",
        "x-ms-summary": "Retrieve session information.",
        "description": "Get information about the current authentication session.",
        "operationId": "getSession",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "handle",
                "did"
              ],
              "properties": {
                "handle": {
                  "type": "string",
                  "description": "User's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the user."
                },
                "email": {
                  "type": "string",
                  "description": "Email address of the user."
                },
                "emailConfirmed": {
                  "type": "boolean",
                  "description": "Indicates if the email is confirmed."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Indicates if email is used as an authentication factor."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "The status of the user account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.listAppPasswords": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "List App Passwords",
        "description": "List all App Passwords.",
        "operationId": "serverListAppPasswords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "App passwords retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "passwords"
              ],
              "properties": {
                "passwords": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/appPassword"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestAccountDelete": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Account Deletion",
        "description": "Initiate a user account deletion via email.",
        "operationId": "serverRequestAccountDelete",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deletion request initiated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestEmailConfirmation": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Email Confirmation",
        "description": "Request an email with a code to confirm ownership of email.",
        "operationId": "serverRequestEmailConfirmation",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmation request sent successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestEmailUpdate": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Email Update",
        "description": "Request a token in order to update email.",
        "operationId": "serverRequestEmailUpdate",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token request for email update successful.",
            "schema": {
              "type": "object",
              "required": [
                "tokenRequired"
              ],
              "properties": {
                "tokenRequired": {
                  "type": "boolean",
                  "description": "Indicates if a token is required for the email update."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestPasswordReset": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Request Password Reset",
        "x-ms-summary": "Initiate a password reset request.",
        "description": "Initiate a user account password reset via email.",
        "operationId": "requestPasswordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Email address for requesting a password reset.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address associated with the user account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset request initiated successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.reserveSigningKey": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Reserve Signing Key",
        "x-ms-summary": "Reserve a repo signing key.",
        "description": "Reserve a repo signing key for use with account creation.",
        "operationId": "reserveSigningKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "DID for reserving a signing key.",
            "schema": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The Decentralized Identifier (DID) to reserve a signing key for."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signing key reserved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "signingKey"
              ],
              "properties": {
                "signingKey": {
                  "type": "string",
                  "description": "The public key for the reserved signing key."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.resetPassword": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Reset Password",
        "x-ms-summary": "Reset a user account password.",
        "description": "Reset a user account password using a token.",
        "operationId": "resetPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Token and new password for resetting the account.",
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The token provided for password reset."
                },
                "password": {
                  "type": "string",
                  "description": "The new password for the user account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.revokeAppPassword": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Revoke App Password",
        "description": "Revoke an App Password by name.",
        "operationId": "serverRevokeAppPassword",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload containing the name of the App Password to revoke.",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the App Password to revoke."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App Password revoked successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.updateEmail": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Update Email",
        "description": "Update an account's email.",
        "operationId": "serverUpdateEmail",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload containing email update information.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The new email address to update the account with."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Whether email is used as an authentication factor."
                },
                "token": {
                  "type": "string",
                  "description": "A token from requestEmailUpdate if the account's email has been confirmed."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "TokenRequired"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getBlob": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Blob",
        "description": "Retrieve a binary blob from a repo using multipart/form-data.",
        "operationId": "GetBlob",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blobId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the blob to retrieve.",
            "x-ms-summary": "Blob ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the blob as a JSON response.",
            "schema": {
              "type": "object",
              "properties": {
                "blobId": {
                  "type": "string",
                  "description": "Unique identifier of the blob."
                },
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "The binary content of the blob, base64-encoded."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid blob ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found - The specified blob does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected failure during blob retrieval.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getBlocks": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Blocks",
        "description": "Retrieve multiple binary blocks from the specified repository.\n",
        "operationId": "SyncGetBlocks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blockIds",
            "in": "query",
            "description": "Comma-separated list of block IDs to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Block IDs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved binary blocks.",
            "schema": {
              "type": "object",
              "properties": {
                "blocks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "blockId": {
                        "type": "string",
                        "description": "Unique identifier of the block."
                      },
                      "data": {
                        "type": "string",
                        "format": "byte",
                        "description": "The base64-encoded binary data of the block."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid block IDs or request parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found - One or more specified blocks do not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected failure during block retrieval.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getLatestCommit": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Latest Commit",
        "description": "Retrieve the latest commit for the repository.\n",
        "operationId": "GetLatestCommit",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Latest commit successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "commit": {
                  "type": "object",
                  "description": "Details of the latest commit.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the commit.",
                      "example": "commit123"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of the commit.",
                      "example": "2024-11-20T12:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRecord": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Record",
        "description": "Retrieve a record from the repo by its unique identifier.\n",
        "operationId": "ATProtoGetRecord",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Unique identifier of the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the retrieved record.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the record.",
                      "example": "record123"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the record.",
                      "example": "Record content here."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRepo": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Repository",
        "description": "Retrieve repository data as base64-encoded binary content.\n",
        "operationId": "SyncGetRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repository data.",
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository.",
                  "example": "repo123"
                },
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "Base64-encoded repository data."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRepoStatus": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Repository Status",
        "description": "Retrieve repo status, incl. synchronization info.\n",
        "operationId": "GetRepoStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Repository status successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "description": "Details of the repository's status.",
                  "properties": {
                    "syncStatus": {
                      "type": "string",
                      "description": "The synchronization status of the repository.",
                      "example": "synchronized"
                    },
                    "lastCommit": {
                      "type": "string",
                      "description": "The identifier of the last commit.",
                      "example": "commit123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.listBlobs": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "List Blobs",
        "description": "Get a list of all blobs in the repository.\n",
        "operationId": "ListBlobs",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Blobs successfully listed.",
            "schema": {
              "type": "object",
              "properties": {
                "blobs": {
                  "type": "array",
                  "description": "List of blobs in the repository.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the blob.",
                        "example": "blob123"
                      },
                      "size": {
                        "type": "integer",
                        "description": "The size of the blob in bytes.",
                        "example": 1024
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.listRepos": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "List Repositories",
        "description": "Get a list of all repositories available in the system.\n",
        "operationId": "ListRepos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved repositories list.",
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "description": "List of repositories.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the repository.",
                        "example": "repo123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                        "example": "MyRepository"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repositories list.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.notifyOfUpdate": {
      "post": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Notify of Update",
        "description": "Notify the system about updates to a repo to trigger sync.\n",
        "operationId": "NotifyOfUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the update notification.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository.",
                  "example": "repo123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update notification successfully submitted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the update notification was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid update details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.requestCrawl": {
      "post": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Request Crawl",
        "description": "Submit a request to crawl a repository for updates.\n",
        "operationId": "RequestCrawl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the crawl request.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository to crawl.",
                  "example": "repo123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl request successfully submitted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the crawl request was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid crawl request details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.createTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Create Template",
        "description": "Create a new communication template for notifications or messages.\n",
        "operationId": "CreateTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the template to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the template.",
                  "example": "WelcomeTemplate"
                },
                "content": {
                  "type": "string",
                  "description": "The content of the template.",
                  "example": "Welcome to the service!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "templateId": {
                  "type": "string",
                  "description": "Unique identifier of the created template.",
                  "example": "template123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to create template.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.deleteTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Delete Template",
        "description": "Delete an existing communication template.\n",
        "operationId": "DeleteTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the template to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "templateId": {
                  "type": "string",
                  "description": "Unique identifier of the template.",
                  "example": "template123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the template was deleted successfully.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to delete template.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.listTemplates": {
      "get": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "List Templates",
        "description": "Get a list of all communication templates.\n",
        "operationId": "ListTemplates",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of templates.",
            "schema": {
              "type": "object",
              "properties": {
                "templates": {
                  "type": "array",
                  "description": "List of communication templates.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the template.",
                        "example": "template123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the template.",
                        "example": "WelcomeTemplate"
                      },
                      "content": {
                        "type": "string",
                        "description": "The content of the template.",
                        "example": "Welcome to the service!"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve templates.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.updateTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Update Template",
        "description": "Update an existing communication template.\n",
        "operationId": "UpdateTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the template to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "templateId": {
                  "type": "string",
                  "description": "Unique identifier of the template.",
                  "example": "template123"
                },
                "name": {
                  "type": "string",
                  "description": "The new name for the template.",
                  "example": "UpdatedTemplate"
                },
                "content": {
                  "type": "string",
                  "description": "The new content for the template.",
                  "example": "Updated content for the template."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully updated.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the template was updated successfully.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to update template.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.emitEvent": {
      "post": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Emit Moderation Event",
        "description": "Emit a moderation event for tracking or logging purposes.\n",
        "operationId": "EmitEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the moderation event.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventType": {
                  "type": "string",
                  "description": "The type of moderation event.",
                  "example": "userBan"
                },
                "details": {
                  "type": "string",
                  "description": "Additional details about the event.",
                  "example": "User banned for violating terms of service."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moderation event successfully emitted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the event was emitted successfully.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to emit moderation event.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getEvent": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Event",
        "description": "Retrieve details of a specific moderation event.\n",
        "operationId": "GetEvent",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "Unique identifier of the moderation event.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation event.",
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "object",
                  "description": "Details of the moderation event.",
                  "properties": {
                    "eventType": {
                      "type": "string",
                      "description": "The type of moderation event.",
                      "example": "userBan"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional details about the event.",
                      "example": "User banned for violating terms of service."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid event identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRecord": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Record",
        "description": "Retrieve a moderation record for an entity or user.\n",
        "operationId": "OzoneGetRecord",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Unique identifier of the moderation record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation record.",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the moderation record.",
                  "properties": {
                    "entityId": {
                      "type": "string",
                      "description": "The ID of the entity associated with the record.",
                      "example": "entity123"
                    },
                    "actions": {
                      "type": "array",
                      "description": "List of actions associated with the moderation record.",
                      "items": {
                        "type": "string",
                        "example": "userBan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRecords": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Records",
        "description": "Retrieve moderation records based on provided filters.\n",
        "operationId": "ModerationGetRecords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filter criteria for retrieving moderation records.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation records.",
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "description": "List of moderation records.",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRepo": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Repository",
        "description": "Retrieve details of a specific moderation repository.\n",
        "operationId": "OzoneGetRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation repository.",
            "schema": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "object",
                  "description": "Details of the moderation repository.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the repository.",
                      "example": "repo123"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the repository.",
                      "example": "active"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRepos": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Repositories",
        "description": "Get a list of all moderation repositories.\n",
        "operationId": "GetRepos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation repositories.",
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "description": "List of moderation repositories.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the repository.",
                        "example": "repo123"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the repository.",
                        "example": "active"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repositories.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.queryEvents": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Query Moderation Events",
        "description": "Retrieve moderation events based on specified criteria.\n",
        "operationId": "ModerationQueryEvents",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filter criteria for querying moderation events.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation events.",
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "description": "List of moderation events.",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.queryStatuses": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Query Moderation Statuses",
        "description": "Retrieve the statuses of moderated entities.\n",
        "operationId": "QueryStatuses",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query string for filtering moderation statuses.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Status Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation statuses.",
            "schema": {
              "type": "object",
              "properties": {
                "statuses": {
                  "type": "array",
                  "description": "List of moderation statuses.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entityId": {
                        "type": "string",
                        "description": "Unique identifier of the moderated entity.",
                        "example": "entity123"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the entity.",
                        "example": "banned"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.searchRepos": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Search Repositories",
        "description": "Search moderation repos based on query params.\n",
        "operationId": "SearchRepos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query string for searching repositories.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Repository Search Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved matching repositories.",
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "description": "List of matching moderation repositories.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the repository.",
                        "example": "repo123"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the repository.",
                        "example": "active"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.server.getConfig": {
      "get": {
        "tags": [
          "tools.ozone.server"
        ],
        "summary": "Get Server Configuration",
        "description": "Get details about ozone's server configuration.",
        "operationId": "serverGetConfig",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Server configuration retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "appview": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "pds": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "blobDivert": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "chat": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "viewer": {
                  "$ref": "#/definitions/viewerConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.addValues": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Add Values to Set",
        "description": "Add values to an existing set in the system.\n",
        "operationId": "AddValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the values to add.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "values": {
                  "type": "array",
                  "description": "Values to add to the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values successfully added to the set.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to add values.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.deleteSet": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Delete Set",
        "description": "Delete an existing set by its unique identifier.\n",
        "operationId": "DeleteSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the set to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to delete the set.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.deleteValues": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Delete Values from Set",
        "description": "Remove specific values from a set by its unique identifier.\n",
        "operationId": "DeleteValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the values to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "values": {
                  "type": "array",
                  "description": "Values to remove from the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values successfully removed from the set.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to remove values.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.getValues": {
      "get": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Get Values from Set",
        "description": "Retrieve the values stored in a specific set.\n",
        "operationId": "GetValues",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "setId",
            "in": "query",
            "description": "Unique identifier of the set.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Set ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved set values.",
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "description": "List of values in the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid set ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.querySets": {
      "get": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Query Sets",
        "description": "Get a list of sets matching query criteria.\n",
        "operationId": "QuerySets",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query criteria for filtering sets.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Set Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved matching sets.",
            "schema": {
              "type": "object",
              "properties": {
                "sets": {
                  "type": "array",
                  "description": "List of matching sets.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "setId": {
                        "type": "string",
                        "description": "Unique identifier of the set.",
                        "example": "set123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the set.",
                        "example": "MySet"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.upsertSet": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Upsert Set",
        "description": "Create or update a set with specified values.\n",
        "operationId": "UpsertSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the set to create or update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the set.",
                  "example": "MySet"
                },
                "values": {
                  "type": "array",
                  "description": "The values to include in the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set successfully created or updated.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to upsert set.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.findCorrelation": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Find Correlation",
        "description": "Search for correlations btw. entities based on their signatures.\n",
        "operationId": "FindCorrelation",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "description": "The signature to search for correlations.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Signature"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved correlations.",
            "schema": {
              "type": "object",
              "properties": {
                "correlations": {
                  "type": "array",
                  "description": "List of correlations found.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entityId": {
                        "type": "string",
                        "description": "The ID of the correlated entity.",
                        "example": "entity123"
                      },
                      "similarity": {
                        "type": "number",
                        "description": "The similarity score.",
                        "example": 0.85
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid signature.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.findRelatedAccounts": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Find Related Accounts",
        "description": "Retrieve accounts related to the specified signature.\n",
        "operationId": "FindRelatedAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "description": "The signature to search for related accounts.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Signature"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved related accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "type": "array",
                  "description": "List of related accounts.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string",
                        "description": "Unique identifier of the related account.",
                        "example": "account123"
                      },
                      "relationship": {
                        "type": "string",
                        "description": "The type of relationship.",
                        "example": "associated"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid signature.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.searchAccounts": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Search Accounts by Signature",
        "description": "Search for accounts associated with a specific signature.\n",
        "operationId": "OzoneSearchAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The signature or criteria to search for accounts.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved matching accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "type": "array",
                  "description": "List of accounts matching the query.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string",
                        "description": "Unique identifier of the account.",
                        "example": "account123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the account.",
                        "example": "John Doe"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid search query.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.addMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Add Team Member",
        "description": "Add a new member to a team.\n",
        "operationId": "AddMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to add.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                },
                "role": {
                  "type": "string",
                  "description": "The role of the new member.",
                  "example": "Developer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member successfully added to the team.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to add member.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.deleteMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Delete Team Member",
        "description": "Remove a member from a team.\n",
        "operationId": "DeleteMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to remove.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member successfully removed from the team.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to remove member.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.listMembers": {
      "get": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "List Team Members",
        "description": "Get a list of members in a specific team.\n",
        "operationId": "ListMembers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "description": "Unique identifier of the team.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved team members.",
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "description": "List of team members.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "memberId": {
                        "type": "string",
                        "description": "Unique identifier of the member.",
                        "example": "member456"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the team member.",
                        "example": "Jane Doe"
                      },
                      "role": {
                        "type": "string",
                        "description": "The role of the team member.",
                        "example": "Developer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid team ID.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.updateMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Update Team Member",
        "description": "Update details of a team member.\n",
        "operationId": "UpdateMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                },
                "role": {
                  "type": "string",
                  "description": "The updated role of the team member.",
                  "example": "Team Lead"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member details successfully updated.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to update member details.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/xrpc/embedRecordView": {
      "get": {
        "tags": [
          "embed"
        ],
        "summary": "Retrieve record view",
        "x-ms-summary": "Fetch dynamic schema for the record view.",
        "description": "Returns dynamic schema information for the record view.",
        "operationId": "embedRecordView",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Identifier for the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the record view."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "Preferences": {
      "type": "object",
      "description": "An object containing preferences attached to the current account.",
      "properties": {
        "theme": {
          "type": "string",
          "description": "The user's theme preference (e.g., 'dark' or 'light').",
          "example": "dark"
        },
        "notifications": {
          "type": "object",
          "description": "The user's notification preferences.",
          "properties": {
            "email": {
              "type": "boolean",
              "description": "Whether email notifications are enabled.",
              "example": true
            },
            "push": {
              "type": "boolean",
              "description": "Whether push notifications are enabled.",
              "example": false
            }
          }
        },
        "language": {
          "type": "string",
          "description": "The user's preferred language code (e.g., 'en', 'fr').",
          "example": "en"
        },
        "privacySettings": {
          "type": "object",
          "description": "The user's privacy-related preferences.",
          "properties": {
            "profileVisibility": {
              "type": "string",
              "description": "The visibility of the user's profile (e.g., 'public', 'private').",
              "example": "public"
            },
            "messagePermissions": {
              "type": "string",
              "description": "Who can send messages to the user (e.g., 'anyone', 'contacts').",
              "example": "contacts"
            }
          }
        }
      }
    },
    "profileViewDetailed": {
      "type": "object",
      "required": [
        "did",
        "handle"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "maxLength": 640
        },
        "description": {
          "type": "string",
          "maxLength": 2560
        },
        "avatar": {
          "type": "string",
          "format": "uri"
        },
        "banner": {
          "type": "string",
          "format": "uri"
        },
        "followersCount": {
          "type": "integer"
        },
        "followsCount": {
          "type": "integer"
        },
        "postsCount": {
          "type": "integer"
        },
        "associated": {
          "$ref": "#/definitions/profileAssociated"
        },
        "joinedViaStarterPack": {
          "$ref": "#/definitions/starterPackViewBasic"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "pinnedPost": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "FeedItem": {
      "type": "object",
      "description": "Details of a single feed item.",
      "properties": {
        "post": {
          "$ref": "#/definitions/Post"
        },
        "reply": {
          "$ref": "#/definitions/Reply"
        },
        "reason": {
          "type": "object",
          "description": "Reason for including the post in the feed."
        },
        "feedContext": {
          "type": "string",
          "description": "Context of the feed item."
        }
      }
    },
    "Post": {
      "type": "object",
      "description": "Details of a post.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The unique URI of the post."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the post."
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "record": {
          "type": "object",
          "description": "The content record of the post."
        },
        "embed": {
          "type": "object",
          "description": "Embedded content associated with the post."
        },
        "replyCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of replies to the post."
        },
        "repostCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times the post has been reposted."
        },
        "likeCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of likes on the post."
        },
        "quoteCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of quotes of the post."
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was indexed."
        },
        "viewer": {
          "type": "object",
          "description": "Viewer-specific metadata for the post.",
          "properties": {
            "repost": {
              "type": "string",
              "description": "Viewer's repost action ID, if applicable."
            },
            "like": {
              "type": "string",
              "description": "Viewer's like action ID, if applicable."
            },
            "threadMuted": {
              "type": "boolean",
              "description": "Whether the viewer has muted the thread."
            },
            "replyDisabled": {
              "type": "boolean",
              "description": "Whether replies are disabled for the post."
            },
            "embeddingDisabled": {
              "type": "boolean",
              "description": "Whether embedding is disabled for the post."
            },
            "pinned": {
              "type": "boolean",
              "description": "Whether the post is pinned."
            }
          }
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the post.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "threadgate": {
          "type": "object",
          "description": "Details about thread-related restrictions or lists.",
          "properties": {
            "uri": {
              "type": "string",
              "description": "The URI for the threadgate."
            },
            "cid": {
              "type": "string",
              "description": "The CID for the threadgate."
            },
            "record": {
              "type": "object",
              "description": "Record details for the threadgate."
            },
            "lists": {
              "type": "array",
              "description": "Lists associated with the threadgate.",
              "items": {
                "$ref": "#/definitions/ListMetadata"
              }
            }
          }
        }
      }
    },
    "ProfileView": {
      "type": "object",
      "description": "Basic information about a profile.",
      "properties": {
        "did": {
          "type": "string",
          "description": "Decentralized Identifier (DID) of the profile."
        },
        "handle": {
          "type": "string",
          "description": "The handle of the profile."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the profile."
        },
        "avatar": {
          "type": "string",
          "description": "Avatar URL of the profile."
        },
        "associated": {
          "$ref": "#/definitions/AssociatedMetadata"
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the profile.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the profile was created."
        }
      }
    },
    "AssociatedMetadata": {
      "type": "object",
      "description": "Associated metadata for a profile.",
      "properties": {
        "lists": {
          "type": "integer",
          "description": "Number of associated lists."
        },
        "feedgens": {
          "type": "integer",
          "description": "Number of associated feed generators."
        },
        "starterPacks": {
          "type": "integer",
          "description": "Number of starter packs."
        },
        "labeler": {
          "type": "boolean",
          "description": "Indicates if the profile is a labeler."
        },
        "chat": {
          "type": "object",
          "description": "Chat preferences for the profile.",
          "properties": {
            "allowIncoming": {
              "type": "string",
              "description": "Allowed incoming chat settings (e.g., \"all\")."
            }
          }
        }
      }
    },
    "ViewerPostMetadata": {
      "type": "object",
      "description": "Viewer-specific metadata for a post.",
      "properties": {
        "repost": {
          "type": "string",
          "description": "URI of the viewer's repost of the post."
        },
        "like": {
          "type": "string",
          "description": "URI of the viewer's like of the post."
        },
        "threadMuted": {
          "type": "boolean",
          "description": "Indicates if the thread is muted by the viewer."
        },
        "replyDisabled": {
          "type": "boolean",
          "description": "Indicates if replies are disabled."
        },
        "embeddingDisabled": {
          "type": "boolean",
          "description": "Indicates if embedding is disabled."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates if the post is pinned."
        }
      }
    },
    "Label": {
      "type": "object",
      "description": "Labels associated with a post or profile.",
      "properties": {
        "ver": {
          "type": "integer",
          "description": "Version of the label."
        },
        "src": {
          "type": "string",
          "description": "Source of the label."
        },
        "uri": {
          "type": "string",
          "description": "URI associated with the label."
        },
        "cid": {
          "type": "string",
          "description": "CID associated with the label."
        },
        "val": {
          "type": "string",
          "description": "Value of the label."
        },
        "neg": {
          "type": "boolean",
          "description": "Indicates if the label is negative."
        },
        "cts": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of label creation."
        },
        "exp": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration timestamp of the label."
        },
        "sig": {
          "type": "string",
          "description": "Signature of the label."
        }
      }
    },
    "Threadgate": {
      "type": "object",
      "description": "Access restrictions and details for a thread.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI of the threadgate."
        },
        "cid": {
          "type": "string",
          "description": "CID of the threadgate."
        },
        "record": {
          "type": "object",
          "description": "Record of the threadgate."
        },
        "lists": {
          "type": "array",
          "description": "Lists associated with the threadgate.",
          "items": {
            "$ref": "#/definitions/ListItem"
          }
        }
      }
    },
    "ListItem": {
      "type": "object",
      "description": "An item in a list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI of the list item."
        },
        "cid": {
          "type": "string",
          "description": "CID of the list item."
        },
        "name": {
          "type": "string",
          "description": "Name of the list item."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list item."
        },
        "avatar": {
          "type": "string",
          "description": "Avatar of the list item."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Count of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list item.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        }
      }
    },
    "MutedByList": {
      "type": "object",
      "description": "Details of a list that muted the actor.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI of the list that muted the actor."
        },
        "cid": {
          "type": "string",
          "description": "Content Identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "Name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list."
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "Avatar image URI for the list."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the list was indexed."
        }
      }
    },
    "BlockingByList": {
      "type": "object",
      "description": "Details of a list that blocks the actor.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI of the list that blocks the actor."
        },
        "cid": {
          "type": "string",
          "description": "Content Identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "Name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list."
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "Avatar image URI for the list."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the list was indexed."
        }
      }
    },
    "ViewerMetadata": {
      "type": "object",
      "description": "Metadata about the viewer's relationship to the actor.",
      "properties": {
        "muted": {
          "type": "boolean",
          "description": "Indicates if the actor is muted by the viewer."
        },
        "blockedBy": {
          "type": "boolean",
          "description": "Indicates if the actor is blocked by the viewer."
        },
        "blocking": {
          "type": "string",
          "description": "Indicates if the viewer is blocking the actor."
        },
        "following": {
          "type": "string",
          "description": "Indicates if the viewer is following the actor."
        },
        "followedBy": {
          "type": "string",
          "description": "Indicates if the actor is following the viewer."
        },
        "mutedByList": {
          "$ref": "#/definitions/MutedByList"
        },
        "blockingByList": {
          "$ref": "#/definitions/BlockingByList"
        }
      }
    },
    "Reply": {
      "type": "object",
      "description": "Metadata about a reply in a conversation thread.",
      "properties": {
        "root": {
          "type": "object",
          "description": "Root post of the thread.",
          "additionalProperties": true
        },
        "parent": {
          "type": "object",
          "description": "Parent post to which this reply was made.",
          "additionalProperties": true
        },
        "grandparentAuthor": {
          "type": "object",
          "description": "Author of the grandparent post.",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized Identifier (DID) of the author."
            },
            "handle": {
              "type": "string",
              "description": "Handle of the author."
            },
            "displayName": {
              "type": "string",
              "description": "Display name of the author."
            },
            "avatar": {
              "type": "string",
              "format": "uri",
              "description": "Avatar image URI of the author."
            },
            "associated": {
              "$ref": "#/definitions/AssociatedMetadata"
            }
          }
        }
      }
    },
    "ListMetadata": {
      "type": "object",
      "description": "Metadata for a list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the list."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose or category of the list."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the list's avatar."
        },
        "listItemCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "type": "object",
          "description": "Viewer-specific metadata for the list.",
          "properties": {
            "muted": {
              "type": "boolean",
              "description": "Whether the viewer has muted the list."
            },
            "blocked": {
              "type": "string",
              "description": "Whether the viewer has blocked the list."
            }
          }
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was indexed."
        }
      }
    },
    "ListDetails": {
      "type": "object",
      "description": "Details about a specific list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the list."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose or category of the list."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the list's avatar."
        },
        "listItemCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was created."
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was indexed."
        }
      }
    },
    "Author": {
      "type": "object",
      "description": "Details about the author of the post.",
      "properties": {
        "did": {
          "type": "string",
          "description": "The decentralized identifier (DID) of the author."
        },
        "handle": {
          "type": "string",
          "description": "The author's handle or username."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the author."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the author's avatar image."
        },
        "associated": {
          "type": "object",
          "description": "Associated metadata for the author.",
          "properties": {
            "lists": {
              "type": "integer",
              "format": "int32",
              "description": "Number of lists associated with the author."
            },
            "feedgens": {
              "type": "integer",
              "format": "int32",
              "description": "Number of feed generators associated with the author."
            },
            "starterPacks": {
              "type": "integer",
              "format": "int32",
              "description": "Number of starter packs associated with the author."
            },
            "labeler": {
              "type": "boolean",
              "description": "Whether the author is a labeler."
            },
            "chat": {
              "type": "object",
              "description": "Chat-related metadata for the author.",
              "properties": {
                "allowIncoming": {
                  "type": "string",
                  "description": "Allowed incoming chat types."
                }
              }
            }
          }
        }
      }
    },
    "postView": {
      "type": "object",
      "additionalProperties": true
    },
    "replyRef": {
      "type": "object",
      "description": "References the root and parent of a post reply.",
      "required": [ "root", "parent" ],
      "properties": {
        "root": {
          "$ref": "#/definitions/strongRef"
        },
        "parent": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "strongRef": {
      "type": "object",
      "description": "Defines a strong reference with a URI and CID.",
      "required": [ "uri", "cid" ],
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the strong reference."
        },
        "cid": {
          "type": "string",
          "description": "The CID of the strong reference."
        }
      }
    },
    "reasonRepost": {
      "type": "object",
      "required": [
        "by",
        "indexedAt"
      ],
      "properties": {
        "by": {
          "$ref": "#/definitions/profileViewBasic"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "reasonPin": {
      "type": "object",
      "properties": {}
    },
    "notFoundPost": {
      "type": "object",
      "required": [
        "uri",
        "notFound"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "notFound": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "blockedPost": {
      "type": "object",
      "required": [
        "uri",
        "blocked",
        "author"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "blocked": {
          "type": "boolean",
          "default": true
        },
        "author": {
          "$ref": "#/definitions/blockedAuthor"
        }
      }
    },
    "profileViewBasic": {
      "type": "object",
      "required": [
        "did",
        "handle"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "maxLength": 640
        },
        "avatar": {
          "type": "string"
        },
        "associated": {
          "$ref": "#/definitions/profileAssociated"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "chatDisabled": {
          "type": "boolean",
          "description": "Set to true when the actor cannot actively participate in conversations"
        }
      }
    },
    "blockedAuthor": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        }
      }
    },
    "profileAssociated": {
      "type": "object",
      "properties": {
        "lists": {
          "type": "integer"
        },
        "feedgens": {
          "type": "integer"
        },
        "starterPacks": {
          "type": "integer"
        },
        "labeler": {
          "type": "boolean"
        },
        "chat": {
          "$ref": "#/definitions/profileAssociatedChat"
        }
      }
    },
    "viewerState": {
      "type": "object",
      "description": "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
      "properties": {
        "muted": {
          "type": "boolean"
        },
        "mutedByList": {
          "$ref": "#/definitions/listViewBasic"
        },
        "blockedBy": {
          "type": "boolean"
        },
        "blocking": {
          "type": "string"
        },
        "blockingByList": {
          "$ref": "#/definitions/listViewBasic"
        },
        "following": {
          "type": "string"
        },
        "followedBy": {
          "type": "string"
        },
        "knownFollowers": {
          "$ref": "#/definitions/knownFollowers"
        }
      }
    },
    "profileAssociatedChat": {
      "type": "object",
      "required": [
        "allowIncoming"
      ],
      "properties": {
        "allowIncoming": {
          "type": "string",
          "enum": [
            "all",
            "none",
            "following"
          ]
        }
      }
    },
    "listViewBasic": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "name",
        "purpose"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "purpose": {
          "$ref": "#/definitions/listPurpose"
        },
        "avatar": {
          "type": "string"
        },
        "listItemCount": {
          "type": "integer",
          "minimum": 0
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/listViewerState"
        },
        "indexedAt": {
          "type": "string"
        }
      }
    },
    "label": {
      "type": "object",
      "description": "Metadata tag on an atproto resource (eg, repo or record).",
      "required": [
        "src",
        "uri",
        "val",
        "cts"
      ],
      "properties": {
        "ver": {
          "type": "integer"
        },
        "src": {
          "type": "string",
          "description": "DID of the actor who created this label."
        },
        "uri": {
          "type": "string",
          "description": "AT URI of the record, repository (account), or other resource that this label applies to.",
          "format": "uri"
        },
        "cid": {
          "type": "string",
          "description": "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
        },
        "val": {
          "type": "string",
          "description": "The short string name of the value or type of this label.",
          "maxLength": 128
        },
        "neg": {
          "type": "boolean",
          "description": "If true, this is a negation label, overwriting a previous label."
        },
        "cts": {
          "type": "string",
          "description": "Timestamp when this label was created.",
          "format": "date-time"
        },
        "exp": {
          "type": "string",
          "description": "Timestamp at which this label expires (no longer applies).",
          "format": "date-time"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "description": "Signature of dag-cbor encoded label."
        }
      }
    },
    "ActorMetadata": {
      "type": "object",
      "required": [
        "messagesSent",
        "messagesReceived",
        "convos",
        "convosStarted"
      ],
      "properties": {
        "messagesSent": {
          "type": "integer",
          "description": "The number of messages sent by the actor."
        },
        "messagesReceived": {
          "type": "integer",
          "description": "The number of messages received by the actor."
        },
        "convos": {
          "type": "integer",
          "description": "The total number of conversations the actor has participated in."
        },
        "convosStarted": {
          "type": "integer",
          "description": "The number of conversations started by the actor."
        }
      }
    },
    "knownFollowers": {
      "type": "object",
      "description": "The subject's followers whom you also follow.",
      "required": [
        "count",
        "followers"
      ],
      "properties": {
        "count": {
          "type": "integer"
        },
        "followers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileViewBasic"
          },
          "maxItems": 5
        }
      }
    },
    "ProfileViewBasic": {
      "type": "object",
      "required": [
        "did",
        "handle"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string",
          "description": "Handle of the actor."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the actor.",
          "maxLength": 640
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "URI of the actor's avatar."
        },
        "associated": {
          "$ref": "#/definitions/profileAssociated"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "description": "Array of labels associated with the actor."
        },
        "chatDisabled": {
          "type": "boolean",
          "description": "Indicates if the actor cannot actively participate in conversations."
        }
      }
    },
    "listPurpose": {
      "type": "object",
      "description": "Defines the purpose of the list.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the list purpose.",
          "enum": [ "modlist", "curatelist", "referencelist" ]
        },
        "modlistProperty": {
          "type": "string",
          "description": "A property specific to modlist.",
          "x-ms-summary": "Modlist Property"
        },
        "curatelistProperty": {
          "type": "string",
          "description": "A property specific to curatelist.",
          "x-ms-summary": "Curatelist Property"
        },
        "referencelistProperty": {
          "type": "string",
          "description": "A property specific to referencelist.",
          "x-ms-summary": "Referencelist Property"
        }
      },
      "required": [ "type" ]
    },
    "modlist": {
      "type": "string",
      "description": "A list of actors to apply an aggregate moderation action on."
    },
    "curatelist": {
      "type": "string",
      "description": "A list of actors used for curation purposes."
    },

    "listViewerState": {
      "type": "object",
      "properties": {
        "muted": {
          "type": "boolean"
        },
        "blocked": {
          "type": "string"
        }
      }
    },
    "convoView": {
      "type": "object",
      "description": "Represents a view of a conversation.",
      "x-ms-summary": "Conversation View",
      "required": [
        "id",
        "rev",
        "members",
        "muted",
        "unreadCount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the conversation.",
          "x-ms-summary": "Conversation ID"
        },
        "rev": {
          "type": "string",
          "description": "The revision identifier of the conversation.",
          "x-ms-summary": "Conversation Revision"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profileViewBasic"
          },
          "description": "List of members in the conversation.",
          "x-ms-summary": "Conversation Members"
        },
        "lastMessage": {
          "type": "object",
          "description": "The last message in the conversation.",
          "x-ms-dynamic-schema": {
            "operationId": "listConvos",
            "value-path": "lastMessage"
          },
          "x-ms-summary": "Last Message in Conversation"
        },
        "muted": {
          "type": "boolean",
          "description": "Indicates whether the conversation is muted.",
          "x-ms-summary": "Is Conversation Muted"
        },
        "opened": {
          "type": "boolean",
          "description": "Indicates whether the conversation has been opened.",
          "x-ms-summary": "Is Conversation Opened"
        },
        "unreadCount": {
          "type": "integer",
          "description": "The count of unread messages in the conversation.",
          "x-ms-summary": "Unread Message Count"
        }
      }
    },
    "getMessages": {
      "type": "object",
      "description": "Dynamic schema for retrieving messages."
    },
    "messageInput": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "maxLength": 10000
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "embed": {
          "$ref": "#/definitions/embed.record"
        }
      }
    },
    "batchItem": {
      "type": "object",
      "description": "Represents a batch item for sending a message.",
      "properties": {
        "convoId": {
          "type": "string"
        },
        "message": {
          "$ref": "#/definitions/messageInput"
        }
      },
      "required": [
        "convoId",
        "message"
      ]
    },
    "messageView": {
      "type": "object",
      "required": [
        "id",
        "rev",
        "text",
        "sender",
        "sentAt"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "maxLength": 10000
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "embed": {
          "$ref": "#/definitions/embedRecordView"
        },
        "sender": {
          "$ref": "#/definitions/messageViewSender"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "messageViewSender": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string",
          "description": "Decentralized Identifier of the sender."
        }
      }
    },
    "embedRecordView": {
      "type": "object",
      "required": [
        "record"
      ],
      "properties": {
        "record": {
          "type": "object",
          "description": "Dynamic schema for the record view.",
          "x-ms-dynamic-schema": {
            "operationId": "embedRecordView",
            "value-path": "record",
            "parameters": {
              "recordId": "{recordId}"
            }
          }
        }
      }
    },
    "embed.record": {
      "type": "object",
      "required": [
        "record"
      ],
      "properties": {
        "record": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "richtextFacet": {
      "type": "object",
      "description": "Annotation of a sub-string within rich text.",
      "required": [
        "index",
        "features"
      ],
      "properties": {
        "index": {
          "$ref": "#/definitions/richTextFacetByteSlice"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Feature of the rich text facet.",
            "properties": {
              "featureType": {
                "type": "string",
                "description": "Type of the feature."
              },
              "details": {
                "type": "object",
                "description": "Details about the feature."
              }
            }
          }
        }
      }
    },
    "richTextFacetByteSlice": {
      "type": "object",
      "description": "Specifies the sub-string range a facet feature applies to.",
      "required": [
        "byteStart",
        "byteEnd"
      ],
      "properties": {
        "byteStart": {
          "type": "integer",
          "description": "The starting byte of the range.",
          "minimum": 0
        },
        "byteEnd": {
          "type": "integer",
          "description": "The ending byte of the range.",
          "minimum": 0
        }
      }
    },
    "deletedMessageView": {
      "type": "object",
      "required": [
        "id",
        "rev",
        "sender",
        "sentAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the deleted message."
        },
        "rev": {
          "type": "string",
          "description": "The revision ID of the deleted message."
        },
        "sender": {
          "$ref": "#/definitions/messageViewSender"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the message was sent."
        }
      }
    },
    "lastMessage": {
      "type": "object",
      "description": "Represents the last message in a conversation.",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the message."
        },
        "text": {
          "type": "string",
          "description": "The text content of the message."
        },
        "sender": {
          "type": "string",
          "description": "The identifier of the message sender."
        },
        "sentAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the message was sent."
        }
      }
    },
    "accountView": {
      "type": "object",
      "required": [
        "did",
        "handle",
        "indexedAt"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "relatedRecords": {
          "type": "array",
          "items": {}
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "invitedBy": {
          "$ref": "#/definitions/inviteCode"
        },
        "invites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inviteCode"
          }
        },
        "invitesDisabled": {
          "type": "boolean"
        },
        "emailConfirmedAt": {
          "type": "string",
          "format": "date-time"
        },
        "inviteNote": {
          "type": "string"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "threatSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threatSignature"
          }
        }
      }
    },
    "inviteCode": {
      "type": "object",
      "required": [
        "code",
        "available",
        "disabled",
        "forAccount",
        "createdBy",
        "createdAt",
        "uses"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "available": {
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "forAccount": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "uses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inviteCodeUse"
          }
        }
      }
    },
    "threatSignature": {
      "type": "object",
      "required": [
        "property",
        "value"
      ],
      "properties": {
        "property": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "inviteCodeUse": {
      "type": "object",
      "required": [
        "usedBy",
        "usedAt"
      ],
      "properties": {
        "usedBy": {
          "type": "string"
        },
        "usedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "statusAttr": {
      "type": "object",
      "required": [
        "applied"
      ],
      "properties": {
        "applied": {
          "type": "boolean"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "appPassword": {
      "type": "object",
      "required": [
        "name",
        "password",
        "createdAt"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "privileged": {
          "type": "boolean"
        }
      }
    },
    "describeServerLinks": {
      "type": "object",
      "properties": {
        "privacyPolicy": {
          "type": "string",
          "format": "uri"
        },
        "termsOfService": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "serviceConfig": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "viewerConfig": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "tools.ozone.team.defs#roleAdmin",
            "tools.ozone.team.defs#roleModerator",
            "tools.ozone.team.defs#roleTriage"
          ]
        }
      }
    },
    "describeServerContact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "starterPackViewBasic": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "record",
        "creator",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "record": {},
        "creator": {
          "$ref": "#/definitions/profileViewBasic"
        },
        "listItemCount": {
          "type": "integer",
          "minimum": 0
        },
        "joinedWeekCount": {
          "type": "integer",
          "minimum": 0
        },
        "joinedAllTimeCount": {
          "type": "integer",
          "minimum": 0
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "describeFeedGeneratorFeed": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "describeFeedGeneratorLinks": {
      "type": "object",
      "properties": {
        "privacyPolicy": {
          "type": "string"
        },
        "termsOfService": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Standard error response for failed requests.",
      "required": [
        "error",
        "message"
      ],
      "properties": {
        "error": {
          "type": "string",
          "enum": [
            "InvalidRequest",
            "ExpiredToken",
            "InvalidToken",
            "Unauthorized",
            "NotFound",
            "InternalServerError",
            "AuthMissing"
          ],
          "description": "Type of error encountered during the request."
        },
        "message": {
          "type": "string",
          "description": "Detailed error message."
        },
        "code": {
          "type": "integer",
          "description": "Optional error code, such as an HTTP status code."
        },
        "details": {
          "type": "string",
          "description": "Additional information about the error for debugging purposes."
        }
      }
    }
  }
}
