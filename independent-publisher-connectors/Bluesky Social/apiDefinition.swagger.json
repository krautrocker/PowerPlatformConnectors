{
  "swagger": "2.0",
  "info": {
    "title": "Bluesky Social",
    "description": "Specification for the Bluesky Social endpoints. Includes endpoints for social interaction, admin, chat, ATProto, and ozone.",
    "contact": {
      "name": "Dan Romano",
      "email": "dan.romano@swolcat.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    },
    "version": "1.0"
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://docs.bsky.app/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://example.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Social Media"
    }
  ],
  "host": "bsky.social",
  "basePath": "/xrpc",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Enter 'Bearer' followed by a space and your token."
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/xrpc/app.bsky.actor.getpreferences": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Getpreferences",
        "description": "Get private preferences attached to the current account.",
        "operationId": "Getpreferences",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "preferences"
              ],
              "properties": {
                "preferences": {
                  "$ref": "#/definitions/preferences"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.getProfile": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get Profile",
        "x-ms-summary": "Fetch a detailed profile of an actor.",
        "description": "Retrieve a detailed profile view of an actor using their handle or DID.",
        "operationId": "getProfile",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "Handle or DID of the account to fetch the profile of.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed profile fetched successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "profile": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getProfile",
                    "value-path": "profile",
                    "parameters": {
                      "actor": "{actor}"
                    }
                  },
                  "description": "Detailed profile information of the actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.getProfiles": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Get Profiles",
        "description": "Get detailed profile views of multiple actors.",
        "operationId": "getProfiles",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actors",
            "in": "query",
            "required": true,
            "description": "Actor Identifier",
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 25,
            "x-ms-summary": "List of actor identifiers"
          }
        ],
        "responses": {
          "200": {
            "description": "Profiles retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "profiles"
              ],
              "properties": {
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileViewDetailed"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.getSuggestions": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Get Suggested Actors",
        "x-ms-summary": "Get Suggested Actors",
        "description": "Get a list of suggested actors.",
        "operationId": "GetSuggestions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit",
            "description": "The maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Cursor",
            "description": "A cursor for pagination.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "actors"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "actors": {
                  "type": "array",
                  "description": "List of suggested actor profiles.",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.searchActors": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Find actors (profiles) matching search criteria",
        "x-ms-summary": "Search Actors",
        "description": "Find actors (profiles) matching search criteria.",
        "operationId": "SearchActors",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "x-ms-summary": "Search Query",
            "description": "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "x-ms-summary": "Result Limit",
            "description": "The maximum number of actors to return.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 25
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor for pagination to fetch the next set of results.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "actors"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "actors": {
                  "type": "array",
                  "description": "List of matching actor profiles.",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.searchActorsTypeahead": {
      "get": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Search Actors for Typeahead",
        "description": "Retrieve account suggestions for typeahead search.",
        "x-ms-summary": "Retrieve account suggestions for typeahead search.",
        "operationId": "SearchActorsTypeahead",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search term used for typeahead results.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Term"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved typeahead suggestions for actors.",
            "schema": {
              "type": "object",
              "properties": {
                "actors": {
                  "type": "array",
                  "description": "An array of minimal actor details matching the typeahead search.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "did": {
                        "type": "string",
                        "description": "Decentralized Identifier (DID) of the actor."
                      },
                      "handle": {
                        "type": "string",
                        "description": "Unique handle of the actor."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Display name of the actor."
                      },
                      "avatar": {
                        "type": "string",
                        "format": "uri",
                        "description": "URI of the actor's avatar image."
                      },
                      "associated": {
                        "type": "object",
                        "description": "Associated metadata for the actor.",
                        "properties": {
                          "lists": {
                            "type": "integer",
                            "description": "Number of lists the actor is part of."
                          },
                          "feedgens": {
                            "type": "integer",
                            "description": "Number of feed generators associated with the actor."
                          },
                          "starterPacks": {
                            "type": "integer",
                            "description": "Number of starter packs associated with the actor."
                          },
                          "labeler": {
                            "type": "boolean",
                            "description": "Indicates if the actor is a labeler."
                          },
                          "chat": {
                            "type": "object",
                            "description": "Chat preferences for the actor.",
                            "properties": {
                              "allowIncoming": {
                                "type": "string",
                                "description": "Specifies if incoming chats are allowed."
                              }
                            }
                          }
                        }
                      },
                      "viewer": {
                        "type": "object",
                        "description": "Viewer-specific metadata for the actor.",
                        "properties": {
                          "muted": {
                            "type": "boolean",
                            "description": "Indicates if the actor is muted by the viewer."
                          },
                          "mutedByList": {
                            "$ref": "#/definitions/MutedByList"
                          },
                          "blockedBy": {
                            "type": "boolean",
                            "description": "Indicates if the actor is blocked by the viewer."
                          },
                          "blocking": {
                            "type": "string",
                            "description": "Details of the block, if applicable."
                          },
                          "blockingByList": {
                            "$ref": "#/definitions/BlockingByList"
                          },
                          "following": {
                            "type": "string",
                            "description": "Indicates if the viewer is following the actor."
                          },
                          "followedBy": {
                            "type": "string",
                            "description": "Indicates if the actor is following the viewer."
                          },
                          "knownFollowers": {
                            "type": "object",
                            "description": "Known followers of the actor.",
                            "properties": {
                              "count": {
                                "type": "integer",
                                "description": "Total number of known followers."
                              },
                              "followers": {
                                "type": "array",
                                "description": "List of known followers.",
                                "items": {
                                  "$ref": "#/definitions/profileView"
                                }
                              }
                            }
                          }
                        }
                      },
                      "labels": {
                        "type": "array",
                        "description": "Labels associated with the actor.",
                        "items": {
                          "$ref": "#/definitions/Label"
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp of the actor's profile creation."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.describeFeedGenerator": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get information about a feed",
        "x-ms-summary": "Get information about a feed generator",
        "description": "Get information about a feed generator.",
        "operationId": "DescribeFeedGenerator",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "feeds"
              ],
              "properties": {
                "did": {
                  "type": "string"
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/describeFeedGeneratorFeed"
                  }
                },
                "links": {
                  "$ref": "#/definitions/describeFeedGeneratorLinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getActorFeeds": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Actor Feeds",
        "x-ms-summary": "Fetch feeds created by an actor.",
        "description": "Get a list of feeds created by the actor.",
        "operationId": "getActorFeeds",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose feeds are to be retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of feeds to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Feeds retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getActorFeeds",
                      "value-path": "feeds",
                      "parameters": {
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "List of feeds created by the actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getActorLikes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get a list of posts liked by an actor",
        "x-ms-summary": "Get a list of posts liked by an actor",
        "description": "Get a list of posts liked by an actor.",
        "operationId": "GetActorLikes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "required": true,
            "x-ms-summary": "Actor Identifier",
            "description": "Identifier of the actor whose likes are being retrieved.",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "x-ms-summary": "Result Limit",
            "description": "Maximum number of results to return.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor for pagination.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "feed"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next page of results."
                },
                "feed": {
                  "type": "array",
                  "description": "List of posts liked by the actor.",
                  "items": {
                    "$ref": "#/definitions/feedViewPost"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "BlockedActor",
                    "BlockedByActor"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getAuthorFeed": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Author Feed",
        "description": "Get a view of an actor's 'author feed.'",
        "operationId": "GetAuthorFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The identifier of the actor whose author feed to fetch.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Actor identifier"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to fetch.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for fetching the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination curose"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Combinations of post/repost types to include in response.",
            "required": false,
            "type": "string",
            "enum": [
              "posts_with_replies",
              "posts_no_replies",
              "posts_with_media",
              "posts_and_author_threads"
            ],
            "default": "posts_with_replies",
            "x-ms-summary": "Filter criteria"
          },
          {
            "name": "includePins",
            "in": "query",
            "description": "Whether to include pinned posts in the response.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Include pinned posts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the author's feed.",
            "schema": {
              "type": "object",
              "required": [
                "feed"
              ],
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/feedViewPost"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or blocked actor.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "BlockedActor",
                    "BlockedByActor"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeed": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Feed",
        "x-ms-summary": "Retrieve a hydrated feed.",
        "description": "Get a hydrated feed from an actor's selected feed generator.",
        "operationId": "getFeed",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "description": "The URI of the feed generator.",
            "x-ms-summary": "Feed Generator URI",
            "required": true,
            "type": "string"
          },
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor requesting the feed.",
            "x-ms-summary": "Actor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of posts to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Feed retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getFeed",
                      "value-path": "feed",
                      "parameters": {
                        "feed": "{feed}",
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "Array of posts in the feed."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedGenerator": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Feed Generator Information",
        "x-ms-summary": "Retrieve details about a feed generator.",
        "description": "Get information about a feed generator.",
        "operationId": "GetFeedGenerator",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "x-ms-summary": "Feed Generator AT-URI",
            "description": "AT-URI of the feed generator record.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Feed generator details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "view",
                "isOnline",
                "isValid"
              ],
              "properties": {
                "view": {
                  "$ref": "#/definitions/generatorView"
                },
                "isOnline": {
                  "type": "boolean",
                  "description": "Indicates whether the feed generator service has been online recently."
                },
                "isValid": {
                  "type": "boolean",
                  "description": "Indicates whether the feed generator service is compatible with the record declaration."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedGenerators": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Feed Generators Information",
        "x-ms-summary": "Retrieve details about multiple feed generators.",
        "description": "Get information about a list of feed generators.",
        "operationId": "GetFeedGenerators",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feeds",
            "in": "query",
            "x-ms-summary": "List of Feed Generator AT-URIs",
            "description": "A list of AT-URIs representing the feed generators to retrieve information for.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feed generator details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "feeds"
              ],
              "properties": {
                "feeds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/generatorView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getFeedSkeleton": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Feed Skeleton",
        "x-ms-summary": "Retrieve a skeleton of a feed from a generator.",
        "description": "Get a skeleton of a feed provided by a feed generator.",
        "operationId": "GetFeedSkeleton",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "feed",
            "in": "query",
            "description": "Reference to feed generator record describing the specific feed being requested.",
            "x-ms-summary": "Feed generator reference.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Number of results to retrieve.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "description": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination cursor.",
            "required": false,
            "type": "string",
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "feed"
              ],
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/skeletonFeedPost"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "UnknownFeed"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getLikes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Likes",
        "x-ms-summary": "Get like records referencing a subject.",
        "description": "Get like records which reference a subject (by AT-URI and CID).",
        "operationId": "GetLikes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "description": "AT-URI of the subject (e.g., a post record).",
            "x-ms-summary": "AT-URI of the subject.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "description": "CID of the subject record (specific version of record), to filter likes.",
            "x-ms-summary": "CID of the subject record.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit number of results.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "description": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination cursor.",
            "required": false,
            "type": "string",
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "uri",
                "likes"
              ],
              "properties": {
                "uri": {
                  "type": "string"
                },
                "cid": {
                  "type": "string"
                },
                "cursor": {
                  "type": "string"
                },
                "likes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/getLikesLike"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getListFeed": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get List Feed",
        "x-ms-summary": "Get List Feed",
        "description": "Get a feed of recent posts from a list.",
        "operationId": "GetListFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "x-ms-summary": "List Reference",
            "description": "Reference (AT-URI) to the list record.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Result Limit",
            "description": "Maximum number of posts to retrieve.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Optional pagination mechanism.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "feed"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/feedViewPost"
                  },
                  "description": "Array of posts in the feed."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "UnknownList"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getPosts": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Posts",
        "x-ms-summary": "Retrieve post views for specified posts.",
        "description": "Gets post views for a specified list of posts.",
        "operationId": "GetPosts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uris",
            "in": "query",
            "description": "List of post AT-URIs to return hydrated views for.",
            "x-ms-summary": "Post AT-URIs",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 25
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "posts"
              ],
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getPostThread": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Post Thread",
        "x-ms-summary": "Retrieve posts in a thread.",
        "description": "Get posts in a thread.",
        "operationId": "GetPostThread",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "x-ms-summary": "Post AT-URI",
            "description": "Reference (AT-URI) to post record.",
            "required": true,
            "type": "string"
          },
          {
            "name": "depth",
            "in": "query",
            "x-ms-summary": "Reply Depth",
            "description": "How many levels of reply depth should be included in response.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 1000,
            "default": 6
          },
          {
            "name": "parentHeight",
            "in": "query",
            "x-ms-summary": "Parent Post Levels",
            "description": "How many levels of parent (and grandparent, etc) post to include.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 1000,
            "default": 80
          }
        ],
        "responses": {
          "200": {
            "description": "Thread details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "thread"
              ],
              "properties": {
                "thread": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "found",
                        "notFound",
                        "blocked"
                      ]
                    }
                  },
                  "description": "Thread details for the requested post."
                },
                "threadgate": {
                  "$ref": "#/definitions/threadgateView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "NotFound"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getQuotes": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Quotes",
        "x-ms-summary": "Get Quotes",
        "description": "Get a list of quotes for a given post.",
        "operationId": "GetQuotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "x-ms-summary": "Post Reference URI",
            "description": "Reference (AT-URI) of the post record.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "x-ms-summary": "Specific Version CID",
            "description": "If supplied, filters to quotes of specific version (by CID) of the post record.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Result Limit",
            "description": "Maximum number of quotes to retrieve.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Optional pagination mechanism.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "uri",
                "posts"
              ],
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "Reference (AT-URI) of the post record."
                },
                "cid": {
                  "type": "string",
                  "description": "Specific version (CID) of the post record."
                },
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "posts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postView"
                  },
                  "description": "Array of post views for quotes."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getRepostedBy": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Get Reposted By",
        "x-ms-summary": "Get Reposted By",
        "description": "Get a list of reposts for a given post.",
        "operationId": "GetRepostedBy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "x-ms-summary": "Post Reference URI",
            "description": "Reference (AT-URI) of the post record.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "x-ms-summary": "Specific Version CID",
            "description": "If supplied, filters to reposts of specific version (by CID) of the post record.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Result Limit",
            "description": "Maximum number of reposts to retrieve.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Optional pagination mechanism.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "uri",
                "repostedBy"
              ],
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "Reference (AT-URI) of the post record."
                },
                "cid": {
                  "type": "string",
                  "description": "Specific version (CID) of the post record."
                },
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "repostedBy": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  },
                  "description": "Array of profiles who reposted the post."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getSuggestedFeeds": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Suggested Feeds",
        "x-ms-summary": "Fetch suggested feeds for the account.",
        "description": "Retrieve a list of suggested feeds for the requesting account.",
        "operationId": "getSuggestedFeeds",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of suggested feeds to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggested feeds retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feeds": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getSuggestedFeeds",
                      "value-path": "feeds"
                    }
                  },
                  "description": "List of suggested feeds for the account."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.getTimeline": {
      "get": {
        "tags": [
          "feed"
        ],
        "summary": "Get Timeline",
        "x-ms-summary": "Retrieve home timeline.",
        "description": "Get a view of the requesting account's home timeline.",
        "operationId": "getTimeline",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "algorithm",
            "in": "query",
            "description": "Variant 'algorithm' for the timeline.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Algorithm variant"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of posts to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Timeline retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "feed": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getTimeline",
                      "value-path": "feed"
                    }
                  },
                  "description": "Array of posts in the timeline."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.searchPosts": {
      "get": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Search Posts",
        "x-ms-summary": "Find posts matching search criteria.",
        "description": "Find posts matching search criteria, returning views of those posts.",
        "operationId": "SearchPosts",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "x-ms-summary": "Search Query",
            "description": "Search query string.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "x-ms-summary": "Sort Order",
            "description": "Specifies the ranking order of results.",
            "required": false,
            "type": "string",
            "default": "latest",
            "enum": [
              "top",
              "latest"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "x-ms-summary": "Since Datetime",
            "description": "Filter results for posts after the indicated datetime (inclusive).",
            "required": false,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "x-ms-summary": "Until Datetime",
            "description": "Filter results for posts before the indicated datetime (not inclusive).",
            "required": false,
            "type": "string"
          },
          {
            "name": "mentions",
            "in": "query",
            "x-ms-summary": "Mentions Account",
            "description": "Filter to posts which mention the given account.",
            "required": false,
            "type": "string"
          },
          {
            "name": "author",
            "in": "query",
            "x-ms-summary": "Author Account",
            "description": "Filter to posts by the given account. Handles are resolved to DID before query-time.",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "x-ms-summary": "Language Filter",
            "description": "Filter to posts in the given language.",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "x-ms-summary": "Domain Filter",
            "description": "Filter to posts with URLs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "url",
            "in": "query",
            "x-ms-summary": "URL Filter",
            "description": "Filter to posts with links.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "x-ms-summary": "Hashtag Filter",
            "description": "Filter to posts with the given tag (hashtag).",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 640
            }
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Result Limit",
            "description": "Maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 25
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Optional pagination mechanism.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Posts retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "posts"
              ],
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "hitsTotal": {
                  "type": "integer"
                },
                "posts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "BadQueryString"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.feed.sendInteractions": {
      "post": {
        "tags": [
          "app.bsky.feed"
        ],
        "summary": "Send Interactions",
        "x-ms-summary": "Send information about interactions.",
        "description": "Send information about interactions.",
        "operationId": "SendInteractions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "x-ms-summary": "Interactions Payload",
            "description": "Payload containing interactions to send.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "interactions"
              ],
              "properties": {
                "interactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/interaction"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interactions sent successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "_unknown_": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getActorStarterPacks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get a list of starter packs created by the actor",
        "x-ms-summary": "Get Actor Starter Packs",
        "description": "Get a list of starter packs created by the actor.",
        "operationId": "GetActorStarterPacks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "required": true,
            "x-ms-summary": "Actor Identifier",
            "description": "The actor identifier for which to retrieve starter packs.",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "x-ms-summary": "Result Limit",
            "description": "The maximum number of starter packs to return.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor for pagination to fetch the next set of results.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "starterPacks"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "starterPacks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/starterPackViewBasic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getFollowers": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Followers",
        "x-ms-summary": "Retrieve accounts following a specified actor.",
        "description": "Enumerate accounts that follow a specified actor.",
        "operationId": "getFollowers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose followers are being retrieved.",
            "required": true,
            "x-ms-summary": "Actor Identifier",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of followers to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Followers retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "object",
                  "description": "Profile details of the actor whose followers are retrieved.",
                  "x-ms-dynamic-schema": {
                    "operationId": "getFollowers",
                    "value-path": "subject",
                    "parameters": {
                      "actor": "{actor}"
                    }
                  }
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "followers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-ms-dynamic-schema": {
                      "operationId": "getFollowers",
                      "value-path": "followers",
                      "parameters": {
                        "actor": "{actor}"
                      }
                    }
                  },
                  "description": "List of accounts following the specified actor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getFollows": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Follows",
        "x-ms-summary": "Retrieve accounts followed by a specified actor.",
        "description": "Enumerates accounts that a specified actor follows.",
        "operationId": "getFollows",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose follows are being retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to return (default: 50, max: 100).",
            "x-ms-summary": "Maximum Accounts to Retrieve",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "x-ms-summary": "Pagination Cursor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Follows retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getFollows",
                    "parameters": {
                      "actor": "{actor}"
                    },
                    "value-path": "subject"
                  },
                  "description": "Profile details of the actor whose follows are retrieved."
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "follows": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getFollows",
                      "parameters": {
                        "actor": "{actor}"
                      },
                      "value-path": "follows"
                    },
                    "description": "List of accounts followed by the specified actor."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getKnownFollowers": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Known Followers",
        "x-ms-summary": "Retrieve known followers of an account.",
        "description": "Retrieve followers for a specific account that are also followed by the viewer.",
        "operationId": "getKnownFollowers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "description": "The handle or DID of the actor whose followers are being retrieved.",
            "x-ms-summary": "Actor Identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of followers to return (default: 50, max: 100).",
            "x-ms-summary": "Followers Limit",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "x-ms-summary": "Pagination Cursor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Known followers retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "object",
                  "x-ms-dynamic-schema": {
                    "operationId": "getKnownFollowers",
                    "parameters": {
                      "actor": "{actor}"
                    },
                    "value-path": "subject"
                  },
                  "description": "Profile details of the subject actor."
                },
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "followers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileViewBasic"
                  },
                  "description": "List of followers who are also followed by the viewer."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getList": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get List View",
        "x-ms-summary": "Retrieve a view with additional context of a specific list.",
        "description": "Gets a 'view' (with additional context) of a specified list.",
        "operationId": "GetList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "x-ms-summary": "List Reference",
            "description": "Reference (AT-URI) of the list record to hydrate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "The maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Cursor for Pagination",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "list",
                "items"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "list": {
                  "$ref": "#/definitions/listView"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/listItemView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getListBlocks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Blocked Lists",
        "x-ms-summary": "Retrieve moderation lists blocked by the requesting account.",
        "description": "Get mod lists that the requesting account (actor) is blocking.",
        "operationId": "GetListBlocks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "Maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "lists"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "lists": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/listView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getListMutes": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Muted Lists",
        "x-ms-summary": "Retrieve moderation lists muted by the requesting account.",
        "description": "Get mod lists that the requesting account currently has muted.",
        "operationId": "GetListMutes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "Maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "lists"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "lists": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/listView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getLists": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Lists",
        "x-ms-summary": "Retrieve the lists created by a specified account.",
        "description": "Enumerates the lists created by a specified account.",
        "operationId": "GetLists",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "x-ms-summary": "Account Identifier",
            "description": "The account (actor) to enumerate lists from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "Maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "lists"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "lists": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/listView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getMutes": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Mutes",
        "x-ms-summary": "Retrieve muted accounts for the requesting account.",
        "description": "Enumerates accounts that the requesting account currently has muted.",
        "operationId": "GetMutes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "Maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Pagination Cursor",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "mutes"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "mutes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getRelationships": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get public relationships between one account, and a list of other accounts",
        "x-ms-summary": "Get Relationships",
        "description": "Get public relationships between one account, and a list of other accounts.",
        "operationId": "GetRelationships",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "required": true,
            "x-ms-summary": "Primary Account",
            "description": "Primary account requesting relationships for.",
            "type": "string"
          },
          {
            "name": "others",
            "in": "query",
            "required": false,
            "x-ms-summary": "Other Accounts",
            "description": "List of 'other' accounts to be related back to the primary.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "relationships"
              ],
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "The DID of the primary account."
                },
                "relationships": {
                  "type": "array",
                  "description": "List of relationships between the actor and other accounts.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "relationship",
                          "notFoundActor"
                        ],
                        "description": "The type of relationship or status."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getStarterPack": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Starter Pack",
        "x-ms-summary": "Retrieve a view of a starter pack.",
        "description": "Gets a view of a starter pack based on the provided reference (AT-URI).",
        "operationId": "getStarterPack",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "starterPack",
            "in": "query",
            "description": "Reference (AT-URI) of the starter pack record.",
            "x-ms-summary": "Starter Pack Identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Starter pack retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "starterPack": {
                  "x-ms-dynamic-schema": {
                    "operationId": "getStarterPack",
                    "parameters": {
                      "starterPack": "{starterPack}"
                    },
                    "value-path": "starterPack"
                  },
                  "description": "View details of the starter pack."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getStarterPacks": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Get Starter Packs",
        "x-ms-summary": "Retrieve views for a list of starter packs.",
        "description": "Get detailed views for a list of starter packs based on the provided URIs.",
        "operationId": "getStarterPacks",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uris",
            "in": "query",
            "description": "List of AT-URIs for the starter packs (maximum 25 items).",
            "x-ms-summary": "Starter Pack URIs",
            "required": true,
            "type": "string",
            "collectionFormat": "csv",
            "x-ms-parameter-location": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Starter packs retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "starterPacks": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getStarterPacks",
                      "parameters": {
                        "uris": "{uris}"
                      },
                      "value-path": "starterPacks"
                    },
                    "description": "Array of starter pack views."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getSuggestedFollowsByActor": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Suggested Follows by Actor",
        "x-ms-summary": "Get Suggested Follows by Actor",
        "description": "Enumerates follows similar to a given account.",
        "operationId": "GetSuggestedFollowsByActor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "x-ms-summary": "Actor",
            "description": "The account identifier for which similar follows are suggested.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "suggestions"
              ],
              "properties": {
                "suggestions": {
                  "type": "array",
                  "description": "List of suggested profiles to follow.",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  }
                },
                "isFallback": {
                  "type": "boolean",
                  "description": "Indicates if the results are fallback generic suggestions."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteActor": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute Actor",
        "x-ms-summary": "Create a mute relationship for a specified account.",
        "description": "Creates a mute relationship for the specified account.",
        "operationId": "MuteActor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload to specify the account to mute.",
            "schema": {
              "type": "object",
              "required": [
                "actor"
              ],
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Identifier of the account to be muted.",
                  "x-ms-summary": "Account Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The mute relationship was successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteActorList": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute Actor List",
        "x-ms-summary": "Create a mute relationship for a specified list of accounts.",
        "description": "Creates a mute relationship for the specified list of accounts.",
        "operationId": "MuteActorList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload specifying the list of accounts to mute.",
            "schema": {
              "type": "object",
              "required": [
                "list"
              ],
              "properties": {
                "list": {
                  "type": "string",
                  "description": "URI reference to the list of accounts to be muted.",
                  "x-ms-summary": "List URI"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The mute relationship was successfully created for the list.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.muteThread": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Mute Thread",
        "x-ms-summary": "Mute a thread to prevent notifications from it and its children.",
        "description": "Mutes a thread preventing notifications from the thread and any of its children.",
        "operationId": "MuteThread",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload specifying the root of the thread to mute.",
            "schema": {
              "type": "object",
              "required": [
                "root"
              ],
              "properties": {
                "root": {
                  "type": "string",
                  "description": "URI reference to the root of the thread to mute.",
                  "x-ms-summary": "Root URI"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The thread was successfully muted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteActor": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute Actor",
        "x-ms-summary": "Unmute the specified account.",
        "description": "Unmutes the specified account.",
        "operationId": "UnmuteActor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload specifying the actor to unmute.",
            "schema": {
              "type": "object",
              "required": [
                "actor"
              ],
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "The identifier (AT-identifier) of the actor to unmute.",
                  "x-ms-summary": "Actor ID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The actor was successfully unmuted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteActorList": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute Actor List",
        "x-ms-summary": "Unmute the specified list of accounts.",
        "description": "Unmutes the specified list of accounts.",
        "operationId": "UnmuteActorList",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload specifying the list of accounts to unmute.",
            "schema": {
              "type": "object",
              "required": [
                "list"
              ],
              "properties": {
                "list": {
                  "type": "string",
                  "description": "The URI of the list to unmute.",
                  "x-ms-summary": "List URI"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The list of accounts was successfully unmuted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.unmuteThread": {
      "post": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Unmute Thread",
        "x-ms-summary": "Unmute the specified thread.",
        "description": "Unmutes the specified thread.",
        "operationId": "UnmuteThread",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload specifying the thread to unmute.",
            "schema": {
              "type": "object",
              "required": [
                "root"
              ],
              "properties": {
                "root": {
                  "type": "string",
                  "description": "The URI of the root thread to unmute.",
                  "x-ms-summary": "Root Thread URI"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The thread was successfully unmuted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.labeler.getServices": {
      "get": {
        "tags": [
          "app.bsky.labeler"
        ],
        "summary": "Get information about a list of labeler services",
        "description": "Get information about a list of labeler services.",
        "x-ms-summary": "Get information about a list of labeler services",
        "operationId": "GetServices",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dids",
            "in": "query",
            "required": true,
            "x-ms-summary": "DIDs",
            "description": "DIDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "detailed",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Detailed",
            "description": "Detailed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "views"
              ],
              "properties": {
                "views": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/labelerView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.getUnreadCount": {
      "get": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Count the number of unread notifications for the requesting account",
        "description": "Count the number of unread notifications for the requesting account.",
        "operationId": "GetUnreadCount",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "priority",
            "in": "query",
            "type": "boolean",
            "required": false,
            "description": "Specifies if only high-priority notifications should be counted.",
            "x-ms-summary": "Priority"
          },
          {
            "name": "seenAt",
            "in": "query",
            "type": "string",
            "format": "date-time",
            "required": false,
            "description": "Count notifications seen after the provided timestamp.",
            "x-ms-summary": "Seen at"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The number of unread notifications."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.listNotifications": {
      "get": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "List Notifications",
        "x-ms-summary": "List Notifications",
        "description": "Enumerate notifications for the requesting account.",
        "operationId": "ListNotifications",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit",
            "description": "The maximum number of notifications to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "priority",
            "in": "query",
            "x-ms-summary": "Priority",
            "description": "Filter notifications by priority status.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Cursor",
            "description": "Pagination cursor for retrieving the next set of notifications.",
            "required": false,
            "type": "string"
          },
          {
            "name": "seenAt",
            "in": "query",
            "x-ms-summary": "Seen At",
            "description": "Filter notifications seen at or after the specified date-time.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "notifications"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Pagination cursor for the next set of results."
                },
                "notifications": {
                  "type": "array",
                  "description": "List of notifications.",
                  "items": {
                    "$ref": "#/definitions/notification"
                  }
                },
                "priority": {
                  "type": "boolean",
                  "description": "Indicates if priority notifications are included."
                },
                "seenAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp indicating when notifications were last seen."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.putPreferences": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Set Notification Preferences",
        "x-ms-summary": "Set Notification Preferences",
        "description": "Set notification-related preferences for an account.",
        "operationId": "PutNotificationPreferences",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "x-ms-summary": "Notification Preferences Body",
            "description": "The notification preferences to set for the account.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "priority"
              ],
              "properties": {
                "priority": {
                  "type": "boolean",
                  "description": "Indicates if priority notifications should be enabled."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional success message."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.registerPush": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Register to receive push notifications",
        "x-ms-summary": "Register to receive push notifications",
        "description": "Register to receive push notifications.",
        "operationId": "RegisterPush",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "serviceDid",
                "token",
                "platform",
                "appId"
              ],
              "properties": {
                "serviceDid": {
                  "type": "string",
                  "description": "The DID of the push notification service."
                },
                "token": {
                  "type": "string",
                  "description": "Push notification token."
                },
                "platform": {
                  "type": "string",
                  "enum": [
                    "ios",
                    "android",
                    "web"
                  ],
                  "description": "The platform for the push notification."
                },
                "appId": {
                  "type": "string",
                  "description": "Identifier for the app requesting push notifications."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the registration was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.notification.updateSeen": {
      "post": {
        "tags": [
          "app.bsky.notification"
        ],
        "summary": "Notify server that the requesting account has seen notifications",
        "description": "Notify server that the requesting account has seen notifications.",
        "operationId": "UpdateSeen",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "seenAt"
              ],
              "properties": {
                "seenAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp indicating when notifications were seen."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the operation was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.getjobStatus": {
      "get": {
        "tags": [
          "app.bsky.video"
        ],
        "summary": "Get status details for a video processing job",
        "x-ms-summary": "Get status details for a video processing job",
        "description": "Get status details for a video processing job.",
        "operationId": "GetjobStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "The ID of the video processing job to retrieve the status for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "jobStatus"
              ],
              "properties": {
                "jobStatus": {
                  "$ref": "#/definitions/jobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.getUploadLimits": {
      "get": {
        "tags": [
          "app.bsky.video"
        ],
        "summary": "Get video upload limits for the authenticated user",
        "x-ms-summary": "Get video upload limits for the authenticated user.",
        "description": "Get video upload limits for the authenticated user.",
        "operationId": "GetUploadLimits",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "canUpload"
              ],
              "properties": {
                "canUpload": {
                  "type": "boolean",
                  "description": "Indicates if the user can upload videos."
                },
                "remainingDailyVideos": {
                  "type": "integer",
                  "description": "Number of videos the user can still upload today."
                },
                "remainingDailyBytes": {
                  "type": "integer",
                  "description": "Remaining data size in bytes available for uploads today."
                },
                "message": {
                  "type": "string",
                  "description": "Additional information regarding the upload limits."
                },
                "error": {
                  "type": "string",
                  "description": "Error message if applicable."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.video.uploadVideo": {
      "post": {
        "tags": [
          "video"
        ],
        "summary": "Upload Video",
        "x-ms-summary": "Upload and process a video on the PDS.",
        "description": "Upload a video to be processed and stored on the PDS.",
        "operationId": "uploadVideo",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Binary video file to be uploaded and processed.",
            "required": true,
            "type": "file",
            "x-ms-summary": "Video file"
          }
        ],
        "responses": {
          "200": {
            "description": "Video uploaded and processing job created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "jobStatus": {
                  "x-ms-dynamic-schema": {
                    "operationId": "uploadVideo",
                    "parameters": {
                      "file": {
                        "type": "file",
                        "description": "The uploaded video file."
                      }
                    },
                    "value-path": "jobStatus"
                  },
                  "description": "The status of the video processing job."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.actor.deleteAccount": {
      "post": {
        "tags": [
          "chat.bsky.actor"
        ],
        "summary": "Delete Account",
        "description": "Delete an account.",
        "operationId": "actorDeleteAccount",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "_unknown_": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.actor.putPreferences": {
      "post": {
        "tags": [
          "app.bsky.actor"
        ],
        "summary": "Set Account Preferences",
        "x-ms-summary": "Set Account Preferences",
        "description": "Set the private preferences attached to the account.",
        "operationId": "PutPreferences",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "x-ms-summary": "Preferences Payload",
            "description": "The preferences to attach to the account.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "preferences"
              ],
              "properties": {
                "preferences": {
                  "$ref": "#/definitions/preferences"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional success message."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.actor.exportAccountData": {
      "get": {
        "tags": [
          "chat.bsky.actor"
        ],
        "summary": "Export Account Data",
        "description": "Export account data.",
        "operationId": "actorExportAccountData",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account data exported successfully.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.deleteMessageForSelf": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Delete Message for Self",
        "x-ms-summary": "Delete message for self.",
        "description": "Delete a message for the user who sent it.",
        "operationId": "deleteMessageForSelf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the message to be deleted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "messageId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation containing the message to be deleted."
                },
                "messageId": {
                  "type": "string",
                  "description": "The ID of the message to be deleted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully for the user.",
            "schema": {
              "$ref": "#/definitions/deletedMessageView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getConvo": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Conversation",
        "x-ms-summary": "Retrieve a specific conversation.",
        "description": "Get a conversation based on the provided conversation ID.",
        "operationId": "getConvo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "description": "The ID of the conversation to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getConvoForMembers": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Convo for Members",
        "x-ms-summary": "Retrieve a conversation for specific members.",
        "description": "Get a conversation for one or many members.",
        "operationId": "getConvoForMembers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "members",
            "in": "query",
            "description": "List of DID identifiers for the members of the conversation.",
            "x-ms-summary": "Members DID Identifiers",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getLog": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Log",
        "x-ms-summary": "Retrieve a conversation log.",
        "description": "Retrieve the log of actions and messages in a conversation.",
        "operationId": "getLog",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of logs.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Log retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "logs"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination.",
                  "x-ms-summary": "Pagination Cursor"
                },
                "logs": {
                  "type": "array",
                  "description": "Array of log events.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of log event."
                      },
                      "event": {
                        "type": "object",
                        "description": "Details about the event.",
                        "x-ms-dynamic-schema": {
                          "operationId": "getLog",
                          "value-path": "logs"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.getMessages": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Get Messages",
        "x-ms-summary": "Retrieve messages in a conversation.",
        "description": "Get a list of messages from a specific conversation.",
        "operationId": "getMessages",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "description": "The ID of the conversation to retrieve messages from.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Conversation ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of messages to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of messages.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "x-ms-dynamic-schema": {
                      "operationId": "getMessages",
                      "value-path": "messages",
                      "parameters": {
                        "convoId": "{convoId}"
                      }
                    },
                    "description": "List of messages in the conversation."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.leaveConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Leave Conversation",
        "x-ms-summary": "Leave a conversation.",
        "description": "Leave a conversation by specifying its ID.",
        "operationId": "leaveConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the conversation to leave.",
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to leave."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully left the conversation.",
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "rev"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation that was left."
                },
                "rev": {
                  "type": "string",
                  "description": "The revision identifier of the conversation."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.listConvos": {
      "get": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "List Conversations",
        "x-ms-summary": "Retrieve a list of conversations.",
        "description": "List conversations.",
        "operationId": "listConvos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of conversations to return (default: 50, max: 100).",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Pagination Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor for retrieving the next set of results.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "convos": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the conversation."
                      },
                      "rev": {
                        "type": "string",
                        "description": "The revision identifier of the conversation."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/profileViewBasic"
                        },
                        "description": "List of members in the conversation."
                      },
                      "lastMessage": {
                        "$ref": "#/definitions/lastMessage"
                      },
                      "muted": {
                        "type": "boolean",
                        "description": "Indicates whether the conversation is muted."
                      },
                      "opened": {
                        "type": "boolean",
                        "description": "Indicates whether the conversation has been opened."
                      },
                      "unreadCount": {
                        "type": "integer",
                        "description": "The count of unread messages in the conversation."
                      }
                    }
                  }
                }
              }
            },
            "x-ms-summary": "Successful response containing a list of conversations."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            },
            "x-ms-summary": "Invalid request parameters."
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            },
            "x-ms-summary": "Unauthorized access - missing or invalid token."
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.muteConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Mute Conversation",
        "x-ms-summary": "Mute a conversation.",
        "description": "Mute a conversation.",
        "operationId": "muteConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the conversation to be muted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to be muted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation muted successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.sendMessage": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Send Message",
        "x-ms-summary": "Send a single message in a conversation.",
        "description": "Send a single message to a specific conversation.",
        "operationId": "sendMessage",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The conversation ID and the message to be sent.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId",
                "message"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation."
                },
                "message": {
                  "$ref": "#/definitions/messageInput"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message sent successfully.",
            "schema": {
              "$ref": "#/definitions/messageView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createSession": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Authentication Session",
        "x-ms-summary": "Start a user authentication session.",
        "description": "Create an authentication session for a user by providing their identifier and password.",
        "operationId": "createSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request payload containing user credentials.",
            "schema": {
              "type": "object",
              "required": [
                "identifier",
                "password"
              ],
              "properties": {
                "identifier": {
                  "type": "string",
                  "description": "Handle or other identifier supported by the server for the authenticating user.",
                  "x-ms-summary": "Username",
                  "x-ms-visibility": "important"
                },
                "password": {
                  "type": "string",
                  "description": "Password of the authenticating user.",
                  "x-ms-summary": "Password",
                  "x-ms-visibility": "important"
                },
                "authFactorToken": {
                  "type": "string",
                  "description": "Optional token for multi-factor authentication.",
                  "x-ms-summary": "Auth Factor Token"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "JWT access token."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "JWT refresh token."
                },
                "handle": {
                  "type": "string",
                  "description": "User's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the user."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "email": {
                  "type": "string",
                  "description": "Email address of the user."
                },
                "emailConfirmed": {
                  "type": "boolean",
                  "description": "Indicator if the email is confirmed."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Indicator if email is used for authentication."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the user account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.refreshSession": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Refresh Authentication Session",
        "x-ms-summary": "Refresh a session and renew tokens.",
        "description": "Refresh an authentication session to obtain a new access token and refresh token.",
        "operationId": "refreshSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The refresh token for renewing the session.",
            "schema": {
              "type": "object",
              "required": [
                "refreshJwt"
              ],
              "properties": {
                "refreshJwt": {
                  "type": "string",
                  "description": "The refresh token provided during session creation or previous refresh.",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "JWT access token."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "JWT refresh token."
                },
                "handle": {
                  "type": "string",
                  "description": "The user's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID)."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "Hosting status of the account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error type."
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error type."
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.sendMessageBatch": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Send Batch Messages",
        "x-ms-summary": "Send a batch of messages to a conversation.",
        "description": "Send a batch of messages to multiple conversations.",
        "operationId": "sendMessageBatch",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The batch of messages to be sent.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/batchItem"
                  },
                  "maxItems": 100,
                  "description": "Array of messages to be sent."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages sent successfully.",
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/messageView"
                  },
                  "description": "Array of messages that were sent."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.unmuteConvo": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Unmute Conversation",
        "x-ms-summary": "Unmute a conversation.",
        "description": "Unmute a conversation.",
        "operationId": "unmuteConvo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the conversation to be unmuted.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation to be unmuted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation unmuted successfully.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.convo.updateRead": {
      "post": {
        "tags": [
          "chat.bsky.convo"
        ],
        "summary": "Update Conversation Read Status",
        "x-ms-summary": "Mark a conversation item as read.",
        "description": "Update an item in a conversation to mark it as read.",
        "operationId": "updateRead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the conversation and item to update as read.",
            "schema": {
              "type": "object",
              "required": [
                "convoId"
              ],
              "properties": {
                "convoId": {
                  "type": "string",
                  "description": "The ID of the conversation."
                },
                "messageId": {
                  "type": "string",
                  "description": "The ID of the message to mark as read."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked the item as read.",
            "schema": {
              "type": "object",
              "required": [
                "convo"
              ],
              "properties": {
                "convo": {
                  "$ref": "#/definitions/convoView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.getActorMetadata": {
      "get": {
        "tags": [
          "moderation"
        ],
        "summary": "Get Actor Metadata",
        "x-ms-summary": "Retrieve metadata for a specific actor.",
        "description": "Fetch moderation-related metadata for an actor identified by their DID.",
        "operationId": "getActorMetadata",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The Decentralized Identifier (DID) of the actor.",
            "x-ms-summary": "DID"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "day",
                "month",
                "all"
              ],
              "properties": {
                "day": {
                  "$ref": "#/definitions/ActorMetadata"
                },
                "month": {
                  "$ref": "#/definitions/ActorMetadata"
                },
                "all": {
                  "$ref": "#/definitions/ActorMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.getMessageContext": {
      "get": {
        "tags": [
          "chat.bsky.moderation"
        ],
        "summary": "Get Message Context",
        "x-ms-summary": "Retrieve the context around a specific message.",
        "description": "Fetch surrounding messages from a conversation for moderation purposes.",
        "operationId": "getMessageContext",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "convoId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Conversation that the message is from.",
            "x-ms-summary": "Conversation Id"
          },
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the message.",
            "x-ms-summary": "Message Id"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 5,
            "description": "Number of messages to include before the specified message.",
            "x-ms-summary": "Number of messages to include before the specified message."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 5,
            "description": "Number of messages to include after the specified message.",
            "x-ms-summary": "Number of messages to include after the specified message."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the message context.",
            "schema": {
              "type": "object",
              "required": [
                "messages"
              ],
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/messageView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/chat.bsky.moderation.updateActorAccess": {
      "post": {
        "tags": [
          "chat.bsky.moderation"
        ],
        "summary": "Update Actor Access",
        "x-ms-summary": "Modify access permissions for an actor.",
        "description": "Update an actor's access permissions.",
        "operationId": "updateActorAccess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Access Update Request",
            "schema": {
              "type": "object",
              "required": [
                "actor",
                "allowAccess"
              ],
              "properties": {
                "actor": {
                  "type": "string",
                  "x-ms-summary": "Actor Identifier"
                },
                "allowAccess": {
                  "type": "boolean",
                  "x-ms-summary": "Allow Access"
                },
                "ref": {
                  "type": "string",
                  "x-ms-summary": "Reference ID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actor access updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the access update was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deleteAccount": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Delete Account",
        "description": "Delete an actor's account with a token and password.",
        "operationId": "serverDeleteAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload to delete an actor's account.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "password",
                "token"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the account to be deleted."
                },
                "password": {
                  "type": "string",
                  "description": "Password of the account."
                },
                "token": {
                  "type": "string",
                  "description": "Token associated with the account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the account deletion was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional success message."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.deleteAccount": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Delete Account",
        "x-ms-summary": "Delete a user account as an administrator.",
        "description": "Delete a user account as an administrator.",
        "operationId": "adminDeleteAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Account Deletion Request",
            "schema": {
              "type": "object",
              "required": [
                "did"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "x-ms-summary": "Decentralized Identifier (DID)"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the account was deleted successfully."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.disableInviteCodes": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Disable Invite Codes",
        "description": "Disable specific invite codes to prevent further usage.\n",
        "operationId": "DisableInviteCodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the invite codes to disable.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "inviteCodes": {
                  "type": "array",
                  "description": "A list of invite codes to disable.",
                  "items": {
                    "type": "string",
                    "example": "ABC123"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully disabled the invite codes.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or already disabled invite codes.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.enableAccountInvites": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Enable Account Invites",
        "x-ms-summary": "Re-enable an account's ability to receive invite codes.",
        "description": "Re-enable an account's ability to receive invite codes.",
        "operationId": "adminEnableAccountInvites",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "x-ms-summary": "Enable Account Invites Request",
            "description": "Request payload to enable account invites.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "account"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "x-ms-summary": "Account Identifier",
                  "description": "The account identifier (DID) for which invites are being enabled."
                },
                "note": {
                  "type": "string",
                  "x-ms-summary": "Reason for Enable",
                  "description": "Optional reason for enabling invites."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account invites enabled successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the operation was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message detailing the result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getAccountInfo": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Account Info",
        "x-ms-summary": "Retrieve details about an account.",
        "description": "Get details about an account.",
        "operationId": "adminGetAccountInfo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "x-ms-summary": "Account Identifier",
            "description": "Decentralized Identifier (DID) of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/accountView"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getAccountInfos": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Account Infos",
        "x-ms-summary": "Retrieve account details.",
        "description": "Get details about some accounts.",
        "operationId": "adminGetAccountInfos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dids",
            "in": "query",
            "x-ms-summary": "Account Identifiers",
            "description": "Array of account identifiers (DIDs).",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "infos"
              ],
              "properties": {
                "infos": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/accountView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.getInviteCodes": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Get Invite Codes",
        "x-ms-summary": "Admin view of invite codes.",
        "description": "Get an admin view of invite codes.",
        "operationId": "adminGetInviteCodes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "type": "string",
            "description": "Sorting method for invite codes.",
            "enum": [
              "recent",
              "usage"
            ],
            "default": "recent",
            "x-ms-summary": "Sort Method"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Maximum number of results to return.",
            "minimum": 1,
            "maximum": 500,
            "default": 100,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "type": "string",
            "description": "Cursor for pagination.",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "x-ms-summary": "Cursor for pagination."
                },
                "codes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inviteCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.searchAccounts": {
      "get": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Search Accounts",
        "description": "Get a list of accounts that matches your search query.",
        "operationId": "adminSearchAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The email address to search for.",
            "x-ms-summary": "Email address to search."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Pagination cursor for the next set of results.",
            "x-ms-summary": "Pagination cursor for next results."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "description": "The maximum number of results to retrieve. Defaults to 50.",
            "x-ms-summary": "Maximum number of results to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching accounts retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "accounts"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor to retrieve the next set of results."
                },
                "accounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/accountView"
                  },
                  "description": "List of matching accounts."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.sendEmail": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Send email to a user's account email address",
        "x-ms-summary": "Send Email",
        "description": "Send email to a user's account email address.",
        "operationId": "SendEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Email Payload",
            "description": "Payload for sending an email.",
            "schema": {
              "type": "object",
              "required": [
                "recipientDid",
                "content",
                "senderDid"
              ],
              "properties": {
                "recipientDid": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the recipient.",
                  "x-ms-summary": "Recipient DID"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the email.",
                  "x-ms-summary": "Content"
                },
                "subject": {
                  "type": "string",
                  "description": "Subject of the email.",
                  "x-ms-summary": "Subject"
                },
                "senderDid": {
                  "type": "string",
                  "description": "DID of the sender.",
                  "x-ms-summary": "Sender DID"
                },
                "comment": {
                  "type": "string",
                  "description": "Additional comment by the sender that won't be used in the email itself.",
                  "x-ms-summary": "Additional comment"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "sent"
              ],
              "properties": {
                "sent": {
                  "type": "boolean",
                  "description": "Indicates whether the email was successfully sent."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountEmail": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Email",
        "x-ms-summary": "Update Account Email",
        "description": "Administrative action to update an account's email.",
        "operationId": "UpdateAccountEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Update Email Request",
            "description": "Payload to update an account's email.",
            "schema": {
              "type": "object",
              "required": [
                "account",
                "email"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": "The handle or DID of the repo."
                },
                "email": {
                  "type": "string",
                  "description": "The new email address for the account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Email updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the update was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message providing additional information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountHandle": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Handle",
        "x-ms-summary": "Update Account Handle",
        "description": "Administrative action to update an account's handle.",
        "operationId": "UpdateAccountHandle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Update Handle Request",
            "description": "Payload to update an account's handle.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "handle"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The DID of the account."
                },
                "handle": {
                  "type": "string",
                  "description": "The new handle for the account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Handle updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the update was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Optional message providing additional information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateAccountPassword": {
      "post": {
        "tags": [
          "com.atproto.admin"
        ],
        "summary": "Update Account Password",
        "x-ms-summary": "Update Account Password",
        "description": "Update the password for a user account as an administrator.",
        "operationId": "UpdateAccountPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Update Password Request",
            "description": "Payload to update a user's account password.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "password"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The DID of the account to update."
                },
                "password": {
                  "type": "string",
                  "description": "The new password for the account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Password updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the operation was successful."
                },
                "message": {
                  "type": "string",
                  "description": "Additional details about the operation result."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.admin.updateSubjectStatus": {
      "post": {
        "summary": "Update Subject Status",
        "x-ms-summary": "Update the service-specific admin status of a subject.",
        "tags": [
          "com.atproto.admin"
        ],
        "description": "Update the service-specific admin status of a subject.",
        "operationId": "UpdateSubjectStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "The subject and status updates for the request.",
            "schema": {
              "type": "object",
              "required": [
                "subject"
              ],
              "properties": {
                "subject": {
                  "type": "object",
                  "description": "The subject of the update, either a repository, reference, or blob.",
                  "properties": {
                    "repoRef": {
                      "$ref": "#/definitions/repoRef"
                    },
                    "strongRef": {
                      "$ref": "#/definitions/strongRef"
                    },
                    "repoBlobRef": {
                      "$ref": "#/definitions/repoBlobRef"
                    }
                  }
                },
                "takedown": {
                  "$ref": "#/definitions/statusAttr"
                },
                "deactivated": {
                  "$ref": "#/definitions/statusAttr"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "subject"
              ],
              "properties": {
                "subject": {
                  "type": "object",
                  "description": "The updated subject of the status change.",
                  "properties": {
                    "repoRef": {
                      "$ref": "#/definitions/repoRef"
                    },
                    "strongRef": {
                      "$ref": "#/definitions/strongRef"
                    },
                    "repoBlobRef": {
                      "$ref": "#/definitions/repoBlobRef"
                    }
                  }
                },
                "takedown": {
                  "$ref": "#/definitions/statusAttr"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve credentials.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.getRecommendedDidCredentials": {
      "get": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "GetRecommendedDidCredentials",
        "description": "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
        "operationId": "GetRecommendedDidCredentials",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "rotationKeys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "alsoKnownAs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "verificationMethods": {
                  "type": "object"
                },
                "services": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.requestPlcOperationSignature": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "RequestPlcOperationSignature",
        "description": "Request an email with a code to in order to request a signed PLC operation.",
        "operationId": "RequestPlcOperationSignature",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates if the request was successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.resolveHandle": {
      "get": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "ResolveHandle",
        "description": "Resolves a handle (domain name) to a DID.",
        "operationId": "ResolveHandle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "query",
            "description": "The handle to resolve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "The handle to resolve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "did"
              ],
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The resolved DID."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.signPlcOperation": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "SignPlcOperation",
        "description": "Signs a PLC operation to update some value(s) in the requesting DID's document.",
        "operationId": "SignPlcOperation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "A token received through com.atproto.identity.requestPlcOperationSignature."
                },
                "rotationKeys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "alsoKnownAs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "verificationMethods": {
                  "type": "object"
                },
                "services": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "operation"
              ],
              "properties": {
                "operation": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.submitPlcOperation": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "SubmitPlcOperation",
        "description": "Validates a PLC operation to ensure that it doesn't violate a service's constraints.",
        "operationId": "SubmitPlcOperation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "operation"
              ],
              "properties": {
                "operation": {
                  "type": "object",
                  "description": "The PLC operation to be validated."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the operation was successfully validated."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.identity.updateHandle": {
      "post": {
        "tags": [
          "com.atproto.identity"
        ],
        "summary": "UpdateHandle",
        "description": "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary.",
        "operationId": "UpdateHandle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "handle"
              ],
              "properties": {
                "handle": {
                  "type": "string",
                  "description": "The new handle."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates whether the handle was successfully updated."
                },
                "message": {
                  "type": "string",
                  "description": "Additional information about the operation."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.label.queryLabels": {
      "get": {
        "tags": [
          "com.atproto.label"
        ],
        "summary": "Find labels relevant to the provided AT-URI patterns",
        "description": "Find labels relevant to the provided AT-URI patterns.",
        "operationId": "QueryLabels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "uriPatterns",
            "in": "query",
            "description": "List of AT URI patterns to match (boolean 'OR').",
            "required": true,
            "type": "array",
            "x-ms-summary": "List of AT URI patterns to match",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Optional list of label sources (DIDs) to filter on.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "DIDs to filter on"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of labels to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 250,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A cursor for pagination.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "labels"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/label"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.moderation.createReport": {
      "post": {
        "tags": [
          "com.atproto.moderation"
        ],
        "summary": "Create Report",
        "x-ms-summary": "Create Report",
        "description": "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
        "operationId": "CreateReport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-ms-summary": "Moderation Report Payload",
            "description": "Payload to submit a moderation report.",
            "schema": {
              "type": "object",
              "required": [
                "reasonType",
                "subject"
              ],
              "properties": {
                "reasonType": {
                  "$ref": "#/definitions/reasonType"
                },
                "reason": {
                  "type": "string",
                  "description": "Additional context about the content and violation.",
                  "maxLength": 20000
                },
                "subject": {
                  "type": "object",
                  "description": "Subject of the report. Must match either repoRef or strongRef.",
                  "properties": {
                    "repoRef": {
                      "$ref": "#/definitions/repoRef"
                    },
                    "strongRef": {
                      "$ref": "#/definitions/strongRef"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "reasonType",
                "subject",
                "reportedBy",
                "createdAt"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the report."
                },
                "reasonType": {
                  "$ref": "#/definitions/reasonType"
                },
                "reason": {
                  "type": "string",
                  "description": "Additional context about the content and violation.",
                  "maxLength": 20000
                },
                "subject": {
                  "type": "object",
                  "description": "Subject of the report, must match either repoRef or strongRef.",
                  "properties": {
                    "repoRef": {
                      "$ref": "#/definitions/repoRef"
                    },
                    "strongRef": {
                      "$ref": "#/definitions/strongRef"
                    }
                  },
                  "additionalProperties": false
                },
                "reportedBy": {
                  "type": "string",
                  "description": "DID of the user who submitted the report."
                },
                "createdAt": {
                  "type": "string",
                  "description": "Timestamp when the report was created.",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid account identifier or password.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.applyWrites": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Apply Writes",
        "description": "Apply a set of write operations to the repo.\n",
        "operationId": "ApplyWrites",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The list of writes to apply to the repository.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "writes": {
                  "type": "array",
                  "description": "A list of write operations to apply.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "operation": {
                        "type": "string",
                        "description": "The type of operation (e.g., create, update, delete).",
                        "example": "create"
                      },
                      "record": {
                        "type": "object",
                        "description": "The record to apply the operation to."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Writes successfully applied to the repository.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the writes were applied successfully.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid write operations.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.createRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Create Record",
        "description": "Create a new record in the repository.\n",
        "operationId": "CreateRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The details of the record to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection to create the record in.",
                  "example": "posts"
                },
                "record": {
                  "type": "object",
                  "description": "The content of the record.",
                  "example": {
                    "content": "Hello World"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the created record.",
                  "example": "record123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.deleteRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Delete Record",
        "description": "Delete a record from the repository.\n",
        "operationId": "DeleteRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The identifier of the record to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection containing the record.",
                  "example": "posts"
                },
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the record to delete.",
                  "example": "record123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates that the record was successfully deleted.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.describeRepo": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Describe Repository",
        "description": "Retrieve metadata about the repository.\n",
        "operationId": "DescribeRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved repository metadata.",
            "schema": {
              "type": "object",
              "properties": {
                "collections": {
                  "type": "array",
                  "description": "List of collections in the repository.",
                  "items": {
                    "type": "string",
                    "example": "posts"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repository details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.importRepo": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Import Repository",
        "description": "Import an existing repository into the current system.\n",
        "operationId": "ImportRepo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the repository to import.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoUrl": {
                  "type": "string",
                  "description": "The URL of the repository to import.",
                  "example": "https://repo.example.com"
                },
                "credentials": {
                  "type": "object",
                  "description": "Credentials for accessing the repository.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username for repository access."
                    },
                    "password": {
                      "type": "string",
                      "description": "Password for repository access."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository successfully imported.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful import operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.listMissingBlobs": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "List Missing Blobs",
        "description": "Get a list of blobs missing from the repository.\n",
        "operationId": "ListMissingBlobs",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository to check.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of missing blobs.",
            "schema": {
              "type": "object",
              "properties": {
                "missingBlobs": {
                  "type": "array",
                  "description": "A list of missing blob identifiers.",
                  "items": {
                    "type": "string",
                    "example": "blob123"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.listRecords": {
      "get": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "List Records",
        "description": "Retrieve list records from a collection in a repository.\n",
        "operationId": "ListRecords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "query",
            "description": "The name of the collection to list records from.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Collection Name"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to retrieve.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Result Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A pagination cursor for navigating the records.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination Cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of records.",
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "description": "A list of records from the collection.",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid collection name or parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.putRecord": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Update or Replace Record",
        "description": "Update or replace an existing record in the repository.\n",
        "operationId": "PutRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the record to update or replace.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "type": "string",
                  "description": "The name of the collection containing the record.",
                  "example": "posts"
                },
                "recordId": {
                  "type": "string",
                  "description": "Unique identifier of the record.",
                  "example": "record123"
                },
                "record": {
                  "type": "object",
                  "description": "The new content of the record.",
                  "example": {
                    "content": "Updated Content"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully updated or replaced.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates successful operation.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.repo.uploadBlob": {
      "post": {
        "tags": [
          "com.atproto.repo"
        ],
        "summary": "Upload Blob",
        "description": "Uploads a binary blob to a repo using multipart/form-data.",
        "operationId": "UploadBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file",
            "description": "The binary blob to upload.",
            "x-ms-summary": "Blob File"
          },
          {
            "name": "repoId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique repository ID where the blob will be stored.",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded the blob.",
            "schema": {
              "type": "object",
              "properties": {
                "blobId": {
                  "type": "string",
                  "description": "Unique identifier of the uploaded blob."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected failure during blob upload.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.activateAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Activate Account",
        "x-ms-summary": "Reactivates a deactivated account.",
        "description": "Activates a currently deactivated account.",
        "operationId": "activateAccount",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully activated. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.checkAccountStatus": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Check Account Status",
        "x-ms-summary": "Retrieve the status of an account.",
        "description": "Returns the status of an account, especially as pertaining to import or recovery.",
        "operationId": "checkAccountStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account status retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "activated",
                "validDid",
                "repoCommit",
                "repoRev",
                "repoBlocks",
                "indexedRecords",
                "privateStateValues",
                "expectedBlobs",
                "importedBlobs"
              ],
              "properties": {
                "activated": {
                  "type": "boolean",
                  "description": "Indicates whether the account is activated."
                },
                "validDid": {
                  "type": "boolean",
                  "description": "Indicates whether the DID is valid."
                },
                "repoCommit": {
                  "type": "string",
                  "description": "Commit identifier for the account's repository."
                },
                "repoRev": {
                  "type": "string",
                  "description": "Repository revision information."
                },
                "repoBlocks": {
                  "type": "integer",
                  "description": "Number of repository blocks."
                },
                "indexedRecords": {
                  "type": "integer",
                  "description": "Number of indexed records in the account."
                },
                "privateStateValues": {
                  "type": "integer",
                  "description": "Number of private state values."
                },
                "expectedBlobs": {
                  "type": "integer",
                  "description": "Expected number of blobs."
                },
                "importedBlobs": {
                  "type": "integer",
                  "description": "Number of imported blobs."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.confirmEmail": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Confirm Email",
        "x-ms-summary": "Confirm a user's email address.",
        "description": "Confirm an email using a token generated by the requestEmailConfirmation process.",
        "operationId": "confirmEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Email address and confirmation token.",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "token"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address to confirm."
                },
                "token": {
                  "type": "string",
                  "description": "The confirmation token sent to the user's email."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmed successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Account",
        "x-ms-summary": "Create a new account.",
        "description": "Create an account with the provided details.",
        "operationId": "createAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for creating the account.",
            "schema": {
              "type": "object",
              "required": [
                "handle"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email address for the account."
                },
                "handle": {
                  "type": "string",
                  "description": "Requested handle for the account."
                },
                "did": {
                  "type": "string",
                  "description": "Pre-existing atproto DID, being imported to a new account."
                },
                "inviteCode": {
                  "type": "string",
                  "description": "Invite code for account creation."
                },
                "verificationCode": {
                  "type": "string",
                  "description": "Code for verifying the email or phone."
                },
                "verificationPhone": {
                  "type": "string",
                  "description": "Phone number for account verification."
                },
                "password": {
                  "type": "string",
                  "description": "Initial account password. May need to meet instance-specific password strength requirements."
                },
                "recoveryKey": {
                  "type": "string",
                  "description": "DID PLC rotation key (recovery key) to be included in the PLC creation operation."
                },
                "plcOp": {
                  "type": "object",
                  "description": "Optional PLC operation data."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account created successfully. Login session returned.",
            "schema": {
              "type": "object",
              "required": [
                "accessJwt",
                "refreshJwt",
                "handle",
                "did"
              ],
              "properties": {
                "accessJwt": {
                  "type": "string",
                  "description": "Access JWT token for authentication."
                },
                "refreshJwt": {
                  "type": "string",
                  "description": "Refresh JWT token for session renewal."
                },
                "handle": {
                  "type": "string",
                  "description": "Handle of the new account."
                },
                "did": {
                  "type": "string",
                  "description": "DID of the new account."
                },
                "didDoc": {
                  "type": "object",
                  "description": "DID document associated with the new account."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createAppPassword": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Create App Password",
        "description": "Create an App Password.",
        "operationId": "serverCreateAppPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload to create an App Password.",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A short name for the App Password, to help distinguish them."
                },
                "privileged": {
                  "type": "boolean",
                  "description": "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App password created successfully.",
            "schema": {
              "$ref": "#/definitions/appPassword"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createInviteCode": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Invite Code",
        "x-ms-summary": "Generate a new invite code.",
        "description": "Create an invite code for specified use cases.",
        "operationId": "createInviteCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for creating the invite code.",
            "schema": {
              "type": "object",
              "required": [
                "useCount"
              ],
              "properties": {
                "useCount": {
                  "type": "integer",
                  "description": "The number of times the invite code can be used."
                },
                "forAccount": {
                  "type": "string",
                  "description": "The DID of the account for which the invite code is being generated."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite code created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The generated invite code."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.createInviteCodes": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Create Invite Codes",
        "x-ms-summary": "Generate multiple invite codes.",
        "description": "Create multiple invite codes with specified usage limits.",
        "operationId": "createInviteCodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for generating multiple invite codes.",
            "schema": {
              "type": "object",
              "required": [
                "codeCount",
                "useCount"
              ],
              "properties": {
                "codeCount": {
                  "type": "integer",
                  "description": "The number of invite codes to generate.",
                  "default": 1
                },
                "useCount": {
                  "type": "integer",
                  "description": "The number of times each invite code can be used."
                },
                "forAccounts": {
                  "type": "array",
                  "description": "An array of DIDs for accounts the invite codes are for.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite codes created successfully.",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "codes": {
                  "type": "array",
                  "description": "The generated invite codes.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "account": {
                        "type": "string",
                        "description": "The DID of the account associated with the invite code."
                      },
                      "code": {
                        "type": "string",
                        "description": "The generated invite code."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deactivateAccount": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Deactivate Account",
        "x-ms-summary": "Deactivate an account post-migration.",
        "description": "Deactivates a currently active account after migration is finalized.",
        "operationId": "deactivateAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details for deactivating the account.",
            "schema": {
              "type": "object",
              "properties": {
                "deleteAfter": {
                  "type": "string",
                  "description": "Time window for retaining the deactivated account.",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully deactivated. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.deleteSession": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Delete Session",
        "description": "Delete the current session.",
        "operationId": "serverDeleteSession",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.describeServer": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Describe Server",
        "description": "Describes the server's account creation requirements and capabilities.",
        "operationId": "serverDescribeServer",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Server description retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "did",
                "availableUserDomains"
              ],
              "properties": {
                "inviteCodeRequired": {
                  "type": "boolean",
                  "description": "If true, an invite code must be supplied to create an account on this instance."
                },
                "phoneVerificationRequired": {
                  "type": "boolean",
                  "description": "If true, a phone verification token must be supplied to create an account on this instance."
                },
                "availableUserDomains": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "links": {
                  "$ref": "#/definitions/describeServerLinks"
                },
                "contact": {
                  "$ref": "#/definitions/describeServerContact"
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the server."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getAccountInviteCodes": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Get Account Invite Codes",
        "description": "Get all invite codes for the current account.",
        "operationId": "serverGetAccountInviteCodes",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeUsed",
            "in": "query",
            "type": "boolean",
            "default": true,
            "description": "Include used invite codes in the response.",
            "x-ms-summary": "Include Used"
          },
          {
            "name": "createAvailable",
            "in": "query",
            "type": "boolean",
            "default": true,
            "description": "Controls whether any new 'earned' but not 'created' invites should be created.",
            "x-ms-summary": "Create Available"
          }
        ],
        "responses": {
          "200": {
            "description": "Invite codes retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "codes"
              ],
              "properties": {
                "codes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inviteCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "DuplicateCreate"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getServiceAuth": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Get Service Authentication Token",
        "x-ms-summary": "Fetch a signed authentication token.",
        "description": "Get a signed token on behalf of the requesting DID for the requested service.",
        "operationId": "getServiceAuth",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "aud",
            "in": "query",
            "description": "The DID of the service that the token will be used to authenticate with.",
            "required": true,
            "type": "string",
            "x-ms-summary": "DID"
          },
          {
            "name": "exp",
            "in": "query",
            "description": "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future.",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Expiration"
          },
          {
            "name": "lxm",
            "in": "query",
            "description": "Lexicon (XRPC) method to bind the requested token to.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Lexicon method"
          }
        ],
        "responses": {
          "200": {
            "description": "Service authentication token retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The signed authentication token."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.getSession": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Get Current Session Info",
        "x-ms-summary": "Retrieve session information.",
        "description": "Get information about the current authentication session.",
        "operationId": "getSession",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session details retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "handle",
                "did"
              ],
              "properties": {
                "handle": {
                  "type": "string",
                  "description": "User's handle."
                },
                "did": {
                  "type": "string",
                  "description": "Decentralized Identifier (DID) of the user."
                },
                "email": {
                  "type": "string",
                  "description": "Email address of the user."
                },
                "emailConfirmed": {
                  "type": "boolean",
                  "description": "Indicates if the email is confirmed."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Indicates if email is used as an authentication factor."
                },
                "didDoc": {
                  "type": "object",
                  "description": "Optional DID document."
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates if the session is active."
                },
                "status": {
                  "type": "string",
                  "description": "The status of the user account.",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deactivated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.listAppPasswords": {
      "get": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "List App Passwords",
        "description": "List all App Passwords.",
        "operationId": "serverListAppPasswords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "App passwords retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "passwords"
              ],
              "properties": {
                "passwords": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/appPassword"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "AccountTakedown"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestAccountDelete": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Account Deletion",
        "description": "Initiate a user account deletion via email.",
        "operationId": "serverRequestAccountDelete",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deletion request initiated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestEmailConfirmation": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Email Confirmation",
        "description": "Request an email with a code to confirm ownership of email.",
        "operationId": "serverRequestEmailConfirmation",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmation request sent successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestEmailUpdate": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Request Email Update",
        "description": "Request a token in order to update email.",
        "operationId": "serverRequestEmailUpdate",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token request for email update successful.",
            "schema": {
              "type": "object",
              "required": [
                "tokenRequired"
              ],
              "properties": {
                "tokenRequired": {
                  "type": "boolean",
                  "description": "Indicates if a token is required for the email update."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.requestPasswordReset": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Request Password Reset",
        "x-ms-summary": "Initiate a password reset request.",
        "description": "Initiate a user account password reset via email.",
        "operationId": "requestPasswordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Email address for requesting a password reset.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address associated with the user account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset request initiated successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.reserveSigningKey": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Reserve Signing Key",
        "x-ms-summary": "Reserve a repo signing key.",
        "description": "Reserve a repo signing key for use with account creation.",
        "operationId": "reserveSigningKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "DID for reserving a signing key.",
            "schema": {
              "type": "object",
              "properties": {
                "did": {
                  "type": "string",
                  "description": "The Decentralized Identifier (DID) to reserve a signing key for."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signing key reserved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "signingKey"
              ],
              "properties": {
                "signingKey": {
                  "type": "string",
                  "description": "The public key for the reserved signing key."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.resetPassword": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Reset Password",
        "x-ms-summary": "Reset a user account password.",
        "description": "Reset a user account password using a token.",
        "operationId": "resetPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Token and new password for resetting the account.",
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The token provided for password reset."
                },
                "password": {
                  "type": "string",
                  "description": "The new password for the user account."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully. No response body."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.revokeAppPassword": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Revoke App Password",
        "description": "Revoke an App Password by name.",
        "operationId": "serverRevokeAppPassword",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload containing the name of the App Password to revoke.",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the App Password to revoke."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App Password revoked successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.server.updateEmail": {
      "post": {
        "tags": [
          "com.atproto.server"
        ],
        "summary": "Update Email",
        "description": "Update an account's email.",
        "operationId": "serverUpdateEmail",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload containing email update information.",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The new email address to update the account with."
                },
                "emailAuthFactor": {
                  "type": "boolean",
                  "description": "Whether email is used as an authentication factor."
                },
                "token": {
                  "type": "string",
                  "description": "A token from requestEmailUpdate if the account's email has been confirmed."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email updated successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "TokenRequired"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getBlob": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Blob",
        "description": "Retrieve a binary blob from a repo using multipart/form-data.",
        "operationId": "GetBlob",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blobId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Unique identifier of the blob to retrieve.",
            "x-ms-summary": "Blob ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the blob as a JSON response.",
            "schema": {
              "type": "object",
              "properties": {
                "blobId": {
                  "type": "string",
                  "description": "Unique identifier of the blob."
                },
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "The binary content of the blob, base64-encoded."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid blob ID.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found - The specified blob does not exist.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected failure during blob retrieval.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/app.bsky.graph.getBlocks": {
      "get": {
        "tags": [
          "app.bsky.graph"
        ],
        "summary": "Get Blocked Accounts",
        "x-ms-summary": "Get Blocked Accounts",
        "description": "Retrieve a list of accounts blocked by the requesting account.",
        "operationId": "GetBlocks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit Results",
            "description": "The maximum number of results to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          {
            "name": "cursor",
            "in": "query",
            "x-ms-summary": "Cursor for Pagination",
            "description": "Cursor to retrieve the next set of results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "blocks"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for the next set of results."
                },
                "blocks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profileView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getLatestCommit": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Latest Commit",
        "description": "Retrieve the latest commit for the repository.\n",
        "operationId": "GetLatestCommit",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Latest commit successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "commit": {
                  "type": "object",
                  "description": "Details of the latest commit.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the commit.",
                      "example": "commit123"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of the commit.",
                      "example": "2024-11-20T12:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRecord": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Record",
        "description": "Retrieve a record from the repo by its unique identifier.\n",
        "operationId": "ATProtoGetRecord",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Unique identifier of the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Record successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the retrieved record.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the record.",
                      "example": "record123"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the record.",
                      "example": "Record content here."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRepo": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Repository",
        "description": "Retrieve repository data as base64-encoded binary content.\n",
        "operationId": "SyncGetRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repository data.",
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository.",
                  "example": "repo123"
                },
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "Base64-encoded repository data."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository ID.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.getRepoStatus": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Get Repository Status",
        "description": "Retrieve repo status, incl. synchronization info.\n",
        "operationId": "GetRepoStatus",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Repository status successfully retrieved.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "object",
                  "description": "Details of the repository's status.",
                  "properties": {
                    "syncStatus": {
                      "type": "string",
                      "description": "The synchronization status of the repository.",
                      "example": "synchronized"
                    },
                    "lastCommit": {
                      "type": "string",
                      "description": "The identifier of the last commit.",
                      "example": "commit123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.listBlobs": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "List Blobs",
        "description": "Get a list of all blobs in the repository.\n",
        "operationId": "ListBlobs",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Blobs successfully listed.",
            "schema": {
              "type": "object",
              "properties": {
                "blobs": {
                  "type": "array",
                  "description": "List of blobs in the repository.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the blob.",
                        "example": "blob123"
                      },
                      "size": {
                        "type": "integer",
                        "description": "The size of the blob in bytes.",
                        "example": 1024
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.listRepos": {
      "get": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "List Repositories",
        "description": "Get a list of all repositories available in the system.\n",
        "operationId": "ListRepos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved repositories list.",
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "description": "List of repositories.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the repository.",
                        "example": "repo123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the repository.",
                        "example": "MyRepository"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repositories list.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.notifyOfUpdate": {
      "post": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Notify of Update",
        "description": "Notify the system about updates to a repo to trigger sync.\n",
        "operationId": "NotifyOfUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the update notification.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository.",
                  "example": "repo123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update notification successfully submitted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the update notification was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid update details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/com.atproto.sync.requestCrawl": {
      "post": {
        "tags": [
          "com.atproto.sync"
        ],
        "summary": "Request Crawl",
        "description": "Submit a request to crawl a repository for updates.\n",
        "operationId": "RequestCrawl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the crawl request.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "repoId": {
                  "type": "string",
                  "description": "Unique identifier of the repository to crawl.",
                  "example": "repo123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl request successfully submitted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the crawl request was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid crawl request details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.createTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Create a reusable communication template",
        "description": "Administrative action to create a new, reusable communication template.",
        "operationId": "CreateTemplate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "subject",
                "contentMarkdown",
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the template."
                },
                "contentMarkdown": {
                  "type": "string",
                  "description": "Content of the template, markdown supported, can contain variable placeholders."
                },
                "subject": {
                  "type": "string",
                  "description": "Subject of the message, used in emails."
                },
                "lang": {
                  "type": "string",
                  "description": "Message language."
                },
                "createdBy": {
                  "type": "string",
                  "description": "DID of the user who is creating the template."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/templateView"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.deleteTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Delete a communication template",
        "description": "Delete a communication template by its unique ID.",
        "operationId": "DeleteTemplate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the template to be deleted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.listTemplates": {
      "get": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Get list of communication templates",
        "description": "Retrieve a list of all available communication templates.",
        "operationId": "ListTemplates",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "communicationTemplates"
              ],
              "properties": {
                "communicationTemplates": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/templateView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.communication.updateTemplate": {
      "post": {
        "tags": [
          "tools.ozone.communication"
        ],
        "summary": "Update an existing communication template",
        "description": "Administrative action to update an existing communication template.",
        "operationId": "UpdateTemplate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the template to be updated."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the template."
                },
                "lang": {
                  "type": "string",
                  "description": "Message language."
                },
                "contentMarkdown": {
                  "type": "string",
                  "description": "Content of the template, markdown supported, can contain variable placeholders."
                },
                "subject": {
                  "type": "string",
                  "description": "Subject of the message, used in emails."
                },
                "updatedBy": {
                  "type": "string",
                  "description": "DID of the user who is updating the template."
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Whether the template is disabled."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/templateView"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.emitEvent": {
      "post": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "description": "Take a moderation action on an actor",
        "operationId": "EmitEvent",
        "summary": "Take a moderation action on an actor",
        "x-ms-summary": "Take a moderation action on an actor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "event",
                "subject",
                "createdBy"
              ],
              "properties": {
                "event": {
                  "description": "The moderation event to emit.",
                  "type": "string",
                  "enum": [
                    "modEventTakedown",
                    "modEventAcknowledge",
                    "modEventEscalate",
                    "modEventComment",
                    "modEventLabel",
                    "modEventReport",
                    "modEventMute",
                    "modEventUnmute",
                    "modEventMuteReporter",
                    "modEventUnmuteReporter",
                    "modEventReverseTakedown",
                    "modEventResolveAppeal",
                    "modEventEmail",
                    "modEventTag",
                    "accountEvent",
                    "identityEvent",
                    "recordEvent"
                  ]
                },
                "subject": {
                  "description": "The subject of the moderation event.",
                  "type": "string",
                  "enum": [
                    "repoRef",
                    "strongRef"
                  ]
                },
                "subjectBlobCids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "createdBy": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/modEventView"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken",
                    "SubjectHasAction"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getEvent": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Event",
        "description": "Retrieve details of a specific moderation event.\n",
        "operationId": "GetEvent",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "Unique identifier of the moderation event.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation event.",
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "object",
                  "description": "Details of the moderation event.",
                  "properties": {
                    "eventType": {
                      "type": "string",
                      "description": "The type of moderation event.",
                      "example": "userBan"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional details about the event.",
                      "example": "User banned for violating terms of service."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid event identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRecord": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Record",
        "description": "Retrieve a moderation record for an entity or user.\n",
        "operationId": "OzoneGetRecord",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Unique identifier of the moderation record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation record.",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the moderation record.",
                  "properties": {
                    "entityId": {
                      "type": "string",
                      "description": "The ID of the entity associated with the record.",
                      "example": "entity123"
                    },
                    "actions": {
                      "type": "array",
                      "description": "List of actions associated with the moderation record.",
                      "items": {
                        "type": "string",
                        "example": "userBan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid record identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRecords": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Records",
        "description": "Retrieve moderation records based on provided filters.\n",
        "operationId": "ModerationGetRecords",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filter criteria for retrieving moderation records.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation records.",
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "description": "List of moderation records.",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRepo": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Repository",
        "description": "Retrieve details of a specific moderation repository.\n",
        "operationId": "OzoneGetRepo",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repoId",
            "in": "query",
            "description": "Unique identifier of the repository.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Repository ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation repository.",
            "schema": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "object",
                  "description": "Details of the moderation repository.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the repository.",
                      "example": "repo123"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the repository.",
                      "example": "active"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid repository identifier.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.getRepos": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Get Moderation Repositories",
        "description": "Get a list of all moderation repositories.\n",
        "operationId": "GetRepos",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation repositories.",
            "schema": {
              "type": "object",
              "properties": {
                "repositories": {
                  "type": "array",
                  "description": "List of moderation repositories.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the repository.",
                        "example": "repo123"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the repository.",
                        "example": "active"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to retrieve repositories.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.queryEvents": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "List moderation events related to a subject",
        "description": "List moderation events related to a subject.",
        "operationId": "QueryEvents",
        "x-ms-summary": "List moderation events related to a subject",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "types",
            "in": "query",
            "description": "Event type to filter by: defs#modEvent<name>",
            "required": false,
            "type": "array",
            "x-ms-summary": "Event type for filtering",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "Created by user",
            "required": false,
            "type": "string",
            "x-ms-summary": "Created by"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction for the events.",
            "required": false,
            "type": "string",
            "default": "desc",
            "x-ms-summary": "Sort order"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Retrieve events created after a given timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Events created after a timestamp"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Retrieve events created before a given timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Events created before a timestamp"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Subject",
            "required": false,
            "type": "string",
            "x-ms-summary": "Subject"
          },
          {
            "name": "collections",
            "in": "query",
            "description": "Returns events where the subject belongs to the given collections.",
            "required": false,
            "type": "array",
            "maxItems": 20,
            "x-ms-summary": "Event collection",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "subjectType",
            "in": "query",
            "description": "Returns events where the subject is account or record.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Subject Type",
            "enum": [
              "account",
              "record"
            ]
          },
          {
            "name": "includeAllUserRecords",
            "in": "query",
            "description": "Returns events on all record type from given 'collections' param.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Returns events of all types"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "hasComment",
            "in": "query",
            "description": "If true, only events with comments are returned.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Has comment, yes/no"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Returns events with comments containing the keyword.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Comment"
          },
          {
            "name": "addedLabels",
            "in": "query",
            "description": "Returns events where all of these labels were added are returned.",
            "required": false,
            "type": "array",
            "x-ms-summary": "Addedl labels",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "removedLabels",
            "in": "query",
            "description": "Returns events where labels were removed.",
            "required": false,
            "type": "array",
            "x-ms-summary": "Events with removed labels",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "addedTags",
            "in": "query",
            "description": "Returns events where labels were removed.",
            "required": false,
            "type": "array",
            "x-ms-summary": "Removed labels",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "removedTags",
            "in": "query",
            "description": "Returns events where tags were removed.",
            "required": false,
            "type": "array",
            "x-ms-summary": "Removed tags",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "reportTypes",
            "in": "query",
            "description": "Report type for moderation event",
            "required": false,
            "type": "array",
            "x-ms-summary": "Report types",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Pagination cursor",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "events"
              ],
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "events": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/modEventView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.queryStatuses": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Query Moderation Statuses",
        "description": "Retrieve the statuses of moderated entities.\n",
        "operationId": "QueryStatuses",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query string for filtering moderation statuses.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Status Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved moderation statuses.",
            "schema": {
              "type": "object",
              "properties": {
                "statuses": {
                  "type": "array",
                  "description": "List of moderation statuses.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entityId": {
                        "type": "string",
                        "description": "Unique identifier of the moderated entity.",
                        "example": "entity123"
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the entity.",
                        "example": "banned"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.moderation.searchRepos": {
      "get": {
        "tags": [
          "tools.ozone.moderation"
        ],
        "summary": "Find repositories based on a search term",
        "description": "Find repositories based on a search term.",
        "operationId": "SearchRepos",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search query term.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search query term"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of repositories to return.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "x-ms-summary": "Limit"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A cursor for pagination.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "repos"
              ],
              "properties": {
                "cursor": {
                  "type": "string",
                  "description": "Cursor for pagination."
                },
                "repos": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/repoView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.server.getConfig": {
      "get": {
        "tags": [
          "tools.ozone.server"
        ],
        "summary": "Get Server Configuration",
        "description": "Get details about ozone's server configuration.",
        "operationId": "serverGetConfig",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Server configuration retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "appview": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "pds": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "blobDivert": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "chat": {
                  "$ref": "#/definitions/serviceConfig"
                },
                "viewer": {
                  "$ref": "#/definitions/viewerConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "InvalidRequest",
                    "ExpiredToken",
                    "InvalidToken"
                  ],
                  "description": "Error code indicating the type of failure."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "AuthMissing"
                  ],
                  "description": "Error code indicating missing authentication."
                },
                "message": {
                  "type": "string",
                  "description": "Detailed error message."
                }
              }
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.addValues": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Add Values to Set",
        "description": "Add values to an existing set in the system.\n",
        "operationId": "AddValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the values to add.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "values": {
                  "type": "array",
                  "description": "Values to add to the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values successfully added to the set.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to add values.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.deleteSet": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Delete Set",
        "description": "Delete an existing set by its unique identifier.\n",
        "operationId": "DeleteSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the set to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to delete the set.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.deleteValues": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Delete Values from Set",
        "description": "Remove specific values from a set by its unique identifier.\n",
        "operationId": "DeleteValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the values to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "values": {
                  "type": "array",
                  "description": "Values to remove from the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values successfully removed from the set.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to remove values.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.getValues": {
      "get": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Get Values from Set",
        "description": "Retrieve the values stored in a specific set.\n",
        "operationId": "GetValues",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "setId",
            "in": "query",
            "description": "Unique identifier of the set.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Set ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved set values.",
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "description": "List of values in the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid set ID.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.querySets": {
      "get": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Query Sets",
        "description": "Get a list of sets matching query criteria.\n",
        "operationId": "QuerySets",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query criteria for filtering sets.",
            "required": false,
            "type": "string",
            "x-ms-summary": "Set Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved matching sets.",
            "schema": {
              "type": "object",
              "properties": {
                "sets": {
                  "type": "array",
                  "description": "List of matching sets.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "setId": {
                        "type": "string",
                        "description": "Unique identifier of the set.",
                        "example": "set123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the set.",
                        "example": "MySet"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.set.upsertSet": {
      "post": {
        "tags": [
          "tools.ozone.set"
        ],
        "summary": "Upsert Set",
        "description": "Create or update a set with specified values.\n",
        "operationId": "UpsertSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the set to create or update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "setId": {
                  "type": "string",
                  "description": "Unique identifier of the set.",
                  "example": "set123"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the set.",
                  "example": "MySet"
                },
                "values": {
                  "type": "array",
                  "description": "The values to include in the set.",
                  "items": {
                    "type": "string",
                    "example": "value1"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set successfully created or updated.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to upsert set.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.findCorrelation": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Find Correlation",
        "description": "Search for correlations btw. entities based on their signatures.\n",
        "operationId": "FindCorrelation",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "description": "The signature to search for correlations.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Signature"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved correlations.",
            "schema": {
              "type": "object",
              "properties": {
                "correlations": {
                  "type": "array",
                  "description": "List of correlations found.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entityId": {
                        "type": "string",
                        "description": "The ID of the correlated entity.",
                        "example": "entity123"
                      },
                      "similarity": {
                        "type": "number",
                        "description": "The similarity score.",
                        "example": 0.85
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid signature.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.findRelatedAccounts": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Find Related Accounts",
        "description": "Retrieve accounts related to the specified signature.\n",
        "operationId": "FindRelatedAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "description": "The signature to search for related accounts.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Signature"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved related accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "type": "array",
                  "description": "List of related accounts.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string",
                        "description": "Unique identifier of the related account.",
                        "example": "account123"
                      },
                      "relationship": {
                        "type": "string",
                        "description": "The type of relationship.",
                        "example": "associated"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid signature.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.signature.searchAccounts": {
      "get": {
        "tags": [
          "tools.ozone.signature"
        ],
        "summary": "Search Accounts by Signature",
        "description": "Search for accounts associated with a specific signature.\n",
        "operationId": "OzoneSearchAccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The signature or criteria to search for accounts.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved matching accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "type": "array",
                  "description": "List of accounts matching the query.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accountId": {
                        "type": "string",
                        "description": "Unique identifier of the account.",
                        "example": "account123"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the account.",
                        "example": "John Doe"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid search query.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.addMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Add Team Member",
        "description": "Add a new member to a team.\n",
        "operationId": "AddMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to add.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                },
                "role": {
                  "type": "string",
                  "description": "The role of the new member.",
                  "example": "Developer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member successfully added to the team.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to add member.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.deleteMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Delete Team Member",
        "description": "Remove a member from a team.\n",
        "operationId": "DeleteMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to remove.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member successfully removed from the team.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to remove member.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.listMembers": {
      "get": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "List Team Members",
        "description": "Get a list of members in a specific team.\n",
        "operationId": "ListMembers",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "description": "Unique identifier of the team.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved team members.",
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "description": "List of team members.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "memberId": {
                        "type": "string",
                        "description": "Unique identifier of the member.",
                        "example": "member456"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the team member.",
                        "example": "Jane Doe"
                      },
                      "role": {
                        "type": "string",
                        "description": "The role of the team member.",
                        "example": "Developer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid team ID.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/tools.ozone.team.updateMember": {
      "post": {
        "tags": [
          "tools.ozone.team"
        ],
        "summary": "Update Team Member",
        "description": "Update details of a team member.\n",
        "operationId": "UpdateMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Details of the member to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "teamId": {
                  "type": "string",
                  "description": "Unique identifier of the team.",
                  "example": "team123"
                },
                "memberId": {
                  "type": "string",
                  "description": "Unique identifier of the member.",
                  "example": "member456"
                },
                "role": {
                  "type": "string",
                  "description": "The updated role of the team member.",
                  "example": "Team Lead"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member details successfully updated.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Indicates the operation was successful.",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unable to update member details.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/xrpc/embedRecordView": {
      "get": {
        "tags": [
          "embed"
        ],
        "summary": "Retrieve record view",
        "x-ms-summary": "Fetch dynamic schema for the record view.",
        "description": "Returns dynamic schema information for the record view.",
        "operationId": "embedRecordView",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Identifier for the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Record Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "record": {
                  "type": "object",
                  "description": "Details of the record view."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "preferences": {
      "type": "array",
      "items": {
        "type": "object",
        "description": "A preference entry in the user's settings.",
        "properties": {
          "adultContentPref": {
            "$ref": "#/definitions/adultContentPref"
          },
          "contentLabelPref": {
            "$ref": "#/definitions/contentLabelPref"
          },
          "savedFeedsPref": {
            "$ref": "#/definitions/savedFeedsPref"
          },
          "savedFeedsPrefV2": {
            "$ref": "#/definitions/savedFeedsPrefV2"
          },
          "personalDetailsPref": {
            "$ref": "#/definitions/personalDetailsPref"
          },
          "feedViewPref": {
            "$ref": "#/definitions/feedViewPref"
          },
          "threadViewPref": {
            "$ref": "#/definitions/threadViewPref"
          },
          "interestsPref": {
            "$ref": "#/definitions/interestsPref"
          },
          "mutedWordsPref": {
            "$ref": "#/definitions/mutedWordsPref"
          },
          "hiddenPostsPref": {
            "$ref": "#/definitions/hiddenPostsPref"
          },
          "bskyAppStatePref": {
            "$ref": "#/definitions/bskyAppStatePref"
          },
          "labelersPref": {
            "$ref": "#/definitions/labelersPref"
          }
        }
      }
    },
    "adultContentPref": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "contentLabelPref": {
      "type": "object",
      "required": [
        "label",
        "visibility"
      ],
      "properties": {
        "labelerDid": {
          "type": "string",
          "description": "Which labeler does this preference apply to?"
        },
        "label": {
          "type": "string"
        },
        "visibility": {
          "type": "string",
          "enum": [
            "ignore",
            "show",
            "warn",
            "hide"
          ]
        }
      }
    },
    "savedFeed": {
      "type": "object",
      "required": [
        "id",
        "type",
        "value",
        "pinned"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "feed",
            "list",
            "timeline"
          ]
        },
        "value": {
          "type": "string"
        },
        "pinned": {
          "type": "boolean"
        }
      }
    },
    "savedFeedsPrefV2": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/savedFeed"
          }
        }
      }
    },
    "savedFeedsPref": {
      "type": "object",
      "required": [
        "pinned",
        "saved"
      ],
      "properties": {
        "pinned": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "saved": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timelineIndex": {
          "type": "integer"
        }
      }
    },
    "personalDetailsPref": {
      "type": "object",
      "properties": {
        "birthDate": {
          "type": "string",
          "description": "The birth date of account owner.",
          "format": "date-time"
        }
      }
    },
    "feedViewPref": {
      "type": "object",
      "required": [
        "feed"
      ],
      "properties": {
        "feed": {
          "type": "string",
          "description": "The URI of the feed, or an identifier which describes the feed."
        },
        "hideReplies": {
          "type": "boolean",
          "description": "Hide replies in the feed."
        },
        "hideRepliesByUnfollowed": {
          "type": "boolean",
          "description": "Hide replies in the feed if they are not by followed users.",
          "default": true
        },
        "hideRepliesByLikeCount": {
          "type": "integer"
        },
        "hideReposts": {
          "type": "boolean",
          "description": "Hide reposts in the feed."
        },
        "hideQuotePosts": {
          "type": "boolean",
          "description": "Hide quote posts in the feed."
        }
      }
    },
    "threadViewPref": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "string",
          "description": "Sorting mode for threads.",
          "enum": [
            "oldest",
            "newest",
            "most-likes",
            "random",
            "hotness"
          ]
        },
        "prioritizeFollowedUsers": {
          "type": "boolean",
          "description": "Show followed users at the top of all replies."
        }
      }
    },
    "interestsPref": {
      "type": "object",
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 640
          },
          "maxItems": 100
        }
      }
    },
    "mutedWordTarget": {
      "type": "string",
      "maxLength": 640,
      "enum": [
        "content",
        "tag"
      ]
    },
    "mutedWord": {
      "type": "object",
      "description": "A word that the account owner has muted.",
      "required": [
        "value",
        "targets"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The muted word itself.",
          "maxLength": 10000
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mutedWordTarget"
          }
        },
        "actorTarget": {
          "type": "string",
          "description": "Groups of users to apply the muted word to. If undefined, applies to all users.",
          "default": "all",
          "enum": [
            "all",
            "exclude-following"
          ]
        },
        "expiresAt": {
          "type": "string",
          "description": "The date and time at which the muted word will expire and no longer be applied.",
          "format": "date-time"
        }
      }
    },
    "mutedWordsPref": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mutedWord"
          }
        }
      }
    },
    "hiddenPostsPref": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "labelersPref": {
      "type": "object",
      "required": [
        "labelers"
      ],
      "properties": {
        "labelers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/labelerPrefItem"
          }
        }
      }
    },
    "labelerPrefItem": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string"
        }
      }
    },
    "starterPackViewBasic": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "record",
        "creator",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "record": {},
        "creator": {
          "$ref": "#/definitions/profileViewBasic"
        },
        "listItemCount": {
          "type": "integer",
          "minimum": 0
        },
        "joinedWeekCount": {
          "type": "integer",
          "minimum": 0
        },
        "joinedAllTimeCount": {
          "type": "integer",
          "minimum": 0
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "bskyAppStatePref": {
      "type": "object",
      "description": "A grab bag of state that's specific to the bsky.app program.",
      "properties": {
        "activeProgressGuide": {
          "$ref": "#/definitions/bskyAppProgressGuide"
        },
        "queuedNudges": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 100
          },
          "maxItems": 1000
        },
        "nuxs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nux"
          },
          "maxItems": 100
        }
      }
    },
    "bskyAppProgressGuide": {
      "type": "object",
      "description": "If set, an active progress guide.",
      "required": [
        "guide"
      ],
      "properties": {
        "guide": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "nux": {
      "type": "object",
      "description": "A new user experiences (NUX) storage object",
      "required": [
        "id",
        "completed"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 100
        },
        "completed": {
          "type": "boolean"
        },
        "data": {
          "type": "string",
          "description": "Arbitrary data for the NUX. 300-character limit.",
          "maxLength": 3000
        },
        "expiresAt": {
          "type": "string",
          "description": "The date and time at which the NUX will expire and completed.",
          "format": "date-time"
        }
      }
    },
    "notifications": {
      "type": "object",
      "description": "The user's notification preferences.",
      "properties": {
        "email": {
          "type": "boolean",
          "description": "Whether email notifications are enabled.",
          "example": true
        },
        "push": {
          "type": "boolean",
          "description": "Whether push notifications are enabled.",
          "example": false
        }
      }
    },
    "language": {
      "type": "string",
      "description": "The user's preferred language code (e.g., 'en', 'fr').",
      "example": "en"
    },
    "privacySettings": {
      "type": "object",
      "description": "The user's privacy-related preferences.",
      "properties": {
        "profileVisibility": {
          "type": "string",
          "description": "The visibility of the user's profile (e.g., 'public', 'private').",
          "example": "public"
        },
        "messagePermissions": {
          "type": "string",
          "description": "Who can send messages to the user (e.g., 'anyone', 'contacts').",
          "example": "contacts"
        }
      }
    },
    "profileViewDetailed": {
      "type": "object",
      "required": [
        "did",
        "handle"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "maxLength": 640
        },
        "description": {
          "type": "string",
          "maxLength": 2560
        },
        "avatar": {
          "type": "string",
          "format": "uri"
        },
        "banner": {
          "type": "string",
          "format": "uri"
        },
        "followersCount": {
          "type": "integer"
        },
        "followsCount": {
          "type": "integer"
        },
        "postsCount": {
          "type": "integer"
        },
        "associated": {
          "$ref": "#/definitions/profileAssociated"
        },
        "joinedViaStarterPack": {
          "$ref": "#/definitions/starterPackViewBasic"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "pinnedPost": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "FeedItem": {
      "type": "object",
      "description": "Details of a single feed item.",
      "properties": {
        "post": {
          "$ref": "#/definitions/Post"
        },
        "reply": {
          "$ref": "#/definitions/Reply"
        },
        "reason": {
          "type": "object",
          "description": "Reason for including the post in the feed."
        },
        "feedContext": {
          "type": "string",
          "description": "Context of the feed item."
        }
      }
    },
    "Post": {
      "type": "object",
      "description": "Details of a post.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The unique URI of the post."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the post."
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "record": {
          "type": "object",
          "description": "The content record of the post."
        },
        "embed": {
          "type": "object",
          "description": "Embedded content associated with the post."
        },
        "replyCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of replies to the post."
        },
        "repostCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times the post has been reposted."
        },
        "likeCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of likes on the post."
        },
        "quoteCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of quotes of the post."
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was indexed."
        },
        "viewer": {
          "type": "object",
          "description": "Viewer-specific metadata for the post.",
          "properties": {
            "repost": {
              "type": "string",
              "description": "Viewer's repost action ID, if applicable."
            },
            "like": {
              "type": "string",
              "description": "Viewer's like action ID, if applicable."
            },
            "threadMuted": {
              "type": "boolean",
              "description": "Whether the viewer has muted the thread."
            },
            "replyDisabled": {
              "type": "boolean",
              "description": "Whether replies are disabled for the post."
            },
            "embeddingDisabled": {
              "type": "boolean",
              "description": "Whether embedding is disabled for the post."
            },
            "pinned": {
              "type": "boolean",
              "description": "Whether the post is pinned."
            }
          }
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the post.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "threadgate": {
          "type": "object",
          "description": "Details about thread-related restrictions or lists.",
          "properties": {
            "uri": {
              "type": "string",
              "description": "The URI for the threadgate."
            },
            "cid": {
              "type": "string",
              "description": "The CID for the threadgate."
            },
            "record": {
              "type": "object",
              "description": "Record details for the threadgate."
            },
            "lists": {
              "type": "array",
              "description": "Lists associated with the threadgate.",
              "items": {
                "$ref": "#/definitions/ListMetadata"
              }
            }
          }
        }
      }
    },
    "profileView": {
      "type": "object",
      "description": "Basic information about a profile.",
      "properties": {
        "did": {
          "type": "string",
          "description": "Decentralized Identifier (DID) of the profile."
        },
        "handle": {
          "type": "string",
          "description": "The handle of the profile."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the profile."
        },
        "avatar": {
          "type": "string",
          "description": "Avatar URL of the profile."
        },
        "associated": {
          "$ref": "#/definitions/AssociatedMetadata"
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the profile.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the profile was created."
        }
      }
    },
    "AssociatedMetadata": {
      "type": "object",
      "description": "Associated metadata for a profile.",
      "properties": {
        "lists": {
          "type": "integer",
          "description": "Number of associated lists."
        },
        "feedgens": {
          "type": "integer",
          "description": "Number of associated feed generators."
        },
        "starterPacks": {
          "type": "integer",
          "description": "Number of starter packs."
        },
        "labeler": {
          "type": "boolean",
          "description": "Indicates if the profile is a labeler."
        },
        "chat": {
          "type": "object",
          "description": "Chat preferences for the profile.",
          "properties": {
            "allowIncoming": {
              "type": "string",
              "description": "Allowed incoming chat settings (e.g., \"all\")."
            }
          }
        }
      }
    },
    "ViewerPostMetadata": {
      "type": "object",
      "description": "Viewer-specific metadata for a post.",
      "properties": {
        "repost": {
          "type": "string",
          "description": "URI of the viewer's repost of the post."
        },
        "like": {
          "type": "string",
          "description": "URI of the viewer's like of the post."
        },
        "threadMuted": {
          "type": "boolean",
          "description": "Indicates if the thread is muted by the viewer."
        },
        "replyDisabled": {
          "type": "boolean",
          "description": "Indicates if replies are disabled."
        },
        "embeddingDisabled": {
          "type": "boolean",
          "description": "Indicates if embedding is disabled."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates if the post is pinned."
        }
      }
    },
    "Label": {
      "type": "object",
      "description": "Labels associated with a post or profile.",
      "properties": {
        "ver": {
          "type": "integer",
          "description": "Version of the label."
        },
        "src": {
          "type": "string",
          "description": "Source of the label."
        },
        "uri": {
          "type": "string",
          "description": "URI associated with the label."
        },
        "cid": {
          "type": "string",
          "description": "CID associated with the label."
        },
        "val": {
          "type": "string",
          "description": "Value of the label."
        },
        "neg": {
          "type": "boolean",
          "description": "Indicates if the label is negative."
        },
        "cts": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of label creation."
        },
        "exp": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration timestamp of the label."
        },
        "sig": {
          "type": "string",
          "description": "Signature of the label."
        }
      }
    },
    "Threadgate": {
      "type": "object",
      "description": "Access restrictions and details for a thread.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI of the threadgate."
        },
        "cid": {
          "type": "string",
          "description": "CID of the threadgate."
        },
        "record": {
          "type": "object",
          "description": "Record of the threadgate."
        },
        "lists": {
          "type": "array",
          "description": "Lists associated with the threadgate.",
          "items": {
            "$ref": "#/definitions/ListItem"
          }
        }
      }
    },
    "ListItem": {
      "type": "object",
      "description": "An item in a list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI of the list item."
        },
        "cid": {
          "type": "string",
          "description": "CID of the list item."
        },
        "name": {
          "type": "string",
          "description": "Name of the list item."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list item."
        },
        "avatar": {
          "type": "string",
          "description": "Avatar of the list item."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Count of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list item.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        }
      }
    },
    "MutedByList": {
      "type": "object",
      "description": "Details of a list that muted the actor.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI of the list that muted the actor."
        },
        "cid": {
          "type": "string",
          "description": "Content Identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "Name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list."
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "Avatar image URI for the list."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the list was indexed."
        }
      }
    },
    "BlockingByList": {
      "type": "object",
      "description": "Details of a list that blocks the actor.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI of the list that blocks the actor."
        },
        "cid": {
          "type": "string",
          "description": "Content Identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "Name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "Purpose of the list."
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "Avatar image URI for the list."
        },
        "listItemCount": {
          "type": "integer",
          "description": "Number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/ViewerMetadata"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the list was indexed."
        }
      }
    },
    "ViewerMetadata": {
      "type": "object",
      "description": "Metadata about the viewer's relationship to the actor.",
      "properties": {
        "muted": {
          "type": "boolean",
          "description": "Indicates if the actor is muted by the viewer."
        },
        "blockedBy": {
          "type": "boolean",
          "description": "Indicates if the actor is blocked by the viewer."
        },
        "blocking": {
          "type": "string",
          "description": "Indicates if the viewer is blocking the actor."
        },
        "following": {
          "type": "string",
          "description": "Indicates if the viewer is following the actor."
        },
        "followedBy": {
          "type": "string",
          "description": "Indicates if the actor is following the viewer."
        },
        "mutedByList": {
          "$ref": "#/definitions/MutedByList"
        },
        "blockingByList": {
          "$ref": "#/definitions/BlockingByList"
        }
      }
    },
    "Reply": {
      "type": "object",
      "description": "Metadata about a reply in a conversation thread.",
      "properties": {
        "root": {
          "type": "object",
          "description": "Root post of the thread.",
          "additionalProperties": true
        },
        "parent": {
          "type": "object",
          "description": "Parent post to which this reply was made.",
          "additionalProperties": true
        },
        "grandparentAuthor": {
          "type": "object",
          "description": "Author of the grandparent post.",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized Identifier (DID) of the author."
            },
            "handle": {
              "type": "string",
              "description": "Handle of the author."
            },
            "displayName": {
              "type": "string",
              "description": "Display name of the author."
            },
            "avatar": {
              "type": "string",
              "format": "uri",
              "description": "Avatar image URI of the author."
            },
            "associated": {
              "$ref": "#/definitions/AssociatedMetadata"
            }
          }
        }
      }
    },
    "ListMetadata": {
      "type": "object",
      "description": "Metadata for a list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the list."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose or category of the list."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the list's avatar."
        },
        "listItemCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "viewer": {
          "type": "object",
          "description": "Viewer-specific metadata for the list.",
          "properties": {
            "muted": {
              "type": "boolean",
              "description": "Whether the viewer has muted the list."
            },
            "blocked": {
              "type": "string",
              "description": "Whether the viewer has blocked the list."
            }
          }
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was indexed."
        }
      }
    },
    "ListDetails": {
      "type": "object",
      "description": "Details about a specific list.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the list."
        },
        "cid": {
          "type": "string",
          "description": "The content identifier (CID) of the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        },
        "purpose": {
          "type": "string",
          "description": "The purpose or category of the list."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the list's avatar."
        },
        "listItemCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "labels": {
          "type": "array",
          "description": "Labels associated with the list.",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was created."
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the list was indexed."
        }
      }
    },
    "Author": {
      "type": "object",
      "description": "Details about the author of the post.",
      "properties": {
        "did": {
          "type": "string",
          "description": "The decentralized identifier (DID) of the author."
        },
        "handle": {
          "type": "string",
          "description": "The author's handle or username."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the author."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the author's avatar image."
        },
        "associated": {
          "type": "object",
          "description": "Associated metadata for the author.",
          "properties": {
            "lists": {
              "type": "integer",
              "format": "int32",
              "description": "Number of lists associated with the author."
            },
            "feedgens": {
              "type": "integer",
              "format": "int32",
              "description": "Number of feed generators associated with the author."
            },
            "starterPacks": {
              "type": "integer",
              "format": "int32",
              "description": "Number of starter packs associated with the author."
            },
            "labeler": {
              "type": "boolean",
              "description": "Whether the author is a labeler."
            },
            "chat": {
              "type": "object",
              "description": "Chat-related metadata for the author.",
              "properties": {
                "allowIncoming": {
                  "type": "string",
                  "description": "Allowed incoming chat types."
                }
              }
            }
          }
        }
      }
    },
    "postView": {
      "type": "object",
      "additionalProperties": true
    },
    "replyRef": {
      "type": "object",
      "description": "References the root and parent of a post reply.",
      "required": [ "root", "parent" ],
      "properties": {
        "root": {
          "$ref": "#/definitions/strongRef"
        },
        "parent": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "strongRef": {
      "type": "object",
      "description": "Defines a strong reference with a URI and CID.",
      "required": [ "uri", "cid" ],
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the strong reference."
        },
        "cid": {
          "type": "string",
          "description": "The CID of the strong reference."
        }
      }
    },
    "reasonRepost": {
      "type": "object",
      "required": [
        "by",
        "indexedAt"
      ],
      "properties": {
        "by": {
          "$ref": "#/definitions/profileViewBasic"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "reasonPin": {
      "type": "object",
      "properties": {}
    },
    "notFoundPost": {
      "type": "object",
      "required": [
        "uri",
        "notFound"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "notFound": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "blockedPost": {
      "type": "object",
      "required": [
        "uri",
        "blocked",
        "author"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "blocked": {
          "type": "boolean",
          "default": true
        },
        "author": {
          "$ref": "#/definitions/blockedAuthor"
        }
      }
    },
    "blockedAuthor": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        }
      }
    },
    "profileAssociated": {
      "type": "object",
      "properties": {
        "lists": {
          "type": "integer"
        },
        "feedgens": {
          "type": "integer"
        },
        "starterPacks": {
          "type": "integer"
        },
        "labeler": {
          "type": "boolean"
        },
        "chat": {
          "$ref": "#/definitions/profileAssociatedChat"
        }
      }
    },
    "viewerState": {
      "type": "object",
      "description": "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
      "properties": {
        "muted": {
          "type": "boolean"
        },
        "mutedByList": {
          "$ref": "#/definitions/listViewBasic"
        },
        "blockedBy": {
          "type": "boolean"
        },
        "blocking": {
          "type": "string"
        },
        "blockingByList": {
          "$ref": "#/definitions/listViewBasic"
        },
        "following": {
          "type": "string"
        },
        "followedBy": {
          "type": "string"
        },
        "knownFollowers": {
          "$ref": "#/definitions/knownFollowers"
        }
      }
    },
    "profileAssociatedChat": {
      "type": "object",
      "required": [
        "allowIncoming"
      ],
      "properties": {
        "allowIncoming": {
          "type": "string",
          "enum": [
            "all",
            "none",
            "following"
          ]
        }
      }
    },
    "listView": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "creator",
        "name",
        "purpose",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/profileView"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "purpose": {
          "$ref": "#/definitions/listPurpose"
        },
        "description": {
          "type": "string",
          "maxLength": 3000
        },
        "descriptionFacets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "avatar": {
          "type": "string",
          "format": "uri"
        },
        "listItemCount": {
          "type": "integer",
          "minimum": 0
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/listViewerState"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "listItemView": {
      "type": "object",
      "required": [
        "uri",
        "subject"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/profileView"
        }
      }
    },
    "listViewBasic": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "name",
        "purpose"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "purpose": {
          "$ref": "#/definitions/listPurpose"
        },
        "avatar": {
          "type": "string"
        },
        "listItemCount": {
          "type": "integer",
          "minimum": 0
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/listViewerState"
        },
        "indexedAt": {
          "type": "string"
        }
      }
    },
    "label": {
      "type": "object",
      "description": "Metadata tag on an atproto resource (eg, repo or record).",
      "required": [
        "src",
        "uri",
        "val",
        "cts"
      ],
      "properties": {
        "ver": {
          "type": "integer"
        },
        "src": {
          "type": "string",
          "description": "DID of the actor who created this label."
        },
        "uri": {
          "type": "string",
          "description": "AT URI of the record, repository (account), or other resource that this label applies to.",
          "format": "uri"
        },
        "cid": {
          "type": "string",
          "description": "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
        },
        "val": {
          "type": "string",
          "description": "The short string name of the value or type of this label.",
          "maxLength": 128
        },
        "neg": {
          "type": "boolean",
          "description": "If true, this is a negation label, overwriting a previous label."
        },
        "cts": {
          "type": "string",
          "description": "Timestamp when this label was created.",
          "format": "date-time"
        },
        "exp": {
          "type": "string",
          "description": "Timestamp at which this label expires (no longer applies).",
          "format": "date-time"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "description": "Signature of dag-cbor encoded label."
        }
      }
    },
    "ActorMetadata": {
      "type": "object",
      "required": [
        "messagesSent",
        "messagesReceived",
        "convos",
        "convosStarted"
      ],
      "properties": {
        "messagesSent": {
          "type": "integer",
          "description": "The number of messages sent by the actor."
        },
        "messagesReceived": {
          "type": "integer",
          "description": "The number of messages received by the actor."
        },
        "convos": {
          "type": "integer",
          "description": "The total number of conversations the actor has participated in."
        },
        "convosStarted": {
          "type": "integer",
          "description": "The number of conversations started by the actor."
        }
      }
    },
    "knownFollowers": {
      "type": "object",
      "description": "The subject's followers whom you also follow.",
      "required": [
        "count",
        "followers"
      ],
      "properties": {
        "count": {
          "type": "integer"
        },
        "followers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profileViewBasic"
          },
          "maxItems": 5
        }
      }
    },
    "profileViewBasic": {
      "type": "object",
      "required": [
        "did",
        "handle"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string",
          "description": "Handle of the actor."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the actor.",
          "maxLength": 640
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "description": "URI of the actor's avatar."
        },
        "associated": {
          "$ref": "#/definitions/profileAssociated"
        },
        "viewer": {
          "$ref": "#/definitions/viewerState"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "description": "Array of labels associated with the actor."
        },
        "chatDisabled": {
          "type": "boolean",
          "description": "Indicates if the actor cannot actively participate in conversations."
        }
      }
    },
    "listPurpose": {
      "type": "object",
      "description": "Defines the purpose of the list.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the list purpose.",
          "enum": [ "modlist", "curatelist", "referencelist" ]
        },
        "modlistProperty": {
          "type": "string",
          "description": "A property specific to modlist.",
          "x-ms-summary": "Modlist Property"
        },
        "curatelistProperty": {
          "type": "string",
          "description": "A property specific to curatelist.",
          "x-ms-summary": "Curatelist Property"
        },
        "referencelistProperty": {
          "type": "string",
          "description": "A property specific to referencelist.",
          "x-ms-summary": "Referencelist Property"
        }
      },
      "required": [ "type" ]
    },
    "modlist": {
      "type": "string",
      "description": "A list of actors to apply an aggregate moderation action on."
    },
    "curatelist": {
      "type": "string",
      "description": "A list of actors used for curation purposes."
    },

    "listViewerState": {
      "type": "object",
      "properties": {
        "muted": {
          "type": "boolean"
        },
        "blocked": {
          "type": "string"
        }
      }
    },
    "convoView": {
      "type": "object",
      "description": "Represents a view of a conversation.",
      "x-ms-summary": "Conversation View",
      "required": [
        "id",
        "rev",
        "members",
        "muted",
        "unreadCount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the conversation.",
          "x-ms-summary": "Conversation ID"
        },
        "rev": {
          "type": "string",
          "description": "The revision identifier of the conversation.",
          "x-ms-summary": "Conversation Revision"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profileViewBasic"
          },
          "description": "List of members in the conversation.",
          "x-ms-summary": "Conversation Members"
        },
        "lastMessage": {
          "type": "object",
          "description": "The last message in the conversation.",
          "x-ms-dynamic-schema": {
            "operationId": "listConvos",
            "value-path": "lastMessage"
          },
          "x-ms-summary": "Last Message in Conversation"
        },
        "muted": {
          "type": "boolean",
          "description": "Indicates whether the conversation is muted.",
          "x-ms-summary": "Is Conversation Muted"
        },
        "opened": {
          "type": "boolean",
          "description": "Indicates whether the conversation has been opened.",
          "x-ms-summary": "Is Conversation Opened"
        },
        "unreadCount": {
          "type": "integer",
          "description": "The count of unread messages in the conversation.",
          "x-ms-summary": "Unread Message Count"
        }
      }
    },
    "getMessages": {
      "type": "object",
      "description": "Dynamic schema for retrieving messages."
    },
    "messageInput": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "maxLength": 10000
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "embed": {
          "$ref": "#/definitions/embed.record"
        }
      }
    },
    "batchItem": {
      "type": "object",
      "description": "Represents a batch item for sending a message.",
      "properties": {
        "convoId": {
          "type": "string"
        },
        "message": {
          "$ref": "#/definitions/messageInput"
        }
      },
      "required": [
        "convoId",
        "message"
      ]
    },
    "messageView": {
      "type": "object",
      "required": [
        "id",
        "rev",
        "text",
        "sender",
        "sentAt"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "maxLength": 10000
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "embed": {
          "$ref": "#/definitions/embedRecordView"
        },
        "sender": {
          "$ref": "#/definitions/messageViewSender"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "messageViewSender": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string",
          "description": "Decentralized Identifier of the sender."
        }
      }
    },
    "embedRecordView": {
      "type": "object",
      "required": [
        "record"
      ],
      "properties": {
        "record": {
          "type": "object",
          "description": "Dynamic schema for the record view.",
          "x-ms-dynamic-schema": {
            "operationId": "embedRecordView",
            "value-path": "record",
            "parameters": {
              "recordId": "{recordId}"
            }
          }
        }
      }
    },
    "embed.record": {
      "type": "object",
      "required": [
        "record"
      ],
      "properties": {
        "record": {
          "$ref": "#/definitions/strongRef"
        }
      }
    },
    "richtextFacet": {
      "type": "object",
      "description": "Annotation of a sub-string within rich text.",
      "required": [
        "index",
        "features"
      ],
      "properties": {
        "index": {
          "$ref": "#/definitions/richTextFacetByteSlice"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Feature of the rich text facet.",
            "properties": {
              "featureType": {
                "type": "string",
                "description": "Type of the feature."
              },
              "details": {
                "type": "object",
                "description": "Details about the feature."
              }
            }
          }
        }
      }
    },
    "richTextFacetByteSlice": {
      "type": "object",
      "description": "Specifies the sub-string range a facet feature applies to.",
      "required": [
        "byteStart",
        "byteEnd"
      ],
      "properties": {
        "byteStart": {
          "type": "integer",
          "description": "The starting byte of the range.",
          "minimum": 0
        },
        "byteEnd": {
          "type": "integer",
          "description": "The ending byte of the range.",
          "minimum": 0
        }
      }
    },
    "deletedMessageView": {
      "type": "object",
      "required": [
        "id",
        "rev",
        "sender",
        "sentAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the deleted message."
        },
        "rev": {
          "type": "string",
          "description": "The revision ID of the deleted message."
        },
        "sender": {
          "$ref": "#/definitions/messageViewSender"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the message was sent."
        }
      }
    },
    "lastMessage": {
      "type": "object",
      "description": "Represents the last message in a conversation.",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the message."
        },
        "text": {
          "type": "string",
          "description": "The text content of the message."
        },
        "sender": {
          "type": "string",
          "description": "The identifier of the message sender."
        },
        "sentAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the message was sent."
        }
      }
    },
    "accountView": {
      "type": "object",
      "required": [
        "did",
        "handle",
        "indexedAt"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "relatedRecords": {
          "type": "array",
          "items": {}
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "invitedBy": {
          "$ref": "#/definitions/inviteCode"
        },
        "invites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inviteCode"
          }
        },
        "invitesDisabled": {
          "type": "boolean"
        },
        "emailConfirmedAt": {
          "type": "string",
          "format": "date-time"
        },
        "inviteNote": {
          "type": "string"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "threatSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threatSignature"
          }
        }
      }
    },
    "inviteCode": {
      "type": "object",
      "required": [
        "code",
        "available",
        "disabled",
        "forAccount",
        "createdBy",
        "createdAt",
        "uses"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "available": {
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "forAccount": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "uses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inviteCodeUse"
          }
        }
      }
    },
    "threatSignature": {
      "type": "object",
      "required": [
        "property",
        "value"
      ],
      "properties": {
        "property": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "inviteCodeUse": {
      "type": "object",
      "required": [
        "usedBy",
        "usedAt"
      ],
      "properties": {
        "usedBy": {
          "type": "string"
        },
        "usedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "statusAttr": {
      "type": "object",
      "required": [
        "applied"
      ],
      "properties": {
        "applied": {
          "type": "boolean"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "appPassword": {
      "type": "object",
      "required": [
        "name",
        "password",
        "createdAt"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "privileged": {
          "type": "boolean"
        }
      }
    },
    "describeServerLinks": {
      "type": "object",
      "properties": {
        "privacyPolicy": {
          "type": "string",
          "format": "uri"
        },
        "termsOfService": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "serviceConfig": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "viewerConfig": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "roleAdmin",
            "roleModerator",
            "roleTriage"
          ]
        }
      }
    },
    "describeServerContact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "describeFeedGeneratorFeed": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "describeFeedGeneratorLinks": {
      "type": "object",
      "properties": {
        "privacyPolicy": {
          "type": "string"
        },
        "termsOfService": {
          "type": "string"
        }
      }
    },
    "feedViewPost": {
      "type": "object",
      "required": [
        "post"
      ],
      "properties": {
        "post": {
          "$ref": "#/definitions/postView"
        },
        "reply": {
          "$ref": "#/definitions/replyRef"
        },
        "reason": {
          "type": "object",
          "description": "Reason for the feed post. Can be either a repost or a pin.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "reasonRepost",
                "reasonPin"
              ]
            },
            "details": {
              "type": "object",
              "additionalProperties": true,
              "description": "Additional details specific to the reason type. Matches either reasonRepost or reasonPin."
            }
          }
        },
        "feedContext": {
          "type": "string",
          "description": "Context provided by feed generator that may be passed back alongside interactions.",
          "maxLength": 2000
        }
      }
    },
    "generatorView": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "did",
        "creator",
        "displayName",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "did": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/profileView"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 3000
        },
        "descriptionFacets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/richtextFacet"
          }
        },
        "avatar": {
          "type": "string",
          "format": "uri"
        },
        "likeCount": {
          "type": "integer",
          "minimum": 0
        },
        "acceptsInteractions": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "viewer": {
          "$ref": "#/definitions/generatorViewerState"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "generatorViewerState": {
      "type": "object",
      "properties": {
        "like": {
          "type": "string"
        }
      }
    },
    "threadgateView": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "record": {},
        "lists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listViewBasic"
          }
        }
      }
    },
    "interaction": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string"
        },
        "event": {
          "type": "string",
          "enum": [
            "requestLess",
            "requestMore",
            "clickthroughItem",
            "clickthroughAuthor",
            "clickthroughReposter",
            "clickthroughEmbed",
            "interactionSeen",
            "interactionLike",
            "interactionRepost",
            "interactionReply",
            "interactionQuote",
            "interactionShare"
          ]
        },
        "feedContext": {
          "type": "string",
          "description": "Context on a feed item originally supplied by the feed generator on getFeedSkeleton.",
          "maxLength": 2000
        }
      }
    },
    "requestLess": {
      "type": "string",
      "description": "Request that less content like the given feed item be shown in the feed."
    },
    "requestMore": {
      "type": "string",
      "description": "Request that more content like the given feed item be shown in the feed."
    },
    "clickthroughItem": {
      "type": "string",
      "description": "User clicked through to the feed item"
    },
    "clickthroughAuthor": {
      "type": "string",
      "description": "User clicked through to the author of the feed item"
    },
    "clickthroughReposter": {
      "type": "string",
      "description": "User clicked through to the reposter of the feed item"
    },
    "clickthroughEmbed": {
      "type": "string",
      "description": "User clicked through to the embedded content of the feed item"
    },
    "interactionSeen": {
      "type": "string",
      "description": "Feed item was seen by user"
    },
    "interactionLike": {
      "type": "string",
      "description": "User liked the feed item"
    },
    "interactionRepost": {
      "type": "string",
      "description": "User reposted the feed item"
    },
    "interactionReply": {
      "type": "string",
      "description": "User replied to the feed item"
    },
    "interactionQuote": {
      "type": "string",
      "description": "User quoted the feed item"
    },
    "interactionShare": {
      "type": "string",
      "description": "User shared the feed item"
    },
    "getLikesLike": {
      "type": "object",
      "required": [
        "indexedAt",
        "createdAt",
        "actor"
      ],
      "properties": {
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "actor": {
          "$ref": "#/definitions/profileView"
        }
      }
    },
    "feedLike": {
      "type": "object",
      "required": [
        "subject",
        "createdAt"
      ],
      "properties": {
        "subject": {
          "$ref": "#/definitions/strongRef"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "skeletonFeedPost": {
      "type": "object",
      "required": [
        "post"
      ],
      "properties": {
        "post": {
          "type": "string",
          "description": "The AT-URI of the post.",
          "maxLength": 2000
        },
        "reasonRepost": {
          "$ref": "#/definitions/skeletonReasonRepost"
        },
        "reasonPin": {
          "$ref": "#/definitions/skeletonReasonPin"
        },
        "feedContext": {
          "type": "string",
          "description": "Context passed through to the client and returned to the feed generator alongside interactions.",
          "maxLength": 2000
        }
      }
    },
    "skeletonReasonRepost": {
      "type": "object",
      "required": [
        "repost"
      ],
      "properties": {
        "repost": {
          "type": "string"
        }
      }
    },
    "skeletonReasonPin": {
      "type": "object",
      "properties": {}
    },
    "reasonType": {
      "type": "object",
      "description": "Reason type for the moderation report. One of the predefined reasons.",
      "properties": {
        "reasonSpam": {
          "$ref": "#/definitions/reasonSpam"
        },
        "reasonViolation": {
          "$ref": "#/definitions/reasonViolation"
        },
        "reasonMisleading": {
          "$ref": "#/definitions/reasonMisleading"
        },
        "reasonSexual": {
          "$ref": "#/definitions/reasonSexual"
        },
        "reasonRude": {
          "$ref": "#/definitions/reasonRude"
        },
        "reasonOther": {
          "$ref": "#/definitions/reasonOther"
        },
        "reasonAppeal": {
          "$ref": "#/definitions/reasonAppeal"
        }
      },
      "additionalProperties": false,
      "example": {
        "reasonSpam": {
          "details": "Spam content"
        }
      }
    },

    "reasonSpam": {
      "type": "string",
      "description": "Spam: frequent unwanted promotion, replies, mentions"
    },
    "reasonViolation": {
      "type": "string",
      "description": "Direct violation of server rules, laws, terms of service"
    },
    "reasonMisleading": {
      "type": "string",
      "description": "Misleading identity, affiliation, or content"
    },
    "reasonSexual": {
      "type": "string",
      "description": "Unwanted or mislabeled sexual content"
    },
    "reasonRude": {
      "type": "string",
      "description": "Rude, harassing, explicit, or otherwise unwelcoming behavior"
    },
    "reasonOther": {
      "type": "string",
      "description": "Other: reports not falling under another report category"
    },
    "reasonAppeal": {
      "type": "string",
      "description": "Appeal: appeal a previously taken moderation action"
    },
    "repoRef": {
      "type": "object",
      "required": [
        "did"
      ],
      "properties": {
        "did": {
          "type": "string"
        }
      }
    },
    "repoBlobRef": {
      "type": "object",
      "required": [
        "did",
        "cid"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "recordUri": {
          "type": "string"
        }
      }
    },
    "notification": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "author",
        "reason",
        "record",
        "isRead",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/profileView"
        },
        "reason": {
          "type": "string",
          "description": "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.",
          "enum": [
            "like",
            "repost",
            "follow",
            "mention",
            "reply",
            "quote",
            "starterpack-joined"
          ]
        },
        "reasonSubject": {
          "type": "string"
        },
        "record": {},
        "isRead": {
          "type": "boolean"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        }
      }
    },
    "labelerView": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "creator",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/profileView"
        },
        "likeCount": {
          "type": "integer",
          "minimum": 0
        },
        "viewer": {
          "$ref": "#/definitions/labelerViewerState"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        }
      }
    },
    "labelerViewDetailed": {
      "type": "object",
      "required": [
        "uri",
        "cid",
        "creator",
        "policies",
        "indexedAt"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/profileView"
        },
        "policies": {
          "$ref": "#/definitions/labelerPolicies"
        },
        "likeCount": {
          "type": "integer",
          "minimum": 0
        },
        "viewer": {
          "$ref": "#/definitions/labelerViewerState"
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        }
      }
    },
    "labelerViewerState": {
      "type": "object",
      "properties": {
        "like": {
          "type": "string"
        }
      }
    },
    "labelerPolicies": {
      "type": "object",
      "required": [
        "labelValues"
      ],
      "properties": {
        "labelValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/labelValue"
          }
        },
        "labelValueDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/labelValueDefinition"
          }
        }
      }
    },
    "service": {
      "type": "object",
      "required": [
        "policies",
        "createdAt"
      ],
      "properties": {
        "policies": {
          "$ref": "#/definitions/labelerPolicies"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/selfLabels"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "selfLabels": {
      "type": "object",
      "description": "Metadata tags on an atproto record, published by the author within the record.",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/selfLabel"
          },
          "maxItems": 10
        }
      }
    },
    "selfLabel": {
      "type": "object",
      "description": "Metadata tag on an atproto record, published by the author within the record.",
      "required": [
        "val"
      ],
      "properties": {
        "val": {
          "type": "string",
          "description": "The short string name of the value or type of this label.",
          "maxLength": 128
        }
      }
    },
    "labelValueDefinition": {
      "type": "object",
      "description": "Declares a label value and its expected interpretations and behaviors.",
      "required": [
        "identifier",
        "severity",
        "blurs",
        "locales"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
          "maxLength": 100
        },
        "severity": {
          "type": "string",
          "description": "How should a client visually convey this label? inform, alert, warning.",
          "enum": [
            "inform",
            "alert",
            "none"
          ]
        },
        "blurs": {
          "type": "string",
          "description": "What should this label hide in the UI, if applied? content, media, none.",
          "enum": [
            "content",
            "media",
            "none"
          ]
        },
        "defaultSetting": {
          "type": "string",
          "description": "The default setting for this label.",
          "default": "warn",
          "enum": [
            "ignore",
            "warn",
            "hide"
          ]
        },
        "adultOnly": {
          "type": "boolean",
          "description": "Does the user need to have adult content enabled in order to configure this label?"
        },
        "locales": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/labelValueDefinitionStrings"
          }
        }
      }
    },
    "labelValueDefinitionStrings": {
      "type": "object",
      "description": "Strings which describe the label in the UI, localized into a specific language.",
      "required": [
        "lang",
        "name",
        "description"
      ],
      "properties": {
        "lang": {
          "type": "string",
          "description": "The code of the language these strings are written in."
        },
        "name": {
          "type": "string",
          "description": "A short human-readable name for the label.",
          "maxLength": 640
        },
        "description": {
          "type": "string",
          "description": "A longer description of what the label means and why it might be applied.",
          "maxLength": 100000
        }
      }
    },
    "labelValue": {
      "type": "string",
      "enum": [
        "!hide",
        "!no-promote",
        "!warn",
        "!no-unauthenticated",
        "dmca-violation",
        "doxxing",
        "porn",
        "sexual",
        "nudity",
        "nsfl",
        "gore"
      ]
    },
    "jobStatus": {
      "type": "object",
      "required": [
        "jobId",
        "did",
        "state"
      ],
      "properties": {
        "jobId": {
          "type": "string"
        },
        "did": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "description": "The state of the video processing job.",
          "enum": [
            "JOB_STATE_COMPLETED",
            "JOB_STATE_FAILED"
          ]
        },
        "progress": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "blob": {
          "type": "string",
          "format": "binary"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "templateView": {
      "type": "object",
      "required": [
        "id",
        "name",
        "contentMarkdown",
        "disabled",
        "lastUpdatedBy",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the template."
        },
        "subject": {
          "type": "string",
          "description": "Content of the template, can contain markdown and variable placeholders."
        },
        "contentMarkdown": {
          "type": "string",
          "description": "Subject of the message, used in emails."
        },
        "disabled": {
          "type": "boolean"
        },
        "lang": {
          "type": "string",
          "description": "Message language."
        },
        "lastUpdatedBy": {
          "type": "string",
          "description": "DID of the user who last updated the template."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "repoView": {
      "type": "object",
      "required": [
        "did",
        "handle",
        "relatedRecords",
        "indexedAt",
        "moderation"
      ],
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "relatedRecords": {
          "type": "array",
          "items": {}
        },
        "indexedAt": {
          "type": "string",
          "format": "date-time"
        },
        "moderation": {
          "$ref": "#/definitions/moderation"
        },
        "invitedBy": {
          "$ref": "#/definitions/inviteCode"
        },
        "invitesDisabled": {
          "type": "boolean"
        },
        "inviteNote": {
          "type": "string"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "threatSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threatSignature"
          }
        }
      }
    },
    "moderation": {
      "type": "object",
      "properties": {
        "subjectStatus": {
          "$ref": "#/definitions/subjectStatusView"
        }
      }
    },
    "accountHosting": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "takendown",
            "suspended",
            "deleted",
            "deactivated",
            "unknown"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "reactivatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "subjectStatusView": {
      "type": "object",
      "required": [
        "id",
        "subject",
        "createdAt",
        "updatedAt",
        "reviewState"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier of the subject status."
        },
        "subject": {
          "type": "object",
          "description": "One of the subject references.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of subject reference.",
              "enum": [
                "repoRef",
                "strongRef"
              ]
            },
            "repoRef": {
              "$ref": "#/definitions/repoRef"
            },
            "strongRef": {
              "$ref": "#/definitions/strongRef"
            }
          }
        },
        "hosting": {
          "type": "object",
          "description": "Hosting options.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of hosting.",
              "enum": [
                "accountHosting",
                "recordHosting"
              ]
            },
            "accountHosting": {
              "type": "object",
              "description": "Details for account hosting.",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "takendown",
                    "suspended",
                    "deleted",
                    "deactivated",
                    "unknown"
                  ]
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "recordHosting": {
              "type": "object",
              "description": "Details for record hosting.",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "deleted",
                    "unknown"
                  ]
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the subject status was created."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the subject status was last updated."
        },
        "reviewState": {
          "type": "string",
          "description": "The review state of the subject.",
          "enum": [
            "reviewed",
            "pending",
            "escalated"
          ]
        }
      }
    },
    "recordHosting": {
      "type": "object",
      "description": "Details for record hosting.",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "deleted",
            "unknown"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "subjectReviewState": {
      "type": "string",
      "enum": [
        "reviewed",
        "pending",
        "escalated"
      ]
    },
    "subjectBlobCids": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "subjectRepoHandle": {
      "type": "string"
    },
    "updatedAt": {
      "type": "string",
      "description": "Timestamp referencing when the last update was made to the moderation status of the subject",
      "format": "date-time"
    },
    "createdAt": {
      "type": "string",
      "description": "Timestamp referencing the first moderation status impacting event was emitted on the subject",
      "format": "date-time"
    },
    "comment": {
      "type": "string",
      "description": "Sticky comment on the subject."
    },
    "muteUntil": {
      "type": "string",
      "format": "date-time"
    },
    "muteReportingUntil": {
      "type": "string",
      "format": "date-time"
    },
    "lastReviewedBy": {
      "type": "string"
    },
    "lastReviewedAt": {
      "type": "string",
      "format": "date-time"
    },
    "lastReportedAt": {
      "type": "string",
      "format": "date-time"
    },
    "lastAppealedAt": {
      "type": "string",
      "description": "Timestamp referencing when the author of the subject appealed a moderation action",
      "format": "date-time"
    },
    "takendown": {
      "type": "boolean"
    },
    "appealed": {
      "type": "boolean",
      "description": "True indicates that the a previously taken moderator action was appealed against, by the author of the content"
    },
    "suspendUntil": {
      "type": "string",
      "format": "date-time"
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "modEventView": {
      "type": "object",
      "required": [
        "id",
        "event",
        "subject",
        "subjectBlobCids",
        "createdBy",
        "createdAt"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "event": {
          "type": "object",
          "description": "Represents one of the moderation event types.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "modEventTakedown",
                "modEventReverseTakedown",
                "modEventComment",
                "modEventReport",
                "modEventLabel",
                "modEventAcknowledge",
                "modEventEscalate",
                "modEventMute",
                "modEventUnmute",
                "modEventMuteReporter",
                "modEventUnmuteReporter",
                "modEventEmail",
                "modEventResolveAppeal",
                "modEventDivert",
                "modEventTag",
                "accountEvent",
                "identityEvent",
                "recordEvent"
              ]
            }
          }
        },
        "subject": {
          "type": "object",
          "description": "Represents one of the subject references.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "repoRef",
                "strongRef",
                "messageRef"
              ]
            }
          }
        },
        "subjectBlobCids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "creatorHandle": {
          "type": "string"
        },
        "subjectHandle": {
          "type": "string"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "description": "Standard error response for failed requests.",
      "required": [
        "error",
        "message"
      ],
      "properties": {
        "error": {
          "type": "string",
          "enum": [
            "InvalidRequest",
            "ExpiredToken",
            "InvalidToken",
            "Unauthorized",
            "NotFound",
            "InternalServerError",
            "AuthMissing"
          ],
          "description": "Type of error encountered during the request."
        },
        "message": {
          "type": "string",
          "description": "Detailed error message."
        },
        "code": {
          "type": "integer",
          "description": "Optional error code, such as an HTTP status code."
        },
        "details": {
          "type": "string",
          "description": "Additional information about the error for debugging purposes."
        }
      }
    }
  }
}
